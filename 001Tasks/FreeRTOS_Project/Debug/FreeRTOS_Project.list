
FreeRTOS_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e80  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003064  08003064  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003064  08003064  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003064  08003064  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a0  20000078  080030e4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002218  080030e4  00022218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7bc  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed2  00000000  00000000  0002a85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158b6  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcdc  00000000  00000000  0004379e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000779e9  00000000  00000000  0004f47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a0  00000000  00000000  000c6eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08002f78 	.word	0x08002f78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08002f78 	.word	0x08002f78

08000150 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b088      	sub	sp, #32
 8000154:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000156:	f000 fa8b 	bl	8000670 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800015a:	f000 f845 	bl	80001e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015e:	f000 f87f 	bl	8000260 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 8000162:	f107 0308 	add.w	r3, r7, #8
 8000166:	9301      	str	r3, [sp, #4]
 8000168:	2302      	movs	r3, #2
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <main+0x80>)
 800016e:	22c8      	movs	r2, #200	; 0xc8
 8000170:	4918      	ldr	r1, [pc, #96]	; (80001d4 <main+0x84>)
 8000172:	4819      	ldr	r0, [pc, #100]	; (80001d8 <main+0x88>)
 8000174:	f001 fa33 	bl	80015de <xTaskCreate>
 8000178:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 800017a:	697b      	ldr	r3, [r7, #20]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d00a      	beq.n	8000196 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000180:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000184:	f383 8811 	msr	BASEPRI, r3
 8000188:	f3bf 8f6f 	isb	sy
 800018c:	f3bf 8f4f 	dsb	sy
 8000190:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000192:	bf00      	nop
 8000194:	e7fe      	b.n	8000194 <main+0x44>
	status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <main+0x8c>)
 80001a0:	22c8      	movs	r2, #200	; 0xc8
 80001a2:	490f      	ldr	r1, [pc, #60]	; (80001e0 <main+0x90>)
 80001a4:	480f      	ldr	r0, [pc, #60]	; (80001e4 <main+0x94>)
 80001a6:	f001 fa1a 	bl	80015de <xTaskCreate>
 80001aa:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 80001ac:	697b      	ldr	r3, [r7, #20]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d00a      	beq.n	80001c8 <main+0x78>
        __asm volatile
 80001b2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80001b6:	f383 8811 	msr	BASEPRI, r3
 80001ba:	f3bf 8f6f 	isb	sy
 80001be:	f3bf 8f4f 	dsb	sy
 80001c2:	60fb      	str	r3, [r7, #12]
    }
 80001c4:	bf00      	nop
 80001c6:	e7fe      	b.n	80001c6 <main+0x76>
	vTaskStartScheduler();
 80001c8:	f001 fb40 	bl	800184c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80001cc:	e7fe      	b.n	80001cc <main+0x7c>
 80001ce:	bf00      	nop
 80001d0:	08002f90 	.word	0x08002f90
 80001d4:	08002fa8 	.word	0x08002fa8
 80001d8:	0800028d 	.word	0x0800028d
 80001dc:	08002fb0 	.word	0x08002fb0
 80001e0:	08002fc8 	.word	0x08002fc8
 80001e4:	080002b1 	.word	0x080002b1

080001e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	; 0x40
 80001ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 f9b2 	bl	8002560 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fb38 	bl	8000894 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x46>
	{
		Error_Handler();
 800022a:	f000 f862 	bl	80002f2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fda5 	bl	8000d98 <HAL_RCC_ClockConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8000254:	f000 f84d 	bl	80002f2 <Error_Handler>
	}
}
 8000258:	bf00      	nop
 800025a:	3740      	adds	r7, #64	; 0x40
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_GPIO_Init+0x28>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <MX_GPIO_Init+0x28>)
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <MX_GPIO_Init+0x28>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0304 	and.w	r3, r3, #4
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40021000 	.word	0x40021000

0800028c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char*)parameters);
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f002 f9d9 	bl	800264c <puts>
		taskYIELD();
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <task1_handler+0x20>)
 800029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	f3bf 8f4f 	dsb	sy
 80002a6:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)parameters);
 80002aa:	e7f3      	b.n	8000294 <task1_handler+0x8>
 80002ac:	e000ed04 	.word	0xe000ed04

080002b0 <task2_handler>:
	}
}
static void task2_handler(void * parameters){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char*)parameters);
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f002 f9c7 	bl	800264c <puts>
		taskYIELD();
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <task2_handler+0x20>)
 80002c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	f3bf 8f4f 	dsb	sy
 80002ca:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)parameters);
 80002ce:	e7f3      	b.n	80002b8 <task2_handler+0x8>
 80002d0:	e000ed04 	.word	0xe000ed04

080002d4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80002e4:	d101      	bne.n	80002ea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80002e6:	f000 f9d9 	bl	800069c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f6:	b672      	cpsid	i
}
 80002f8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80002fa:	e7fe      	b.n	80002fa <Error_Handler+0x8>

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <HAL_MspInit+0x60>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a15      	ldr	r2, [pc, #84]	; (800035c <HAL_MspInit+0x60>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b13      	ldr	r3, [pc, #76]	; (800035c <HAL_MspInit+0x60>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <HAL_MspInit+0x60>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	4a0f      	ldr	r2, [pc, #60]	; (800035c <HAL_MspInit+0x60>)
 8000320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000324:	61d3      	str	r3, [r2, #28]
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <HAL_MspInit+0x60>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <HAL_MspInit+0x64>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	4a05      	ldr	r2, [pc, #20]	; (8000360 <HAL_MspInit+0x64>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800034e:	f001 fddd 	bl	8001f0c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40010000 	.word	0x40010000

08000364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08e      	sub	sp, #56	; 0x38
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800036c:	2300      	movs	r3, #0
 800036e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000370:	2300      	movs	r3, #0
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000374:	2300      	movs	r3, #0
 8000376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800037a:	4b34      	ldr	r3, [pc, #208]	; (800044c <HAL_InitTick+0xe8>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a33      	ldr	r2, [pc, #204]	; (800044c <HAL_InitTick+0xe8>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b31      	ldr	r3, [pc, #196]	; (800044c <HAL_InitTick+0xe8>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000392:	f107 0210 	add.w	r2, r7, #16
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4611      	mov	r1, r2
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fe61 	bl	8001064 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003a2:	6a3b      	ldr	r3, [r7, #32]
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d103      	bne.n	80003b4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003ac:	f000 fe46 	bl	800103c <HAL_RCC_GetPCLK1Freq>
 80003b0:	6378      	str	r0, [r7, #52]	; 0x34
 80003b2:	e004      	b.n	80003be <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80003b4:	f000 fe42 	bl	800103c <HAL_RCC_GetPCLK1Freq>
 80003b8:	4603      	mov	r3, r0
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003c0:	4a23      	ldr	r2, [pc, #140]	; (8000450 <HAL_InitTick+0xec>)
 80003c2:	fba2 2303 	umull	r2, r3, r2, r3
 80003c6:	0c9b      	lsrs	r3, r3, #18
 80003c8:	3b01      	subs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <HAL_InitTick+0xf0>)
 80003ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <HAL_InitTick+0xf0>)
 80003d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003da:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80003dc:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <HAL_InitTick+0xf0>)
 80003de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <HAL_InitTick+0xf0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <HAL_InitTick+0xf0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <HAL_InitTick+0xf0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80003f4:	4817      	ldr	r0, [pc, #92]	; (8000454 <HAL_InitTick+0xf0>)
 80003f6:	f000 fe83 	bl	8001100 <HAL_TIM_Base_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000400:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000404:	2b00      	cmp	r3, #0
 8000406:	d11b      	bne.n	8000440 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000408:	4812      	ldr	r0, [pc, #72]	; (8000454 <HAL_InitTick+0xf0>)
 800040a:	f000 fead 	bl	8001168 <HAL_TIM_Base_Start_IT>
 800040e:	4603      	mov	r3, r0
 8000410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800041c:	201c      	movs	r0, #28
 800041e:	f000 fa2a 	bl	8000876 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b0f      	cmp	r3, #15
 8000426:	d808      	bhi.n	800043a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000428:	2200      	movs	r2, #0
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	201c      	movs	r0, #28
 800042e:	f000 fa06 	bl	800083e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000432:	4a09      	ldr	r2, [pc, #36]	; (8000458 <HAL_InitTick+0xf4>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6013      	str	r3, [r2, #0]
 8000438:	e002      	b.n	8000440 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000440:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000444:	4618      	mov	r0, r3
 8000446:	3738      	adds	r7, #56	; 0x38
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	431bde83 	.word	0x431bde83
 8000454:	20000094 	.word	0x20000094
 8000458:	20000004 	.word	0x20000004

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <NMI_Handler+0x4>

08000462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <MemManage_Handler+0x4>

0800046e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <UsageFault_Handler+0x4>

0800047a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
	...

08000488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <TIM2_IRQHandler+0x10>)
 800048e:	f000 fe8e 	bl	80011ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000094 	.word	0x20000094

0800049c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <ITM_SendChar+0x44>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <ITM_SendChar+0x44>)
 80004ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <ITM_SendChar+0x48>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <ITM_SendChar+0x48>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004be:	bf00      	nop
 80004c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f8      	beq.n	80004c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	6013      	str	r3, [r2, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	e000edfc 	.word	0xe000edfc
 80004e4:	e0000e00 	.word	0xe0000e00

080004e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e00a      	b.n	8000510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004fa:	f3af 8000 	nop.w
 80004fe:	4601      	mov	r1, r0
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	b2ca      	uxtb	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf0      	blt.n	80004fa <_read+0x12>
	}

return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_write>:

int _write(int file, char *ptr, int len)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e009      	b.n	8000548 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffad 	bl	800049c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf1      	blt.n	8000534 <_write+0x12>
	}
	return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_close>:

int _close(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	return -1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000580:	605a      	str	r2, [r3, #4]
	return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <_isatty>:

int _isatty(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
	return 1;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
	return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
	...

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <SystemInit+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <SystemInit+0x5c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <SystemInit+0x5c>)
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	4911      	ldr	r1, [pc, #68]	; (8000618 <SystemInit+0x5c>)
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <SystemInit+0x60>)
 80005d4:	4013      	ands	r3, r2
 80005d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <SystemInit+0x5c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <SystemInit+0x5c>)
 80005de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <SystemInit+0x5c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <SystemInit+0x5c>)
 80005ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <SystemInit+0x5c>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <SystemInit+0x5c>)
 80005fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <SystemInit+0x5c>)
 8000602:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000606:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SystemInit+0x64>)
 800060a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	f8ff0000 	.word	0xf8ff0000
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000624:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000626:	e003      	b.n	8000630 <LoopCopyDataInit>

08000628 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800062a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800062c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800062e:	3104      	adds	r1, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000634:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000636:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000638:	d3f6      	bcc.n	8000628 <CopyDataInit>
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800063c:	e002      	b.n	8000644 <LoopFillZerobss>

0800063e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000640:	f842 3b04 	str.w	r3, [r2], #4

08000644 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000646:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000648:	d3f9      	bcc.n	800063e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800064a:	f7ff ffb7 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064e:	f001 ff63 	bl	8002518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff fd7d 	bl	8000150 <main>
  bx lr
 8000656:	4770      	bx	lr
  ldr r3, =_sidata
 8000658:	0800306c 	.word	0x0800306c
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000660:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000664:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000668:	20002218 	.word	0x20002218

0800066c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_2_IRQHandler>
	...

08000670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_Init+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_Init+0x28>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 f8d1 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000686:	200f      	movs	r0, #15
 8000688:	f7ff fe6c 	bl	8000364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800068c:	f7ff fe36 	bl	80002fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x1c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x20>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <HAL_IncTick+0x20>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20000008 	.word	0x20000008
 80006bc:	200000d4 	.word	0x200000d4

080006c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <HAL_GetTick+0x10>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	200000d4 	.word	0x200000d4

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4906      	ldr	r1, [pc, #24]	; (800076c <__NVIC_EnableIRQ+0x34>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	; (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43d9      	mvns	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	4313      	orrs	r3, r2
         );
}
 800081e:	4618      	mov	r0, r3
 8000820:	3724      	adds	r7, #36	; 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff4f 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000850:	f7ff ff64 	bl	800071c <__NVIC_GetPriorityGrouping>
 8000854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff ffb2 	bl	80007c4 <NVIC_EncodePriority>
 8000860:	4602      	mov	r2, r0
 8000862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff81 	bl	8000770 <__NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff57 	bl	8000738 <__NVIC_EnableIRQ>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e272      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f000 8087 	beq.w	80009c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008b4:	4b92      	ldr	r3, [pc, #584]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 030c 	and.w	r3, r3, #12
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d00c      	beq.n	80008da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008c0:	4b8f      	ldr	r3, [pc, #572]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 030c 	and.w	r3, r3, #12
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d112      	bne.n	80008f2 <HAL_RCC_OscConfig+0x5e>
 80008cc:	4b8c      	ldr	r3, [pc, #560]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d8:	d10b      	bne.n	80008f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008da:	4b89      	ldr	r3, [pc, #548]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d06c      	beq.n	80009c0 <HAL_RCC_OscConfig+0x12c>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d168      	bne.n	80009c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e24c      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fa:	d106      	bne.n	800090a <HAL_RCC_OscConfig+0x76>
 80008fc:	4b80      	ldr	r3, [pc, #512]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a7f      	ldr	r2, [pc, #508]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e02e      	b.n	8000968 <HAL_RCC_OscConfig+0xd4>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10c      	bne.n	800092c <HAL_RCC_OscConfig+0x98>
 8000912:	4b7b      	ldr	r3, [pc, #492]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a7a      	ldr	r2, [pc, #488]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	4b78      	ldr	r3, [pc, #480]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a77      	ldr	r2, [pc, #476]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e01d      	b.n	8000968 <HAL_RCC_OscConfig+0xd4>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000934:	d10c      	bne.n	8000950 <HAL_RCC_OscConfig+0xbc>
 8000936:	4b72      	ldr	r3, [pc, #456]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a71      	ldr	r2, [pc, #452]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	4b6f      	ldr	r3, [pc, #444]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a6e      	ldr	r2, [pc, #440]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e00b      	b.n	8000968 <HAL_RCC_OscConfig+0xd4>
 8000950:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a6a      	ldr	r2, [pc, #424]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a67      	ldr	r2, [pc, #412]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d013      	beq.n	8000998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fea6 	bl	80006c0 <HAL_GetTick>
 8000974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000976:	e008      	b.n	800098a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000978:	f7ff fea2 	bl	80006c0 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b64      	cmp	r3, #100	; 0x64
 8000984:	d901      	bls.n	800098a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e200      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f0      	beq.n	8000978 <HAL_RCC_OscConfig+0xe4>
 8000996:	e014      	b.n	80009c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000998:	f7ff fe92 	bl	80006c0 <HAL_GetTick>
 800099c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099e:	e008      	b.n	80009b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009a0:	f7ff fe8e 	bl	80006c0 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b64      	cmp	r3, #100	; 0x64
 80009ac:	d901      	bls.n	80009b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80009ae:	2303      	movs	r3, #3
 80009b0:	e1ec      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f0      	bne.n	80009a0 <HAL_RCC_OscConfig+0x10c>
 80009be:	e000      	b.n	80009c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d063      	beq.n	8000a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ce:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00b      	beq.n	80009f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 030c 	and.w	r3, r3, #12
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	d11c      	bne.n	8000a20 <HAL_RCC_OscConfig+0x18c>
 80009e6:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d116      	bne.n	8000a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f2:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <HAL_RCC_OscConfig+0x176>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d001      	beq.n	8000a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e1c0      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4939      	ldr	r1, [pc, #228]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a1e:	e03a      	b.n	8000a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d020      	beq.n	8000a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a28:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <HAL_RCC_OscConfig+0x270>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fe47 	bl	80006c0 <HAL_GetTick>
 8000a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a34:	e008      	b.n	8000a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a36:	f7ff fe43 	bl	80006c0 <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e1a1      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f0      	beq.n	8000a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	4927      	ldr	r1, [pc, #156]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
 8000a68:	e015      	b.n	8000a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <HAL_RCC_OscConfig+0x270>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a70:	f7ff fe26 	bl	80006c0 <HAL_GetTick>
 8000a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a76:	e008      	b.n	8000a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a78:	f7ff fe22 	bl	80006c0 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d901      	bls.n	8000a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a86:	2303      	movs	r3, #3
 8000a88:	e180      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f0      	bne.n	8000a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d03a      	beq.n	8000b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d019      	beq.n	8000ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_RCC_OscConfig+0x274>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab0:	f7ff fe06 	bl	80006c0 <HAL_GetTick>
 8000ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ab6:	e008      	b.n	8000aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ab8:	f7ff fe02 	bl	80006c0 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e160      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f0      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 faf4 	bl	80010c4 <RCC_Delay>
 8000adc:	e01c      	b.n	8000b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_RCC_OscConfig+0x274>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae4:	f7ff fdec 	bl	80006c0 <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aea:	e00f      	b.n	8000b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aec:	f7ff fde8 	bl	80006c0 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d908      	bls.n	8000b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e146      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	42420000 	.word	0x42420000
 8000b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b0c:	4b92      	ldr	r3, [pc, #584]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e9      	bne.n	8000aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f000 80a6 	beq.w	8000c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b2a:	4b8b      	ldr	r3, [pc, #556]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10d      	bne.n	8000b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b88      	ldr	r3, [pc, #544]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a87      	ldr	r2, [pc, #540]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b85      	ldr	r3, [pc, #532]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b52:	4b82      	ldr	r3, [pc, #520]	; (8000d5c <HAL_RCC_OscConfig+0x4c8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d118      	bne.n	8000b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b5e:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <HAL_RCC_OscConfig+0x4c8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a7e      	ldr	r2, [pc, #504]	; (8000d5c <HAL_RCC_OscConfig+0x4c8>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fda9 	bl	80006c0 <HAL_GetTick>
 8000b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b70:	e008      	b.n	8000b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b72:	f7ff fda5 	bl	80006c0 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	2b64      	cmp	r3, #100	; 0x64
 8000b7e:	d901      	bls.n	8000b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b80:	2303      	movs	r3, #3
 8000b82:	e103      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b84:	4b75      	ldr	r3, [pc, #468]	; (8000d5c <HAL_RCC_OscConfig+0x4c8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f0      	beq.n	8000b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d106      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x312>
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	4a6e      	ldr	r2, [pc, #440]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6213      	str	r3, [r2, #32]
 8000ba4:	e02d      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x334>
 8000bae:	4b6a      	ldr	r3, [pc, #424]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	4a69      	ldr	r2, [pc, #420]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6213      	str	r3, [r2, #32]
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	4a66      	ldr	r2, [pc, #408]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bc0:	f023 0304 	bic.w	r3, r3, #4
 8000bc4:	6213      	str	r3, [r2, #32]
 8000bc6:	e01c      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	2b05      	cmp	r3, #5
 8000bce:	d10c      	bne.n	8000bea <HAL_RCC_OscConfig+0x356>
 8000bd0:	4b61      	ldr	r3, [pc, #388]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	4a60      	ldr	r2, [pc, #384]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6213      	str	r3, [r2, #32]
 8000bdc:	4b5e      	ldr	r3, [pc, #376]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	4a5d      	ldr	r2, [pc, #372]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6213      	str	r3, [r2, #32]
 8000be8:	e00b      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
 8000bea:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bec:	6a1b      	ldr	r3, [r3, #32]
 8000bee:	4a5a      	ldr	r2, [pc, #360]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bf0:	f023 0301 	bic.w	r3, r3, #1
 8000bf4:	6213      	str	r3, [r2, #32]
 8000bf6:	4b58      	ldr	r3, [pc, #352]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	4a57      	ldr	r2, [pc, #348]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d015      	beq.n	8000c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c0a:	f7ff fd59 	bl	80006c0 <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c10:	e00a      	b.n	8000c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c12:	f7ff fd55 	bl	80006c0 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e0b1      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c28:	4b4b      	ldr	r3, [pc, #300]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0ee      	beq.n	8000c12 <HAL_RCC_OscConfig+0x37e>
 8000c34:	e014      	b.n	8000c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c36:	f7ff fd43 	bl	80006c0 <HAL_GetTick>
 8000c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c3c:	e00a      	b.n	8000c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c3e:	f7ff fd3f 	bl	80006c0 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e09b      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1ee      	bne.n	8000c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d105      	bne.n	8000c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c66:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8087 	beq.w	8000d8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 030c 	and.w	r3, r3, #12
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d061      	beq.n	8000d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d146      	bne.n	8000d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <HAL_RCC_OscConfig+0x4cc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c96:	f7ff fd13 	bl	80006c0 <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c9e:	f7ff fd0f 	bl	80006c0 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e06d      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f0      	bne.n	8000c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc4:	d108      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	4921      	ldr	r1, [pc, #132]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a19      	ldr	r1, [r3, #32]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	491b      	ldr	r1, [pc, #108]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_RCC_OscConfig+0x4cc>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fce3 	bl	80006c0 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cfe:	f7ff fcdf 	bl	80006c0 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e03d      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x46a>
 8000d1c:	e035      	b.n	8000d8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_RCC_OscConfig+0x4cc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fccc 	bl	80006c0 <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fcc8 	bl	80006c0 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e026      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f0      	bne.n	8000d2c <HAL_RCC_OscConfig+0x498>
 8000d4a:	e01e      	b.n	8000d8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d107      	bne.n	8000d64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e019      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40007000 	.word	0x40007000
 8000d60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_RCC_OscConfig+0x500>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d001      	beq.n	8000d8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e0d0      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000dac:	4b6a      	ldr	r3, [pc, #424]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d910      	bls.n	8000ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dba:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 0207 	bic.w	r2, r3, #7
 8000dc2:	4965      	ldr	r1, [pc, #404]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dca:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d001      	beq.n	8000ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e0b8      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d020      	beq.n	8000e2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d005      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000df4:	4b59      	ldr	r3, [pc, #356]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a58      	ldr	r2, [pc, #352]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e0c:	4b53      	ldr	r3, [pc, #332]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a52      	ldr	r2, [pc, #328]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e18:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	494d      	ldr	r1, [pc, #308]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d040      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d107      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d115      	bne.n	8000e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e07f      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d107      	bne.n	8000e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e073      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e66:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e06b      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e76:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f023 0203 	bic.w	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4936      	ldr	r1, [pc, #216]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e88:	f7ff fc1a 	bl	80006c0 <HAL_GetTick>
 8000e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e8e:	e00a      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e90:	f7ff fc16 	bl	80006c0 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e053      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 020c 	and.w	r2, r3, #12
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d1eb      	bne.n	8000e90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d210      	bcs.n	8000ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 0207 	bic.w	r2, r3, #7
 8000ece:	4922      	ldr	r1, [pc, #136]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e032      	b.n	8000f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d008      	beq.n	8000f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	4916      	ldr	r1, [pc, #88]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d009      	beq.n	8000f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	490e      	ldr	r1, [pc, #56]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f26:	f000 f821 	bl	8000f6c <HAL_RCC_GetSysClockFreq>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_RCC_ClockConfig+0x1c4>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	490a      	ldr	r1, [pc, #40]	; (8000f60 <HAL_RCC_ClockConfig+0x1c8>)
 8000f38:	5ccb      	ldrb	r3, [r1, r3]
 8000f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <HAL_RCC_ClockConfig+0x1cc>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_RCC_ClockConfig+0x1d0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fa0c 	bl	8000364 <HAL_InitTick>

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	08002fe8 	.word	0x08002fe8
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f6c:	b490      	push	{r4, r7}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_RCC_GetSysClockFreq+0xac>)
 8000f74:	1d3c      	adds	r4, r7, #4
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f7c:	f240 2301 	movw	r3, #513	; 0x201
 8000f80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d002      	beq.n	8000fac <HAL_RCC_GetSysClockFreq+0x40>
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d003      	beq.n	8000fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8000faa:	e02b      	b.n	8001004 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fae:	623b      	str	r3, [r7, #32]
      break;
 8000fb0:	e02b      	b.n	800100a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	0c9b      	lsrs	r3, r3, #18
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3328      	adds	r3, #40	; 0x28
 8000fbc:	443b      	add	r3, r7
 8000fbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fc2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d012      	beq.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	0c5b      	lsrs	r3, r3, #17
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	3328      	adds	r3, #40	; 0x28
 8000fda:	443b      	add	r3, r7
 8000fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fe6:	fb03 f202 	mul.w	r2, r3, r2
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff2:	e004      	b.n	8000ffe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	623b      	str	r3, [r7, #32]
      break;
 8001002:	e002      	b.n	800100a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001006:	623b      	str	r3, [r7, #32]
      break;
 8001008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800100a:	6a3b      	ldr	r3, [r7, #32]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bc90      	pop	{r4, r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	08002fd0 	.word	0x08002fd0
 800101c:	40021000 	.word	0x40021000
 8001020:	007a1200 	.word	0x007a1200
 8001024:	003d0900 	.word	0x003d0900

08001028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_RCC_GetHCLKFreq+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001040:	f7ff fff2 	bl	8001028 <HAL_RCC_GetHCLKFreq>
 8001044:	4602      	mov	r2, r0
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	4903      	ldr	r1, [pc, #12]	; (8001060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001052:	5ccb      	ldrb	r3, [r1, r3]
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	08002ff8 	.word	0x08002ff8

08001064 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	220f      	movs	r2, #15
 8001072:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_RCC_GetClockConfig+0x58>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_RCC_GetClockConfig+0x58>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_GetClockConfig+0x58>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_RCC_GetClockConfig+0x58>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_RCC_GetClockConfig+0x5c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0207 	and.w	r2, r3, #7
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40022000 	.word	0x40022000

080010c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <RCC_Delay+0x34>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <RCC_Delay+0x38>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0a5b      	lsrs	r3, r3, #9
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80010e0:	bf00      	nop
  }
  while (Delay --);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	60fa      	str	r2, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f9      	bne.n	80010e0 <RCC_Delay+0x1c>
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	20000000 	.word	0x20000000
 80010fc:	10624dd3 	.word	0x10624dd3

08001100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e01d      	b.n	800114e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d106      	bne.n	800112c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f815 	bl	8001156 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3304      	adds	r3, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f000 f962 	bl	8001408 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b06      	cmp	r3, #6
 8001190:	d007      	beq.n	80011a2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d122      	bne.n	800120a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d11b      	bne.n	800120a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f06f 0202 	mvn.w	r2, #2
 80011da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8ed 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 80011f6:	e005      	b.n	8001204 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f8e0 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f8ef 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b04      	cmp	r3, #4
 8001216:	d122      	bne.n	800125e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b04      	cmp	r3, #4
 8001224:	d11b      	bne.n	800125e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0204 	mvn.w	r2, #4
 800122e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f8c3 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 800124a:	e005      	b.n	8001258 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f8b6 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f8c5 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b08      	cmp	r3, #8
 800126a:	d122      	bne.n	80012b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11b      	bne.n	80012b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f06f 0208 	mvn.w	r2, #8
 8001282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2204      	movs	r2, #4
 8001288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f899 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 800129e:	e005      	b.n	80012ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f88c 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f89b 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b10      	cmp	r3, #16
 80012be:	d122      	bne.n	8001306 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d11b      	bne.n	8001306 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f06f 0210 	mvn.w	r2, #16
 80012d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2208      	movs	r2, #8
 80012dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f86f 	bl	80013d0 <HAL_TIM_IC_CaptureCallback>
 80012f2:	e005      	b.n	8001300 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f862 	bl	80013be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f871 	bl	80013e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10e      	bne.n	8001332 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f06f 0201 	mvn.w	r2, #1
 800132a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7fe ffd1 	bl	80002d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133c:	2b80      	cmp	r3, #128	; 0x80
 800133e:	d10e      	bne.n	800135e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	2b80      	cmp	r3, #128	; 0x80
 800134c:	d107      	bne.n	800135e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8c0 	bl	80014de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d10e      	bne.n	800138a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001376:	2b40      	cmp	r3, #64	; 0x40
 8001378:	d107      	bne.n	800138a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f835 	bl	80013f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b20      	cmp	r3, #32
 8001396:	d10e      	bne.n	80013b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d107      	bne.n	80013b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f88b 	bl	80014cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <TIM_Base_SetConfig+0xb8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00b      	beq.n	8001438 <TIM_Base_SetConfig+0x30>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001426:	d007      	beq.n	8001438 <TIM_Base_SetConfig+0x30>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <TIM_Base_SetConfig+0xbc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d003      	beq.n	8001438 <TIM_Base_SetConfig+0x30>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <TIM_Base_SetConfig+0xc0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d108      	bne.n	800144a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <TIM_Base_SetConfig+0xb8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00b      	beq.n	800146a <TIM_Base_SetConfig+0x62>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001458:	d007      	beq.n	800146a <TIM_Base_SetConfig+0x62>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <TIM_Base_SetConfig+0xbc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d003      	beq.n	800146a <TIM_Base_SetConfig+0x62>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <TIM_Base_SetConfig+0xc0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d108      	bne.n	800147c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <TIM_Base_SetConfig+0xb8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d103      	bne.n	80014b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	615a      	str	r2, [r3, #20]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40000800 	.word	0x40000800

080014cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f103 0208 	add.w	r2, r3, #8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f103 0208 	add.w	r2, r3, #8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f103 0208 	add.w	r2, r3, #8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6892      	ldr	r2, [r2, #8]
 80015a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6852      	ldr	r2, [r2, #4]
 80015ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d103      	bne.n	80015c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80015de:	b580      	push	{r7, lr}
 80015e0:	b08c      	sub	sp, #48	; 0x30
 80015e2:	af04      	add	r7, sp, #16
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4613      	mov	r3, r2
 80015ec:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fd94 	bl	8002120 <pvPortMalloc>
 80015f8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00e      	beq.n	800161e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001600:	2058      	movs	r0, #88	; 0x58
 8001602:	f000 fd8d 	bl	8002120 <pvPortMalloc>
 8001606:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
 8001614:	e005      	b.n	8001622 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f000 fe62 	bl	80022e0 <vPortFree>
 800161c:	e001      	b.n	8001622 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001628:	88fa      	ldrh	r2, [r7, #6]
 800162a:	2300      	movs	r3, #0
 800162c:	9303      	str	r3, [sp, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f80e 	bl	8001660 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001644:	69f8      	ldr	r0, [r7, #28]
 8001646:	f000 f8a1 	bl	800178c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	e002      	b.n	8001656 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001656:	69bb      	ldr	r3, [r7, #24]
    }
 8001658:	4618      	mov	r0, r3
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	461a      	mov	r2, r3
 8001678:	21a5      	movs	r1, #165	; 0xa5
 800167a:	f000 ff71 	bl	8002560 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001688:	3b01      	subs	r3, #1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f023 0307 	bic.w	r3, r3, #7
 8001696:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80016a2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016a6:	f383 8811 	msr	BASEPRI, r3
 80016aa:	f3bf 8f6f 	isb	sy
 80016ae:	f3bf 8f4f 	dsb	sy
 80016b2:	617b      	str	r3, [r7, #20]
    }
 80016b4:	bf00      	nop
 80016b6:	e7fe      	b.n	80016b6 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01f      	beq.n	80016fe <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e012      	b.n	80016ea <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	7819      	ldrb	r1, [r3, #0]
 80016cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	3334      	adds	r3, #52	; 0x34
 80016d4:	460a      	mov	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	d9e9      	bls.n	80016c4 <prvInitialiseNewTask+0x64>
 80016f0:	e000      	b.n	80016f4 <prvInitialiseNewTask+0x94>
            {
                break;
 80016f2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80016fc:	e003      	b.n	8001706 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	2b04      	cmp	r3, #4
 800170a:	d901      	bls.n	8001710 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800170c:	2304      	movs	r3, #4
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800171a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	2200      	movs	r2, #0
 8001720:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	3304      	adds	r3, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff01 	bl	800152e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172e:	3318      	adds	r3, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fefc 	bl	800152e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800173a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	f1c3 0205 	rsb	r2, r3, #5
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	3350      	adds	r3, #80	; 0x50
 8001750:	2204      	movs	r2, #4
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f000 ff03 	bl	8002560 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	3354      	adds	r3, #84	; 0x54
 800175e:	2201      	movs	r2, #1
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fefc 	bl	8002560 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	68f9      	ldr	r1, [r7, #12]
 800176c:	69b8      	ldr	r0, [r7, #24]
 800176e:	f000 faef 	bl	8001d50 <pxPortInitialiseStack>
 8001772:	4602      	mov	r2, r0
 8001774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001776:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001782:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001794:	f000 fc00 	bl	8001f98 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <prvAddNewTaskToReadyList+0xa8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a25      	ldr	r2, [pc, #148]	; (8001834 <prvAddNewTaskToReadyList+0xa8>)
 80017a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <prvAddNewTaskToReadyList+0xac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <prvAddNewTaskToReadyList+0xac>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <prvAddNewTaskToReadyList+0xa8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d110      	bne.n	80017da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80017b8:	f000 fa32 	bl	8001c20 <prvInitialiseTaskLists>
 80017bc:	e00d      	b.n	80017da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <prvAddNewTaskToReadyList+0xb0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <prvAddNewTaskToReadyList+0xac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d802      	bhi.n	80017da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <prvAddNewTaskToReadyList+0xac>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <prvAddNewTaskToReadyList+0xb4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <prvAddNewTaskToReadyList+0xb4>)
 80017e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <prvAddNewTaskToReadyList+0xb4>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <prvAddNewTaskToReadyList+0xb8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <prvAddNewTaskToReadyList+0xb8>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <prvAddNewTaskToReadyList+0xbc>)
 800180c:	441a      	add	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff fe96 	bl	8001546 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800181a:	f000 fbed 	bl	8001ff8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <prvAddNewTaskToReadyList+0xb0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <prvAddNewTaskToReadyList+0xac>)
 8001828:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001b0 	.word	0x200001b0
 8001838:	200000d8 	.word	0x200000d8
 800183c:	200001bc 	.word	0x200001bc
 8001840:	200001cc 	.word	0x200001cc
 8001844:	200001b8 	.word	0x200001b8
 8001848:	200000dc 	.word	0x200000dc

0800184c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <vTaskStartScheduler+0x7c>)
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	2300      	movs	r3, #0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	2278      	movs	r2, #120	; 0x78
 800185e:	491b      	ldr	r1, [pc, #108]	; (80018cc <vTaskStartScheduler+0x80>)
 8001860:	481b      	ldr	r0, [pc, #108]	; (80018d0 <vTaskStartScheduler+0x84>)
 8001862:	f7ff febc 	bl	80015de <xTaskCreate>
 8001866:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d116      	bne.n	800189c <vTaskStartScheduler+0x50>
        __asm volatile
 800186e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001872:	f383 8811 	msr	BASEPRI, r3
 8001876:	f3bf 8f6f 	isb	sy
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	60bb      	str	r3, [r7, #8]
    }
 8001880:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <vTaskStartScheduler+0x88>)
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <vTaskStartScheduler+0x8c>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <vTaskStartScheduler+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001896:	f000 fad9 	bl	8001e4c <xPortStartScheduler>
 800189a:	e00e      	b.n	80018ba <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a2:	d10a      	bne.n	80018ba <vTaskStartScheduler+0x6e>
        __asm volatile
 80018a4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	607b      	str	r3, [r7, #4]
    }
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <vTaskStartScheduler+0x94>)
 80018bc:	681b      	ldr	r3, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001d4 	.word	0x200001d4
 80018cc:	08002fe0 	.word	0x08002fe0
 80018d0:	08001bfd 	.word	0x08001bfd
 80018d4:	200001d0 	.word	0x200001d0
 80018d8:	200001bc 	.word	0x200001bc
 80018dc:	200001b4 	.word	0x200001b4
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <vTaskSuspendAll+0x18>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	4a03      	ldr	r2, [pc, #12]	; (80018fc <vTaskSuspendAll+0x18>)
 80018f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200001d8 	.word	0x200001d8

08001900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <xTaskResumeAll+0xfc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10a      	bne.n	800192c <xTaskResumeAll+0x2c>
        __asm volatile
 8001916:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800191a:	f383 8811 	msr	BASEPRI, r3
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f3bf 8f4f 	dsb	sy
 8001926:	603b      	str	r3, [r7, #0]
    }
 8001928:	bf00      	nop
 800192a:	e7fe      	b.n	800192a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800192c:	f000 fb34 	bl	8001f98 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <xTaskResumeAll+0xfc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <xTaskResumeAll+0xfc>)
 8001938:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <xTaskResumeAll+0xfc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d155      	bne.n	80019ee <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <xTaskResumeAll+0x100>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d051      	beq.n	80019ee <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800194a:	e02e      	b.n	80019aa <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <xTaskResumeAll+0x104>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3318      	adds	r3, #24
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe17 	bl	800158c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe12 	bl	800158c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <xTaskResumeAll+0x108>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <xTaskResumeAll+0x108>)
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <xTaskResumeAll+0x10c>)
 8001988:	441a      	add	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3304      	adds	r3, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7ff fdd8 	bl	8001546 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <xTaskResumeAll+0x110>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d302      	bcc.n	80019aa <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <xTaskResumeAll+0x114>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <xTaskResumeAll+0x104>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1cc      	bne.n	800194c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80019b8:	f000 f9b0 	bl	8001d1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <xTaskResumeAll+0x118>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80019c8:	f000 f828 	bl	8001a1c <xTaskIncrementTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <xTaskResumeAll+0x114>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3b01      	subs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f1      	bne.n	80019c8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <xTaskResumeAll+0x118>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <xTaskResumeAll+0x114>)
 80019ec:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80019ee:	f000 fb03 	bl	8001ff8 <vPortExitCritical>

    return xAlreadyYielded;
 80019f2:	687b      	ldr	r3, [r7, #4]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200001d8 	.word	0x200001d8
 8001a00:	200001b0 	.word	0x200001b0
 8001a04:	20000170 	.word	0x20000170
 8001a08:	200001b8 	.word	0x200001b8
 8001a0c:	200000dc 	.word	0x200000dc
 8001a10:	200000d8 	.word	0x200000d8
 8001a14:	200001c4 	.word	0x200001c4
 8001a18:	200001c0 	.word	0x200001c0

08001a1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <xTaskIncrementTick+0x108>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d16f      	bne.n	8001b0e <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <xTaskIncrementTick+0x10c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001a36:	4a3c      	ldr	r2, [pc, #240]	; (8001b28 <xTaskIncrementTick+0x10c>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d120      	bne.n	8001a84 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <xTaskIncrementTick+0x110>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00a      	beq.n	8001a62 <xTaskIncrementTick+0x46>
        __asm volatile
 8001a4c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	603b      	str	r3, [r7, #0]
    }
 8001a5e:	bf00      	nop
 8001a60:	e7fe      	b.n	8001a60 <xTaskIncrementTick+0x44>
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <xTaskIncrementTick+0x110>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <xTaskIncrementTick+0x114>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <xTaskIncrementTick+0x110>)
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <xTaskIncrementTick+0x114>)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <xTaskIncrementTick+0x118>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <xTaskIncrementTick+0x118>)
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	f000 f94c 	bl	8001d1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <xTaskIncrementTick+0x11c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d344      	bcc.n	8001b18 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <xTaskIncrementTick+0x110>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <xTaskIncrementTick+0x11c>)
 8001a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9e:	601a      	str	r2, [r3, #0]
                    break;
 8001aa0:	e03a      	b.n	8001b18 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <xTaskIncrementTick+0x110>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d203      	bcs.n	8001ac2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <xTaskIncrementTick+0x11c>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ac0:	e02a      	b.n	8001b18 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fd60 	bl	800158c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3318      	adds	r3, #24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fd57 	bl	800158c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <xTaskIncrementTick+0x120>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <xTaskIncrementTick+0x120>)
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <xTaskIncrementTick+0x124>)
 8001afe:	441a      	add	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff fd1d 	bl	8001546 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b0c:	e7bf      	b.n	8001a8e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <xTaskIncrementTick+0x128>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <xTaskIncrementTick+0x128>)
 8001b16:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001b18:	697b      	ldr	r3, [r7, #20]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001d8 	.word	0x200001d8
 8001b28:	200001b4 	.word	0x200001b4
 8001b2c:	20000168 	.word	0x20000168
 8001b30:	2000016c 	.word	0x2000016c
 8001b34:	200001c8 	.word	0x200001c8
 8001b38:	200001d0 	.word	0x200001d0
 8001b3c:	200001b8 	.word	0x200001b8
 8001b40:	200000dc 	.word	0x200000dc
 8001b44:	200001c0 	.word	0x200001c0

08001b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <vTaskSwitchContext+0xa0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <vTaskSwitchContext+0xa4>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001b5c:	e03f      	b.n	8001bde <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <vTaskSwitchContext+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <vTaskSwitchContext+0xa8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	f1c3 031f 	rsb	r3, r3, #31
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	491e      	ldr	r1, [pc, #120]	; (8001bf4 <vTaskSwitchContext+0xac>)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001b8e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	607b      	str	r3, [r7, #4]
    }
 8001ba0:	bf00      	nop
 8001ba2:	e7fe      	b.n	8001ba2 <vTaskSwitchContext+0x5a>
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <vTaskSwitchContext+0xac>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d104      	bne.n	8001bd4 <vTaskSwitchContext+0x8c>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <vTaskSwitchContext+0xb0>)
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	200001d8 	.word	0x200001d8
 8001bec:	200001c4 	.word	0x200001c4
 8001bf0:	200001b8 	.word	0x200001b8
 8001bf4:	200000dc 	.word	0x200000dc
 8001bf8:	200000d8 	.word	0x200000d8

08001bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c04:	f000 f84c 	bl	8001ca0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <prvIdleTask+0x20>)
 8001c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c18:	e7f4      	b.n	8001c04 <prvIdleTask+0x8>
 8001c1a:	bf00      	nop
 8001c1c:	e000ed04 	.word	0xe000ed04

08001c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	e00c      	b.n	8001c46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <prvInitialiseTaskLists+0x60>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fc58 	bl	80014f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d9ef      	bls.n	8001c2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <prvInitialiseTaskLists+0x64>)
 8001c4e:	f7ff fc4f 	bl	80014f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <prvInitialiseTaskLists+0x68>)
 8001c54:	f7ff fc4c 	bl	80014f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <prvInitialiseTaskLists+0x6c>)
 8001c5a:	f7ff fc49 	bl	80014f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c5e:	480c      	ldr	r0, [pc, #48]	; (8001c90 <prvInitialiseTaskLists+0x70>)
 8001c60:	f7ff fc46 	bl	80014f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <prvInitialiseTaskLists+0x74>)
 8001c66:	f7ff fc43 	bl	80014f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <prvInitialiseTaskLists+0x78>)
 8001c6c:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <prvInitialiseTaskLists+0x64>)
 8001c6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <prvInitialiseTaskLists+0x7c>)
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <prvInitialiseTaskLists+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200000dc 	.word	0x200000dc
 8001c84:	20000140 	.word	0x20000140
 8001c88:	20000154 	.word	0x20000154
 8001c8c:	20000170 	.word	0x20000170
 8001c90:	20000184 	.word	0x20000184
 8001c94:	2000019c 	.word	0x2000019c
 8001c98:	20000168 	.word	0x20000168
 8001c9c:	2000016c 	.word	0x2000016c

08001ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ca6:	e019      	b.n	8001cdc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001ca8:	f000 f976 	bl	8001f98 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <prvCheckTasksWaitingTermination+0x50>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fc67 	bl	800158c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <prvCheckTasksWaitingTermination+0x54>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <prvCheckTasksWaitingTermination+0x54>)
 8001cc6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <prvCheckTasksWaitingTermination+0x58>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <prvCheckTasksWaitingTermination+0x58>)
 8001cd0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001cd2:	f000 f991 	bl	8001ff8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f810 	bl	8001cfc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <prvCheckTasksWaitingTermination+0x58>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e1      	bne.n	8001ca8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000184 	.word	0x20000184
 8001cf4:	200001b0 	.word	0x200001b0
 8001cf8:	20000198 	.word	0x20000198

08001cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fae9 	bl	80022e0 <vPortFree>
                vPortFree( pxTCB );
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fae6 	bl	80022e0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <prvResetNextTaskUnblockTime+0x2c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d104      	bne.n	8001d34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <prvResetNextTaskUnblockTime+0x30>)
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d32:	e005      	b.n	8001d40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <prvResetNextTaskUnblockTime+0x2c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <prvResetNextTaskUnblockTime+0x30>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	20000168 	.word	0x20000168
 8001d4c:	200001d0 	.word	0x200001d0

08001d50 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b04      	subs	r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f023 0201 	bic.w	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3b04      	subs	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <pxPortInitialiseStack+0x54>)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3b14      	subs	r3, #20
 8001d8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3b20      	subs	r3, #32
 8001d96:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	08001da9 	.word	0x08001da9

08001da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <prvTaskExitError+0x54>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d00a      	beq.n	8001dd2 <prvTaskExitError+0x2a>
        __asm volatile
 8001dbc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	60fb      	str	r3, [r7, #12]
    }
 8001dce:	bf00      	nop
 8001dd0:	e7fe      	b.n	8001dd0 <prvTaskExitError+0x28>
        __asm volatile
 8001dd2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	60bb      	str	r3, [r7, #8]
    }
 8001de4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001de6:	bf00      	nop
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0fc      	beq.n	8001de8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000010 	.word	0x20000010

08001e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <pxCurrentTCBConst2>)
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	6808      	ldr	r0, [r1, #0]
 8001e06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e0a:	f380 8809 	msr	PSP, r0
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f380 8811 	msr	BASEPRI, r0
 8001e1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001e1e:	4770      	bx	lr

08001e20 <pxCurrentTCBConst2>:
 8001e20:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop

08001e28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001e28:	4806      	ldr	r0, [pc, #24]	; (8001e44 <prvPortStartFirstTask+0x1c>)
 8001e2a:	6800      	ldr	r0, [r0, #0]
 8001e2c:	6800      	ldr	r0, [r0, #0]
 8001e2e:	f380 8808 	msr	MSP, r0
 8001e32:	b662      	cpsie	i
 8001e34:	b661      	cpsie	f
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	df00      	svc	0
 8001e40:	bf00      	nop
 8001e42:	0000      	.short	0x0000
 8001e44:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop

08001e4c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <xPortStartScheduler+0xac>)
 8001e54:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <xPortStartScheduler+0xb0>)
 8001e78:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e80:	e009      	b.n	8001e96 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001e8a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d0ef      	beq.n	8001e82 <xPortStartScheduler+0x36>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001eaa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <xPortStartScheduler+0xb4>)
 8001eb6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <xPortStartScheduler+0xb8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <xPortStartScheduler+0xb8>)
 8001ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <xPortStartScheduler+0xb8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <xPortStartScheduler+0xb8>)
 8001ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001ed8:	f000 f900 	bl	80020dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <xPortStartScheduler+0xbc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ee2:	f7ff ffa1 	bl	8001e28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001ee6:	f7ff fe2f 	bl	8001b48 <vTaskSwitchContext>
    prvTaskExitError();
 8001eea:	f7ff ff5d 	bl	8001da8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	e000e400 	.word	0xe000e400
 8001efc:	200001dc 	.word	0x200001dc
 8001f00:	200001e0 	.word	0x200001e0
 8001f04:	e000ed20 	.word	0xe000ed20
 8001f08:	20000010 	.word	0x20000010

08001f0c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
    //configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <vInitPrioGroupValue+0x80>)
 8001f14:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <vInitPrioGroupValue+0x84>)
 8001f38:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f40:	e009      	b.n	8001f56 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f4a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d0ef      	beq.n	8001f42 <vInitPrioGroupValue+0x36>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f6a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <vInitPrioGroupValue+0x88>)
 8001f76:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e400 	.word	0xe000e400
 8001f90:	200001dc 	.word	0x200001dc
 8001f94:	200001e0 	.word	0x200001e0

08001f98 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
        __asm volatile
 8001f9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	607b      	str	r3, [r7, #4]
    }
 8001fb0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <vPortEnterCritical+0x58>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <vPortEnterCritical+0x58>)
 8001fba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <vPortEnterCritical+0x58>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10f      	bne.n	8001fe4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <vPortEnterCritical+0x5c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <vPortEnterCritical+0x4c>
        __asm volatile
 8001fce:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	603b      	str	r3, [r7, #0]
    }
 8001fe0:	bf00      	nop
 8001fe2:	e7fe      	b.n	8001fe2 <vPortEnterCritical+0x4a>
    }
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	e000ed04 	.word	0xe000ed04

08001ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <vPortExitCritical+0x4c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10a      	bne.n	800201c <vPortExitCritical+0x24>
        __asm volatile
 8002006:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	607b      	str	r3, [r7, #4]
    }
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <vPortExitCritical+0x4c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <vPortExitCritical+0x4c>)
 8002024:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <vPortExitCritical+0x4c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <vPortExitCritical+0x42>
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002038:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000010 	.word	0x20000010
	...

08002050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002050:	f3ef 8009 	mrs	r0, PSP
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <pxCurrentTCBConst>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002060:	6010      	str	r0, [r2, #0]
 8002062:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002066:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800206a:	f380 8811 	msr	BASEPRI, r0
 800206e:	f7ff fd6b 	bl	8001b48 <vTaskSwitchContext>
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f380 8811 	msr	BASEPRI, r0
 800207a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	6808      	ldr	r0, [r1, #0]
 8002082:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002086:	f380 8809 	msr	PSP, r0
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	4770      	bx	lr

08002090 <pxCurrentTCBConst>:
 8002090:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop

08002098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
        __asm volatile
 800209e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	607b      	str	r3, [r7, #4]
    }
 80020b0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80020b2:	f7ff fcb3 	bl	8001a1c <xTaskIncrementTick>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <SysTick_Handler+0x40>)
 80020be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f383 8811 	msr	BASEPRI, r3
    }
 80020ce:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	e000ed04 	.word	0xe000ed04

080020dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <vPortSetupTimerInterrupt+0x30>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <vPortSetupTimerInterrupt+0x34>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <vPortSetupTimerInterrupt+0x38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a09      	ldr	r2, [pc, #36]	; (8002118 <vPortSetupTimerInterrupt+0x3c>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	4a08      	ldr	r2, [pc, #32]	; (800211c <vPortSetupTimerInterrupt+0x40>)
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <vPortSetupTimerInterrupt+0x30>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	e000e010 	.word	0xe000e010
 8002110:	e000e018 	.word	0xe000e018
 8002114:	20000000 	.word	0x20000000
 8002118:	10624dd3 	.word	0x10624dd3
 800211c:	e000e014 	.word	0xe000e014

08002120 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800212c:	f7ff fbda 	bl	80018e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002130:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <pvPortMalloc+0x1a8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002138:	f000 f934 	bl	80023a4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <pvPortMalloc+0x1ac>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 80a7 	bne.w	8002298 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02d      	beq.n	80021ac <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002150:	2208      	movs	r2, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d227      	bcs.n	80021ac <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800215c:	2208      	movs	r2, #8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	2b00      	cmp	r3, #0
 800216c:	d021      	beq.n	80021b2 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f023 0307 	bic.w	r3, r3, #7
 8002174:	3308      	adds	r3, #8
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d214      	bcs.n	80021a6 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f023 0307 	bic.w	r3, r3, #7
 8002182:	3308      	adds	r3, #8
 8002184:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <pvPortMalloc+0x92>
        __asm volatile
 8002190:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	617b      	str	r3, [r7, #20]
    }
 80021a2:	bf00      	nop
 80021a4:	e7fe      	b.n	80021a4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80021aa:	e002      	b.n	80021b2 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	e000      	b.n	80021b4 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80021b2:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d06e      	beq.n	8002298 <pvPortMalloc+0x178>
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <pvPortMalloc+0x1b0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d869      	bhi.n	8002298 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <pvPortMalloc+0x1b4>)
 80021c6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <pvPortMalloc+0x1b4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80021ce:	e004      	b.n	80021da <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d903      	bls.n	80021ec <pvPortMalloc+0xcc>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f1      	bne.n	80021d0 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <pvPortMalloc+0x1a8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d050      	beq.n	8002298 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2208      	movs	r2, #8
 80021fc:	4413      	add	r3, r2
 80021fe:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	2308      	movs	r3, #8
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	429a      	cmp	r2, r3
 8002216:	d91f      	bls.n	8002258 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <pvPortMalloc+0x120>
        __asm volatile
 800222a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	613b      	str	r3, [r7, #16]
    }
 800223c:	bf00      	nop
 800223e:	e7fe      	b.n	800223e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	1ad2      	subs	r2, r2, r3
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002252:	69b8      	ldr	r0, [r7, #24]
 8002254:	f000 f908 	bl	8002468 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <pvPortMalloc+0x1b0>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <pvPortMalloc+0x1b0>)
 8002264:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <pvPortMalloc+0x1b0>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <pvPortMalloc+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d203      	bcs.n	800227a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <pvPortMalloc+0x1b0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <pvPortMalloc+0x1b8>)
 8002278:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <pvPortMalloc+0x1ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	431a      	orrs	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <pvPortMalloc+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <pvPortMalloc+0x1bc>)
 8002296:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002298:	f7ff fb32 	bl	8001900 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <pvPortMalloc+0x19c>
        __asm volatile
 80022a6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	60fb      	str	r3, [r7, #12]
    }
 80022b8:	bf00      	nop
 80022ba:	e7fe      	b.n	80022ba <pvPortMalloc+0x19a>
    return pvReturn;
 80022bc:	69fb      	ldr	r3, [r7, #28]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200021ec 	.word	0x200021ec
 80022cc:	20002200 	.word	0x20002200
 80022d0:	200021f0 	.word	0x200021f0
 80022d4:	200021e4 	.word	0x200021e4
 80022d8:	200021f4 	.word	0x200021f4
 80022dc:	200021f8 	.word	0x200021f8

080022e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d04d      	beq.n	800238e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80022f2:	2308      	movs	r3, #8
 80022f4:	425b      	negs	r3, r3
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <vPortFree+0xb8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <vPortFree+0x44>
        __asm volatile
 800230e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60fb      	str	r3, [r7, #12]
    }
 8002320:	bf00      	nop
 8002322:	e7fe      	b.n	8002322 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <vPortFree+0x62>
        __asm volatile
 800232c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	60bb      	str	r3, [r7, #8]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <vPortFree+0xb8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01e      	beq.n	800238e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11a      	bne.n	800238e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <vPortFree+0xb8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002368:	f7ff fabc 	bl	80018e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <vPortFree+0xbc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4413      	add	r3, r2
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <vPortFree+0xbc>)
 8002378:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800237a:	6938      	ldr	r0, [r7, #16]
 800237c:	f000 f874 	bl	8002468 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <vPortFree+0xc0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <vPortFree+0xc0>)
 8002388:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800238a:	f7ff fab9 	bl	8001900 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20002200 	.word	0x20002200
 800239c:	200021f0 	.word	0x200021f0
 80023a0:	200021fc 	.word	0x200021fc

080023a4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <prvHeapInit+0xac>)
 80023b2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3307      	adds	r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0307 	bic.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <prvHeapInit+0xac>)
 80023d4:	4413      	add	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <prvHeapInit+0xb0>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <prvHeapInit+0xb0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80023f0:	2208      	movs	r2, #8
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0307 	bic.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <prvHeapInit+0xb4>)
 8002404:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <prvHeapInit+0xb4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <prvHeapInit+0xb4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <prvHeapInit+0xb4>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <prvHeapInit+0xb8>)
 8002432:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a09      	ldr	r2, [pc, #36]	; (8002460 <prvHeapInit+0xbc>)
 800243a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <prvHeapInit+0xc0>)
 800243e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200001e4 	.word	0x200001e4
 8002454:	200021e4 	.word	0x200021e4
 8002458:	200021ec 	.word	0x200021ec
 800245c:	200021f4 	.word	0x200021f4
 8002460:	200021f0 	.word	0x200021f0
 8002464:	20002200 	.word	0x20002200

08002468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <prvInsertBlockIntoFreeList+0xa8>)
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e002      	b.n	800247c <prvInsertBlockIntoFreeList+0x14>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	429a      	cmp	r2, r3
 8002484:	d8f7      	bhi.n	8002476 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4413      	add	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d108      	bne.n	80024aa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	441a      	add	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	441a      	add	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d118      	bne.n	80024f0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <prvInsertBlockIntoFreeList+0xac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d00d      	beq.n	80024e6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	441a      	add	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e008      	b.n	80024f8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <prvInsertBlockIntoFreeList+0xac>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e003      	b.n	80024f8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d002      	beq.n	8002506 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	200021e4 	.word	0x200021e4
 8002514:	200021ec 	.word	0x200021ec

08002518 <__libc_init_array>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	2600      	movs	r6, #0
 800251c:	4d0c      	ldr	r5, [pc, #48]	; (8002550 <__libc_init_array+0x38>)
 800251e:	4c0d      	ldr	r4, [pc, #52]	; (8002554 <__libc_init_array+0x3c>)
 8002520:	1b64      	subs	r4, r4, r5
 8002522:	10a4      	asrs	r4, r4, #2
 8002524:	42a6      	cmp	r6, r4
 8002526:	d109      	bne.n	800253c <__libc_init_array+0x24>
 8002528:	f000 fd26 	bl	8002f78 <_init>
 800252c:	2600      	movs	r6, #0
 800252e:	4d0a      	ldr	r5, [pc, #40]	; (8002558 <__libc_init_array+0x40>)
 8002530:	4c0a      	ldr	r4, [pc, #40]	; (800255c <__libc_init_array+0x44>)
 8002532:	1b64      	subs	r4, r4, r5
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	42a6      	cmp	r6, r4
 8002538:	d105      	bne.n	8002546 <__libc_init_array+0x2e>
 800253a:	bd70      	pop	{r4, r5, r6, pc}
 800253c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002540:	4798      	blx	r3
 8002542:	3601      	adds	r6, #1
 8002544:	e7ee      	b.n	8002524 <__libc_init_array+0xc>
 8002546:	f855 3b04 	ldr.w	r3, [r5], #4
 800254a:	4798      	blx	r3
 800254c:	3601      	adds	r6, #1
 800254e:	e7f2      	b.n	8002536 <__libc_init_array+0x1e>
 8002550:	08003064 	.word	0x08003064
 8002554:	08003064 	.word	0x08003064
 8002558:	08003064 	.word	0x08003064
 800255c:	08003068 	.word	0x08003068

08002560 <memset>:
 8002560:	4603      	mov	r3, r0
 8002562:	4402      	add	r2, r0
 8002564:	4293      	cmp	r3, r2
 8002566:	d100      	bne.n	800256a <memset+0xa>
 8002568:	4770      	bx	lr
 800256a:	f803 1b01 	strb.w	r1, [r3], #1
 800256e:	e7f9      	b.n	8002564 <memset+0x4>

08002570 <_puts_r>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	460e      	mov	r6, r1
 8002574:	4605      	mov	r5, r0
 8002576:	b118      	cbz	r0, 8002580 <_puts_r+0x10>
 8002578:	6983      	ldr	r3, [r0, #24]
 800257a:	b90b      	cbnz	r3, 8002580 <_puts_r+0x10>
 800257c:	f000 fa44 	bl	8002a08 <__sinit>
 8002580:	69ab      	ldr	r3, [r5, #24]
 8002582:	68ac      	ldr	r4, [r5, #8]
 8002584:	b913      	cbnz	r3, 800258c <_puts_r+0x1c>
 8002586:	4628      	mov	r0, r5
 8002588:	f000 fa3e 	bl	8002a08 <__sinit>
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <_puts_r+0xd0>)
 800258e:	429c      	cmp	r4, r3
 8002590:	d120      	bne.n	80025d4 <_puts_r+0x64>
 8002592:	686c      	ldr	r4, [r5, #4]
 8002594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002596:	07db      	lsls	r3, r3, #31
 8002598:	d405      	bmi.n	80025a6 <_puts_r+0x36>
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	0598      	lsls	r0, r3, #22
 800259e:	d402      	bmi.n	80025a6 <_puts_r+0x36>
 80025a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025a2:	f000 facf 	bl	8002b44 <__retarget_lock_acquire_recursive>
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	0719      	lsls	r1, r3, #28
 80025aa:	d51d      	bpl.n	80025e8 <_puts_r+0x78>
 80025ac:	6923      	ldr	r3, [r4, #16]
 80025ae:	b1db      	cbz	r3, 80025e8 <_puts_r+0x78>
 80025b0:	3e01      	subs	r6, #1
 80025b2:	68a3      	ldr	r3, [r4, #8]
 80025b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60a3      	str	r3, [r4, #8]
 80025bc:	bb39      	cbnz	r1, 800260e <_puts_r+0x9e>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da38      	bge.n	8002634 <_puts_r+0xc4>
 80025c2:	4622      	mov	r2, r4
 80025c4:	210a      	movs	r1, #10
 80025c6:	4628      	mov	r0, r5
 80025c8:	f000 f848 	bl	800265c <__swbuf_r>
 80025cc:	3001      	adds	r0, #1
 80025ce:	d011      	beq.n	80025f4 <_puts_r+0x84>
 80025d0:	250a      	movs	r5, #10
 80025d2:	e011      	b.n	80025f8 <_puts_r+0x88>
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <_puts_r+0xd4>)
 80025d6:	429c      	cmp	r4, r3
 80025d8:	d101      	bne.n	80025de <_puts_r+0x6e>
 80025da:	68ac      	ldr	r4, [r5, #8]
 80025dc:	e7da      	b.n	8002594 <_puts_r+0x24>
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <_puts_r+0xd8>)
 80025e0:	429c      	cmp	r4, r3
 80025e2:	bf08      	it	eq
 80025e4:	68ec      	ldreq	r4, [r5, #12]
 80025e6:	e7d5      	b.n	8002594 <_puts_r+0x24>
 80025e8:	4621      	mov	r1, r4
 80025ea:	4628      	mov	r0, r5
 80025ec:	f000 f888 	bl	8002700 <__swsetup_r>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d0dd      	beq.n	80025b0 <_puts_r+0x40>
 80025f4:	f04f 35ff 	mov.w	r5, #4294967295
 80025f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025fa:	07da      	lsls	r2, r3, #31
 80025fc:	d405      	bmi.n	800260a <_puts_r+0x9a>
 80025fe:	89a3      	ldrh	r3, [r4, #12]
 8002600:	059b      	lsls	r3, r3, #22
 8002602:	d402      	bmi.n	800260a <_puts_r+0x9a>
 8002604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002606:	f000 fa9e 	bl	8002b46 <__retarget_lock_release_recursive>
 800260a:	4628      	mov	r0, r5
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	2b00      	cmp	r3, #0
 8002610:	da04      	bge.n	800261c <_puts_r+0xac>
 8002612:	69a2      	ldr	r2, [r4, #24]
 8002614:	429a      	cmp	r2, r3
 8002616:	dc06      	bgt.n	8002626 <_puts_r+0xb6>
 8002618:	290a      	cmp	r1, #10
 800261a:	d004      	beq.n	8002626 <_puts_r+0xb6>
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	6022      	str	r2, [r4, #0]
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	e7c5      	b.n	80025b2 <_puts_r+0x42>
 8002626:	4622      	mov	r2, r4
 8002628:	4628      	mov	r0, r5
 800262a:	f000 f817 	bl	800265c <__swbuf_r>
 800262e:	3001      	adds	r0, #1
 8002630:	d1bf      	bne.n	80025b2 <_puts_r+0x42>
 8002632:	e7df      	b.n	80025f4 <_puts_r+0x84>
 8002634:	250a      	movs	r5, #10
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	6022      	str	r2, [r4, #0]
 800263c:	701d      	strb	r5, [r3, #0]
 800263e:	e7db      	b.n	80025f8 <_puts_r+0x88>
 8002640:	08003024 	.word	0x08003024
 8002644:	08003044 	.word	0x08003044
 8002648:	08003004 	.word	0x08003004

0800264c <puts>:
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <puts+0xc>)
 800264e:	4601      	mov	r1, r0
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	f7ff bf8d 	b.w	8002570 <_puts_r>
 8002656:	bf00      	nop
 8002658:	20000014 	.word	0x20000014

0800265c <__swbuf_r>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	460e      	mov	r6, r1
 8002660:	4614      	mov	r4, r2
 8002662:	4605      	mov	r5, r0
 8002664:	b118      	cbz	r0, 800266e <__swbuf_r+0x12>
 8002666:	6983      	ldr	r3, [r0, #24]
 8002668:	b90b      	cbnz	r3, 800266e <__swbuf_r+0x12>
 800266a:	f000 f9cd 	bl	8002a08 <__sinit>
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <__swbuf_r+0x98>)
 8002670:	429c      	cmp	r4, r3
 8002672:	d12b      	bne.n	80026cc <__swbuf_r+0x70>
 8002674:	686c      	ldr	r4, [r5, #4]
 8002676:	69a3      	ldr	r3, [r4, #24]
 8002678:	60a3      	str	r3, [r4, #8]
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	071a      	lsls	r2, r3, #28
 800267e:	d52f      	bpl.n	80026e0 <__swbuf_r+0x84>
 8002680:	6923      	ldr	r3, [r4, #16]
 8002682:	b36b      	cbz	r3, 80026e0 <__swbuf_r+0x84>
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	b2f6      	uxtb	r6, r6
 800268a:	1ac0      	subs	r0, r0, r3
 800268c:	6963      	ldr	r3, [r4, #20]
 800268e:	4637      	mov	r7, r6
 8002690:	4283      	cmp	r3, r0
 8002692:	dc04      	bgt.n	800269e <__swbuf_r+0x42>
 8002694:	4621      	mov	r1, r4
 8002696:	4628      	mov	r0, r5
 8002698:	f000 f922 	bl	80028e0 <_fflush_r>
 800269c:	bb30      	cbnz	r0, 80026ec <__swbuf_r+0x90>
 800269e:	68a3      	ldr	r3, [r4, #8]
 80026a0:	3001      	adds	r0, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	60a3      	str	r3, [r4, #8]
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	6022      	str	r2, [r4, #0]
 80026ac:	701e      	strb	r6, [r3, #0]
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	4283      	cmp	r3, r0
 80026b2:	d004      	beq.n	80026be <__swbuf_r+0x62>
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	07db      	lsls	r3, r3, #31
 80026b8:	d506      	bpl.n	80026c8 <__swbuf_r+0x6c>
 80026ba:	2e0a      	cmp	r6, #10
 80026bc:	d104      	bne.n	80026c8 <__swbuf_r+0x6c>
 80026be:	4621      	mov	r1, r4
 80026c0:	4628      	mov	r0, r5
 80026c2:	f000 f90d 	bl	80028e0 <_fflush_r>
 80026c6:	b988      	cbnz	r0, 80026ec <__swbuf_r+0x90>
 80026c8:	4638      	mov	r0, r7
 80026ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <__swbuf_r+0x9c>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d101      	bne.n	80026d6 <__swbuf_r+0x7a>
 80026d2:	68ac      	ldr	r4, [r5, #8]
 80026d4:	e7cf      	b.n	8002676 <__swbuf_r+0x1a>
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <__swbuf_r+0xa0>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	bf08      	it	eq
 80026dc:	68ec      	ldreq	r4, [r5, #12]
 80026de:	e7ca      	b.n	8002676 <__swbuf_r+0x1a>
 80026e0:	4621      	mov	r1, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f80c 	bl	8002700 <__swsetup_r>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d0cb      	beq.n	8002684 <__swbuf_r+0x28>
 80026ec:	f04f 37ff 	mov.w	r7, #4294967295
 80026f0:	e7ea      	b.n	80026c8 <__swbuf_r+0x6c>
 80026f2:	bf00      	nop
 80026f4:	08003024 	.word	0x08003024
 80026f8:	08003044 	.word	0x08003044
 80026fc:	08003004 	.word	0x08003004

08002700 <__swsetup_r>:
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <__swsetup_r+0xcc>)
 8002702:	b570      	push	{r4, r5, r6, lr}
 8002704:	681d      	ldr	r5, [r3, #0]
 8002706:	4606      	mov	r6, r0
 8002708:	460c      	mov	r4, r1
 800270a:	b125      	cbz	r5, 8002716 <__swsetup_r+0x16>
 800270c:	69ab      	ldr	r3, [r5, #24]
 800270e:	b913      	cbnz	r3, 8002716 <__swsetup_r+0x16>
 8002710:	4628      	mov	r0, r5
 8002712:	f000 f979 	bl	8002a08 <__sinit>
 8002716:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <__swsetup_r+0xd0>)
 8002718:	429c      	cmp	r4, r3
 800271a:	d10f      	bne.n	800273c <__swsetup_r+0x3c>
 800271c:	686c      	ldr	r4, [r5, #4]
 800271e:	89a3      	ldrh	r3, [r4, #12]
 8002720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002724:	0719      	lsls	r1, r3, #28
 8002726:	d42c      	bmi.n	8002782 <__swsetup_r+0x82>
 8002728:	06dd      	lsls	r5, r3, #27
 800272a:	d411      	bmi.n	8002750 <__swsetup_r+0x50>
 800272c:	2309      	movs	r3, #9
 800272e:	6033      	str	r3, [r6, #0]
 8002730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	81a3      	strh	r3, [r4, #12]
 800273a:	e03e      	b.n	80027ba <__swsetup_r+0xba>
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <__swsetup_r+0xd4>)
 800273e:	429c      	cmp	r4, r3
 8002740:	d101      	bne.n	8002746 <__swsetup_r+0x46>
 8002742:	68ac      	ldr	r4, [r5, #8]
 8002744:	e7eb      	b.n	800271e <__swsetup_r+0x1e>
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <__swsetup_r+0xd8>)
 8002748:	429c      	cmp	r4, r3
 800274a:	bf08      	it	eq
 800274c:	68ec      	ldreq	r4, [r5, #12]
 800274e:	e7e6      	b.n	800271e <__swsetup_r+0x1e>
 8002750:	0758      	lsls	r0, r3, #29
 8002752:	d512      	bpl.n	800277a <__swsetup_r+0x7a>
 8002754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002756:	b141      	cbz	r1, 800276a <__swsetup_r+0x6a>
 8002758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800275c:	4299      	cmp	r1, r3
 800275e:	d002      	beq.n	8002766 <__swsetup_r+0x66>
 8002760:	4630      	mov	r0, r6
 8002762:	f000 fa57 	bl	8002c14 <_free_r>
 8002766:	2300      	movs	r3, #0
 8002768:	6363      	str	r3, [r4, #52]	; 0x34
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002770:	81a3      	strh	r3, [r4, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	6063      	str	r3, [r4, #4]
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	81a3      	strh	r3, [r4, #12]
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	b94b      	cbnz	r3, 800279a <__swsetup_r+0x9a>
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800278c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002790:	d003      	beq.n	800279a <__swsetup_r+0x9a>
 8002792:	4621      	mov	r1, r4
 8002794:	4630      	mov	r0, r6
 8002796:	f000 f9fd 	bl	8002b94 <__smakebuf_r>
 800279a:	89a0      	ldrh	r0, [r4, #12]
 800279c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027a0:	f010 0301 	ands.w	r3, r0, #1
 80027a4:	d00a      	beq.n	80027bc <__swsetup_r+0xbc>
 80027a6:	2300      	movs	r3, #0
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	6963      	ldr	r3, [r4, #20]
 80027ac:	425b      	negs	r3, r3
 80027ae:	61a3      	str	r3, [r4, #24]
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	b943      	cbnz	r3, 80027c6 <__swsetup_r+0xc6>
 80027b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80027b8:	d1ba      	bne.n	8002730 <__swsetup_r+0x30>
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	0781      	lsls	r1, r0, #30
 80027be:	bf58      	it	pl
 80027c0:	6963      	ldrpl	r3, [r4, #20]
 80027c2:	60a3      	str	r3, [r4, #8]
 80027c4:	e7f4      	b.n	80027b0 <__swsetup_r+0xb0>
 80027c6:	2000      	movs	r0, #0
 80027c8:	e7f7      	b.n	80027ba <__swsetup_r+0xba>
 80027ca:	bf00      	nop
 80027cc:	20000014 	.word	0x20000014
 80027d0:	08003024 	.word	0x08003024
 80027d4:	08003044 	.word	0x08003044
 80027d8:	08003004 	.word	0x08003004

080027dc <__sflush_r>:
 80027dc:	898a      	ldrh	r2, [r1, #12]
 80027de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e0:	4605      	mov	r5, r0
 80027e2:	0710      	lsls	r0, r2, #28
 80027e4:	460c      	mov	r4, r1
 80027e6:	d457      	bmi.n	8002898 <__sflush_r+0xbc>
 80027e8:	684b      	ldr	r3, [r1, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dc04      	bgt.n	80027f8 <__sflush_r+0x1c>
 80027ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dc01      	bgt.n	80027f8 <__sflush_r+0x1c>
 80027f4:	2000      	movs	r0, #0
 80027f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027fa:	2e00      	cmp	r6, #0
 80027fc:	d0fa      	beq.n	80027f4 <__sflush_r+0x18>
 80027fe:	2300      	movs	r3, #0
 8002800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002804:	682f      	ldr	r7, [r5, #0]
 8002806:	602b      	str	r3, [r5, #0]
 8002808:	d032      	beq.n	8002870 <__sflush_r+0x94>
 800280a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	075a      	lsls	r2, r3, #29
 8002810:	d505      	bpl.n	800281e <__sflush_r+0x42>
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	1ac0      	subs	r0, r0, r3
 8002816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002818:	b10b      	cbz	r3, 800281e <__sflush_r+0x42>
 800281a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800281c:	1ac0      	subs	r0, r0, r3
 800281e:	2300      	movs	r3, #0
 8002820:	4602      	mov	r2, r0
 8002822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002824:	4628      	mov	r0, r5
 8002826:	6a21      	ldr	r1, [r4, #32]
 8002828:	47b0      	blx	r6
 800282a:	1c43      	adds	r3, r0, #1
 800282c:	89a3      	ldrh	r3, [r4, #12]
 800282e:	d106      	bne.n	800283e <__sflush_r+0x62>
 8002830:	6829      	ldr	r1, [r5, #0]
 8002832:	291d      	cmp	r1, #29
 8002834:	d82c      	bhi.n	8002890 <__sflush_r+0xb4>
 8002836:	4a29      	ldr	r2, [pc, #164]	; (80028dc <__sflush_r+0x100>)
 8002838:	40ca      	lsrs	r2, r1
 800283a:	07d6      	lsls	r6, r2, #31
 800283c:	d528      	bpl.n	8002890 <__sflush_r+0xb4>
 800283e:	2200      	movs	r2, #0
 8002840:	6062      	str	r2, [r4, #4]
 8002842:	6922      	ldr	r2, [r4, #16]
 8002844:	04d9      	lsls	r1, r3, #19
 8002846:	6022      	str	r2, [r4, #0]
 8002848:	d504      	bpl.n	8002854 <__sflush_r+0x78>
 800284a:	1c42      	adds	r2, r0, #1
 800284c:	d101      	bne.n	8002852 <__sflush_r+0x76>
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	b903      	cbnz	r3, 8002854 <__sflush_r+0x78>
 8002852:	6560      	str	r0, [r4, #84]	; 0x54
 8002854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002856:	602f      	str	r7, [r5, #0]
 8002858:	2900      	cmp	r1, #0
 800285a:	d0cb      	beq.n	80027f4 <__sflush_r+0x18>
 800285c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002860:	4299      	cmp	r1, r3
 8002862:	d002      	beq.n	800286a <__sflush_r+0x8e>
 8002864:	4628      	mov	r0, r5
 8002866:	f000 f9d5 	bl	8002c14 <_free_r>
 800286a:	2000      	movs	r0, #0
 800286c:	6360      	str	r0, [r4, #52]	; 0x34
 800286e:	e7c2      	b.n	80027f6 <__sflush_r+0x1a>
 8002870:	6a21      	ldr	r1, [r4, #32]
 8002872:	2301      	movs	r3, #1
 8002874:	4628      	mov	r0, r5
 8002876:	47b0      	blx	r6
 8002878:	1c41      	adds	r1, r0, #1
 800287a:	d1c7      	bne.n	800280c <__sflush_r+0x30>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0c4      	beq.n	800280c <__sflush_r+0x30>
 8002882:	2b1d      	cmp	r3, #29
 8002884:	d001      	beq.n	800288a <__sflush_r+0xae>
 8002886:	2b16      	cmp	r3, #22
 8002888:	d101      	bne.n	800288e <__sflush_r+0xb2>
 800288a:	602f      	str	r7, [r5, #0]
 800288c:	e7b2      	b.n	80027f4 <__sflush_r+0x18>
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002894:	81a3      	strh	r3, [r4, #12]
 8002896:	e7ae      	b.n	80027f6 <__sflush_r+0x1a>
 8002898:	690f      	ldr	r7, [r1, #16]
 800289a:	2f00      	cmp	r7, #0
 800289c:	d0aa      	beq.n	80027f4 <__sflush_r+0x18>
 800289e:	0793      	lsls	r3, r2, #30
 80028a0:	bf18      	it	ne
 80028a2:	2300      	movne	r3, #0
 80028a4:	680e      	ldr	r6, [r1, #0]
 80028a6:	bf08      	it	eq
 80028a8:	694b      	ldreq	r3, [r1, #20]
 80028aa:	1bf6      	subs	r6, r6, r7
 80028ac:	600f      	str	r7, [r1, #0]
 80028ae:	608b      	str	r3, [r1, #8]
 80028b0:	2e00      	cmp	r6, #0
 80028b2:	dd9f      	ble.n	80027f4 <__sflush_r+0x18>
 80028b4:	4633      	mov	r3, r6
 80028b6:	463a      	mov	r2, r7
 80028b8:	4628      	mov	r0, r5
 80028ba:	6a21      	ldr	r1, [r4, #32]
 80028bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80028c0:	47e0      	blx	ip
 80028c2:	2800      	cmp	r0, #0
 80028c4:	dc06      	bgt.n	80028d4 <__sflush_r+0xf8>
 80028c6:	89a3      	ldrh	r3, [r4, #12]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	e790      	b.n	80027f6 <__sflush_r+0x1a>
 80028d4:	4407      	add	r7, r0
 80028d6:	1a36      	subs	r6, r6, r0
 80028d8:	e7ea      	b.n	80028b0 <__sflush_r+0xd4>
 80028da:	bf00      	nop
 80028dc:	20400001 	.word	0x20400001

080028e0 <_fflush_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	690b      	ldr	r3, [r1, #16]
 80028e4:	4605      	mov	r5, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	b913      	cbnz	r3, 80028f0 <_fflush_r+0x10>
 80028ea:	2500      	movs	r5, #0
 80028ec:	4628      	mov	r0, r5
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	b118      	cbz	r0, 80028fa <_fflush_r+0x1a>
 80028f2:	6983      	ldr	r3, [r0, #24]
 80028f4:	b90b      	cbnz	r3, 80028fa <_fflush_r+0x1a>
 80028f6:	f000 f887 	bl	8002a08 <__sinit>
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <_fflush_r+0x6c>)
 80028fc:	429c      	cmp	r4, r3
 80028fe:	d11b      	bne.n	8002938 <_fflush_r+0x58>
 8002900:	686c      	ldr	r4, [r5, #4]
 8002902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ef      	beq.n	80028ea <_fflush_r+0xa>
 800290a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800290c:	07d0      	lsls	r0, r2, #31
 800290e:	d404      	bmi.n	800291a <_fflush_r+0x3a>
 8002910:	0599      	lsls	r1, r3, #22
 8002912:	d402      	bmi.n	800291a <_fflush_r+0x3a>
 8002914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002916:	f000 f915 	bl	8002b44 <__retarget_lock_acquire_recursive>
 800291a:	4628      	mov	r0, r5
 800291c:	4621      	mov	r1, r4
 800291e:	f7ff ff5d 	bl	80027dc <__sflush_r>
 8002922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002924:	4605      	mov	r5, r0
 8002926:	07da      	lsls	r2, r3, #31
 8002928:	d4e0      	bmi.n	80028ec <_fflush_r+0xc>
 800292a:	89a3      	ldrh	r3, [r4, #12]
 800292c:	059b      	lsls	r3, r3, #22
 800292e:	d4dd      	bmi.n	80028ec <_fflush_r+0xc>
 8002930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002932:	f000 f908 	bl	8002b46 <__retarget_lock_release_recursive>
 8002936:	e7d9      	b.n	80028ec <_fflush_r+0xc>
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <_fflush_r+0x70>)
 800293a:	429c      	cmp	r4, r3
 800293c:	d101      	bne.n	8002942 <_fflush_r+0x62>
 800293e:	68ac      	ldr	r4, [r5, #8]
 8002940:	e7df      	b.n	8002902 <_fflush_r+0x22>
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <_fflush_r+0x74>)
 8002944:	429c      	cmp	r4, r3
 8002946:	bf08      	it	eq
 8002948:	68ec      	ldreq	r4, [r5, #12]
 800294a:	e7da      	b.n	8002902 <_fflush_r+0x22>
 800294c:	08003024 	.word	0x08003024
 8002950:	08003044 	.word	0x08003044
 8002954:	08003004 	.word	0x08003004

08002958 <std>:
 8002958:	2300      	movs	r3, #0
 800295a:	b510      	push	{r4, lr}
 800295c:	4604      	mov	r4, r0
 800295e:	e9c0 3300 	strd	r3, r3, [r0]
 8002962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002966:	6083      	str	r3, [r0, #8]
 8002968:	8181      	strh	r1, [r0, #12]
 800296a:	6643      	str	r3, [r0, #100]	; 0x64
 800296c:	81c2      	strh	r2, [r0, #14]
 800296e:	6183      	str	r3, [r0, #24]
 8002970:	4619      	mov	r1, r3
 8002972:	2208      	movs	r2, #8
 8002974:	305c      	adds	r0, #92	; 0x5c
 8002976:	f7ff fdf3 	bl	8002560 <memset>
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <std+0x38>)
 800297c:	6224      	str	r4, [r4, #32]
 800297e:	6263      	str	r3, [r4, #36]	; 0x24
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <std+0x3c>)
 8002982:	62a3      	str	r3, [r4, #40]	; 0x28
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <std+0x40>)
 8002986:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <std+0x44>)
 800298a:	6323      	str	r3, [r4, #48]	; 0x30
 800298c:	bd10      	pop	{r4, pc}
 800298e:	bf00      	nop
 8002990:	08002ded 	.word	0x08002ded
 8002994:	08002e0f 	.word	0x08002e0f
 8002998:	08002e47 	.word	0x08002e47
 800299c:	08002e6b 	.word	0x08002e6b

080029a0 <_cleanup_r>:
 80029a0:	4901      	ldr	r1, [pc, #4]	; (80029a8 <_cleanup_r+0x8>)
 80029a2:	f000 b8af 	b.w	8002b04 <_fwalk_reent>
 80029a6:	bf00      	nop
 80029a8:	080028e1 	.word	0x080028e1

080029ac <__sfmoreglue>:
 80029ac:	2268      	movs	r2, #104	; 0x68
 80029ae:	b570      	push	{r4, r5, r6, lr}
 80029b0:	1e4d      	subs	r5, r1, #1
 80029b2:	4355      	muls	r5, r2
 80029b4:	460e      	mov	r6, r1
 80029b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029ba:	f000 f993 	bl	8002ce4 <_malloc_r>
 80029be:	4604      	mov	r4, r0
 80029c0:	b140      	cbz	r0, 80029d4 <__sfmoreglue+0x28>
 80029c2:	2100      	movs	r1, #0
 80029c4:	e9c0 1600 	strd	r1, r6, [r0]
 80029c8:	300c      	adds	r0, #12
 80029ca:	60a0      	str	r0, [r4, #8]
 80029cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029d0:	f7ff fdc6 	bl	8002560 <memset>
 80029d4:	4620      	mov	r0, r4
 80029d6:	bd70      	pop	{r4, r5, r6, pc}

080029d8 <__sfp_lock_acquire>:
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <__sfp_lock_acquire+0x8>)
 80029da:	f000 b8b3 	b.w	8002b44 <__retarget_lock_acquire_recursive>
 80029de:	bf00      	nop
 80029e0:	20002205 	.word	0x20002205

080029e4 <__sfp_lock_release>:
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <__sfp_lock_release+0x8>)
 80029e6:	f000 b8ae 	b.w	8002b46 <__retarget_lock_release_recursive>
 80029ea:	bf00      	nop
 80029ec:	20002205 	.word	0x20002205

080029f0 <__sinit_lock_acquire>:
 80029f0:	4801      	ldr	r0, [pc, #4]	; (80029f8 <__sinit_lock_acquire+0x8>)
 80029f2:	f000 b8a7 	b.w	8002b44 <__retarget_lock_acquire_recursive>
 80029f6:	bf00      	nop
 80029f8:	20002206 	.word	0x20002206

080029fc <__sinit_lock_release>:
 80029fc:	4801      	ldr	r0, [pc, #4]	; (8002a04 <__sinit_lock_release+0x8>)
 80029fe:	f000 b8a2 	b.w	8002b46 <__retarget_lock_release_recursive>
 8002a02:	bf00      	nop
 8002a04:	20002206 	.word	0x20002206

08002a08 <__sinit>:
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	f7ff fff0 	bl	80029f0 <__sinit_lock_acquire>
 8002a10:	69a3      	ldr	r3, [r4, #24]
 8002a12:	b11b      	cbz	r3, 8002a1c <__sinit+0x14>
 8002a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a18:	f7ff bff0 	b.w	80029fc <__sinit_lock_release>
 8002a1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a20:	6523      	str	r3, [r4, #80]	; 0x50
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <__sinit+0x68>)
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <__sinit+0x6c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a2a:	42a3      	cmp	r3, r4
 8002a2c:	bf08      	it	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	4620      	mov	r0, r4
 8002a32:	bf08      	it	eq
 8002a34:	61a3      	streq	r3, [r4, #24]
 8002a36:	f000 f81f 	bl	8002a78 <__sfp>
 8002a3a:	6060      	str	r0, [r4, #4]
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 f81b 	bl	8002a78 <__sfp>
 8002a42:	60a0      	str	r0, [r4, #8]
 8002a44:	4620      	mov	r0, r4
 8002a46:	f000 f817 	bl	8002a78 <__sfp>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	60e0      	str	r0, [r4, #12]
 8002a50:	6860      	ldr	r0, [r4, #4]
 8002a52:	f7ff ff81 	bl	8002958 <std>
 8002a56:	2201      	movs	r2, #1
 8002a58:	2109      	movs	r1, #9
 8002a5a:	68a0      	ldr	r0, [r4, #8]
 8002a5c:	f7ff ff7c 	bl	8002958 <std>
 8002a60:	2202      	movs	r2, #2
 8002a62:	2112      	movs	r1, #18
 8002a64:	68e0      	ldr	r0, [r4, #12]
 8002a66:	f7ff ff77 	bl	8002958 <std>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61a3      	str	r3, [r4, #24]
 8002a6e:	e7d1      	b.n	8002a14 <__sinit+0xc>
 8002a70:	08003000 	.word	0x08003000
 8002a74:	080029a1 	.word	0x080029a1

08002a78 <__sfp>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	4607      	mov	r7, r0
 8002a7c:	f7ff ffac 	bl	80029d8 <__sfp_lock_acquire>
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <__sfp+0x84>)
 8002a82:	681e      	ldr	r6, [r3, #0]
 8002a84:	69b3      	ldr	r3, [r6, #24]
 8002a86:	b913      	cbnz	r3, 8002a8e <__sfp+0x16>
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f7ff ffbd 	bl	8002a08 <__sinit>
 8002a8e:	3648      	adds	r6, #72	; 0x48
 8002a90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	d503      	bpl.n	8002aa0 <__sfp+0x28>
 8002a98:	6833      	ldr	r3, [r6, #0]
 8002a9a:	b30b      	cbz	r3, 8002ae0 <__sfp+0x68>
 8002a9c:	6836      	ldr	r6, [r6, #0]
 8002a9e:	e7f7      	b.n	8002a90 <__sfp+0x18>
 8002aa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002aa4:	b9d5      	cbnz	r5, 8002adc <__sfp+0x64>
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <__sfp+0x88>)
 8002aa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002aac:	60e3      	str	r3, [r4, #12]
 8002aae:	6665      	str	r5, [r4, #100]	; 0x64
 8002ab0:	f000 f847 	bl	8002b42 <__retarget_lock_init_recursive>
 8002ab4:	f7ff ff96 	bl	80029e4 <__sfp_lock_release>
 8002ab8:	2208      	movs	r2, #8
 8002aba:	4629      	mov	r1, r5
 8002abc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ac4:	6025      	str	r5, [r4, #0]
 8002ac6:	61a5      	str	r5, [r4, #24]
 8002ac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002acc:	f7ff fd48 	bl	8002560 <memset>
 8002ad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ad8:	4620      	mov	r0, r4
 8002ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002adc:	3468      	adds	r4, #104	; 0x68
 8002ade:	e7d9      	b.n	8002a94 <__sfp+0x1c>
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	4638      	mov	r0, r7
 8002ae4:	f7ff ff62 	bl	80029ac <__sfmoreglue>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	6030      	str	r0, [r6, #0]
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d1d5      	bne.n	8002a9c <__sfp+0x24>
 8002af0:	f7ff ff78 	bl	80029e4 <__sfp_lock_release>
 8002af4:	230c      	movs	r3, #12
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	e7ee      	b.n	8002ad8 <__sfp+0x60>
 8002afa:	bf00      	nop
 8002afc:	08003000 	.word	0x08003000
 8002b00:	ffff0001 	.word	0xffff0001

08002b04 <_fwalk_reent>:
 8002b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b08:	4606      	mov	r6, r0
 8002b0a:	4688      	mov	r8, r1
 8002b0c:	2700      	movs	r7, #0
 8002b0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b16:	f1b9 0901 	subs.w	r9, r9, #1
 8002b1a:	d505      	bpl.n	8002b28 <_fwalk_reent+0x24>
 8002b1c:	6824      	ldr	r4, [r4, #0]
 8002b1e:	2c00      	cmp	r4, #0
 8002b20:	d1f7      	bne.n	8002b12 <_fwalk_reent+0xe>
 8002b22:	4638      	mov	r0, r7
 8002b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b28:	89ab      	ldrh	r3, [r5, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d907      	bls.n	8002b3e <_fwalk_reent+0x3a>
 8002b2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b32:	3301      	adds	r3, #1
 8002b34:	d003      	beq.n	8002b3e <_fwalk_reent+0x3a>
 8002b36:	4629      	mov	r1, r5
 8002b38:	4630      	mov	r0, r6
 8002b3a:	47c0      	blx	r8
 8002b3c:	4307      	orrs	r7, r0
 8002b3e:	3568      	adds	r5, #104	; 0x68
 8002b40:	e7e9      	b.n	8002b16 <_fwalk_reent+0x12>

08002b42 <__retarget_lock_init_recursive>:
 8002b42:	4770      	bx	lr

08002b44 <__retarget_lock_acquire_recursive>:
 8002b44:	4770      	bx	lr

08002b46 <__retarget_lock_release_recursive>:
 8002b46:	4770      	bx	lr

08002b48 <__swhatbuf_r>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	460e      	mov	r6, r1
 8002b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b50:	4614      	mov	r4, r2
 8002b52:	2900      	cmp	r1, #0
 8002b54:	461d      	mov	r5, r3
 8002b56:	b096      	sub	sp, #88	; 0x58
 8002b58:	da08      	bge.n	8002b6c <__swhatbuf_r+0x24>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002b60:	602a      	str	r2, [r5, #0]
 8002b62:	061a      	lsls	r2, r3, #24
 8002b64:	d410      	bmi.n	8002b88 <__swhatbuf_r+0x40>
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	e00e      	b.n	8002b8a <__swhatbuf_r+0x42>
 8002b6c:	466a      	mov	r2, sp
 8002b6e:	f000 f9a3 	bl	8002eb8 <_fstat_r>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	dbf1      	blt.n	8002b5a <__swhatbuf_r+0x12>
 8002b76:	9a01      	ldr	r2, [sp, #4]
 8002b78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b80:	425a      	negs	r2, r3
 8002b82:	415a      	adcs	r2, r3
 8002b84:	602a      	str	r2, [r5, #0]
 8002b86:	e7ee      	b.n	8002b66 <__swhatbuf_r+0x1e>
 8002b88:	2340      	movs	r3, #64	; 0x40
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	6023      	str	r3, [r4, #0]
 8002b8e:	b016      	add	sp, #88	; 0x58
 8002b90:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b94 <__smakebuf_r>:
 8002b94:	898b      	ldrh	r3, [r1, #12]
 8002b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b98:	079d      	lsls	r5, r3, #30
 8002b9a:	4606      	mov	r6, r0
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	d507      	bpl.n	8002bb0 <__smakebuf_r+0x1c>
 8002ba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ba4:	6023      	str	r3, [r4, #0]
 8002ba6:	6123      	str	r3, [r4, #16]
 8002ba8:	2301      	movs	r3, #1
 8002baa:	6163      	str	r3, [r4, #20]
 8002bac:	b002      	add	sp, #8
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	466a      	mov	r2, sp
 8002bb2:	ab01      	add	r3, sp, #4
 8002bb4:	f7ff ffc8 	bl	8002b48 <__swhatbuf_r>
 8002bb8:	9900      	ldr	r1, [sp, #0]
 8002bba:	4605      	mov	r5, r0
 8002bbc:	4630      	mov	r0, r6
 8002bbe:	f000 f891 	bl	8002ce4 <_malloc_r>
 8002bc2:	b948      	cbnz	r0, 8002bd8 <__smakebuf_r+0x44>
 8002bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bc8:	059a      	lsls	r2, r3, #22
 8002bca:	d4ef      	bmi.n	8002bac <__smakebuf_r+0x18>
 8002bcc:	f023 0303 	bic.w	r3, r3, #3
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	81a3      	strh	r3, [r4, #12]
 8002bd6:	e7e3      	b.n	8002ba0 <__smakebuf_r+0xc>
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <__smakebuf_r+0x7c>)
 8002bda:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	6020      	str	r0, [r4, #0]
 8002be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	9b00      	ldr	r3, [sp, #0]
 8002be8:	6120      	str	r0, [r4, #16]
 8002bea:	6163      	str	r3, [r4, #20]
 8002bec:	9b01      	ldr	r3, [sp, #4]
 8002bee:	b15b      	cbz	r3, 8002c08 <__smakebuf_r+0x74>
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bf6:	f000 f971 	bl	8002edc <_isatty_r>
 8002bfa:	b128      	cbz	r0, 8002c08 <__smakebuf_r+0x74>
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	f023 0303 	bic.w	r3, r3, #3
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	81a3      	strh	r3, [r4, #12]
 8002c08:	89a0      	ldrh	r0, [r4, #12]
 8002c0a:	4305      	orrs	r5, r0
 8002c0c:	81a5      	strh	r5, [r4, #12]
 8002c0e:	e7cd      	b.n	8002bac <__smakebuf_r+0x18>
 8002c10:	080029a1 	.word	0x080029a1

08002c14 <_free_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4605      	mov	r5, r0
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	d040      	beq.n	8002c9e <_free_r+0x8a>
 8002c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c20:	1f0c      	subs	r4, r1, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bfb8      	it	lt
 8002c26:	18e4      	addlt	r4, r4, r3
 8002c28:	f000 f97a 	bl	8002f20 <__malloc_lock>
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <_free_r+0x8c>)
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	b933      	cbnz	r3, 8002c40 <_free_r+0x2c>
 8002c32:	6063      	str	r3, [r4, #4]
 8002c34:	6014      	str	r4, [r2, #0]
 8002c36:	4628      	mov	r0, r5
 8002c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c3c:	f000 b976 	b.w	8002f2c <__malloc_unlock>
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	d908      	bls.n	8002c56 <_free_r+0x42>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	1821      	adds	r1, r4, r0
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	bf01      	itttt	eq
 8002c4c:	6819      	ldreq	r1, [r3, #0]
 8002c4e:	685b      	ldreq	r3, [r3, #4]
 8002c50:	1809      	addeq	r1, r1, r0
 8002c52:	6021      	streq	r1, [r4, #0]
 8002c54:	e7ed      	b.n	8002c32 <_free_r+0x1e>
 8002c56:	461a      	mov	r2, r3
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b10b      	cbz	r3, 8002c60 <_free_r+0x4c>
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	d9fa      	bls.n	8002c56 <_free_r+0x42>
 8002c60:	6811      	ldr	r1, [r2, #0]
 8002c62:	1850      	adds	r0, r2, r1
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d10b      	bne.n	8002c80 <_free_r+0x6c>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	4401      	add	r1, r0
 8002c6c:	1850      	adds	r0, r2, r1
 8002c6e:	4283      	cmp	r3, r0
 8002c70:	6011      	str	r1, [r2, #0]
 8002c72:	d1e0      	bne.n	8002c36 <_free_r+0x22>
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4401      	add	r1, r0
 8002c7a:	6011      	str	r1, [r2, #0]
 8002c7c:	6053      	str	r3, [r2, #4]
 8002c7e:	e7da      	b.n	8002c36 <_free_r+0x22>
 8002c80:	d902      	bls.n	8002c88 <_free_r+0x74>
 8002c82:	230c      	movs	r3, #12
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	e7d6      	b.n	8002c36 <_free_r+0x22>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	1821      	adds	r1, r4, r0
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	bf01      	itttt	eq
 8002c90:	6819      	ldreq	r1, [r3, #0]
 8002c92:	685b      	ldreq	r3, [r3, #4]
 8002c94:	1809      	addeq	r1, r1, r0
 8002c96:	6021      	streq	r1, [r4, #0]
 8002c98:	6063      	str	r3, [r4, #4]
 8002c9a:	6054      	str	r4, [r2, #4]
 8002c9c:	e7cb      	b.n	8002c36 <_free_r+0x22>
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	20002208 	.word	0x20002208

08002ca4 <sbrk_aligned>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	4e0e      	ldr	r6, [pc, #56]	; (8002ce0 <sbrk_aligned+0x3c>)
 8002ca8:	460c      	mov	r4, r1
 8002caa:	6831      	ldr	r1, [r6, #0]
 8002cac:	4605      	mov	r5, r0
 8002cae:	b911      	cbnz	r1, 8002cb6 <sbrk_aligned+0x12>
 8002cb0:	f000 f88c 	bl	8002dcc <_sbrk_r>
 8002cb4:	6030      	str	r0, [r6, #0]
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 f887 	bl	8002dcc <_sbrk_r>
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	d00a      	beq.n	8002cd8 <sbrk_aligned+0x34>
 8002cc2:	1cc4      	adds	r4, r0, #3
 8002cc4:	f024 0403 	bic.w	r4, r4, #3
 8002cc8:	42a0      	cmp	r0, r4
 8002cca:	d007      	beq.n	8002cdc <sbrk_aligned+0x38>
 8002ccc:	1a21      	subs	r1, r4, r0
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f000 f87c 	bl	8002dcc <_sbrk_r>
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	d101      	bne.n	8002cdc <sbrk_aligned+0x38>
 8002cd8:	f04f 34ff 	mov.w	r4, #4294967295
 8002cdc:	4620      	mov	r0, r4
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	2000220c 	.word	0x2000220c

08002ce4 <_malloc_r>:
 8002ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce8:	1ccd      	adds	r5, r1, #3
 8002cea:	f025 0503 	bic.w	r5, r5, #3
 8002cee:	3508      	adds	r5, #8
 8002cf0:	2d0c      	cmp	r5, #12
 8002cf2:	bf38      	it	cc
 8002cf4:	250c      	movcc	r5, #12
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	4607      	mov	r7, r0
 8002cfa:	db01      	blt.n	8002d00 <_malloc_r+0x1c>
 8002cfc:	42a9      	cmp	r1, r5
 8002cfe:	d905      	bls.n	8002d0c <_malloc_r+0x28>
 8002d00:	230c      	movs	r3, #12
 8002d02:	2600      	movs	r6, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4630      	mov	r0, r6
 8002d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d0c:	4e2e      	ldr	r6, [pc, #184]	; (8002dc8 <_malloc_r+0xe4>)
 8002d0e:	f000 f907 	bl	8002f20 <__malloc_lock>
 8002d12:	6833      	ldr	r3, [r6, #0]
 8002d14:	461c      	mov	r4, r3
 8002d16:	bb34      	cbnz	r4, 8002d66 <_malloc_r+0x82>
 8002d18:	4629      	mov	r1, r5
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	f7ff ffc2 	bl	8002ca4 <sbrk_aligned>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	4604      	mov	r4, r0
 8002d24:	d14d      	bne.n	8002dc2 <_malloc_r+0xde>
 8002d26:	6834      	ldr	r4, [r6, #0]
 8002d28:	4626      	mov	r6, r4
 8002d2a:	2e00      	cmp	r6, #0
 8002d2c:	d140      	bne.n	8002db0 <_malloc_r+0xcc>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	4631      	mov	r1, r6
 8002d32:	4638      	mov	r0, r7
 8002d34:	eb04 0803 	add.w	r8, r4, r3
 8002d38:	f000 f848 	bl	8002dcc <_sbrk_r>
 8002d3c:	4580      	cmp	r8, r0
 8002d3e:	d13a      	bne.n	8002db6 <_malloc_r+0xd2>
 8002d40:	6821      	ldr	r1, [r4, #0]
 8002d42:	3503      	adds	r5, #3
 8002d44:	1a6d      	subs	r5, r5, r1
 8002d46:	f025 0503 	bic.w	r5, r5, #3
 8002d4a:	3508      	adds	r5, #8
 8002d4c:	2d0c      	cmp	r5, #12
 8002d4e:	bf38      	it	cc
 8002d50:	250c      	movcc	r5, #12
 8002d52:	4638      	mov	r0, r7
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7ff ffa5 	bl	8002ca4 <sbrk_aligned>
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d02b      	beq.n	8002db6 <_malloc_r+0xd2>
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	442b      	add	r3, r5
 8002d62:	6023      	str	r3, [r4, #0]
 8002d64:	e00e      	b.n	8002d84 <_malloc_r+0xa0>
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	1b52      	subs	r2, r2, r5
 8002d6a:	d41e      	bmi.n	8002daa <_malloc_r+0xc6>
 8002d6c:	2a0b      	cmp	r2, #11
 8002d6e:	d916      	bls.n	8002d9e <_malloc_r+0xba>
 8002d70:	1961      	adds	r1, r4, r5
 8002d72:	42a3      	cmp	r3, r4
 8002d74:	6025      	str	r5, [r4, #0]
 8002d76:	bf18      	it	ne
 8002d78:	6059      	strne	r1, [r3, #4]
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	bf08      	it	eq
 8002d7e:	6031      	streq	r1, [r6, #0]
 8002d80:	5162      	str	r2, [r4, r5]
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	4638      	mov	r0, r7
 8002d86:	f104 060b 	add.w	r6, r4, #11
 8002d8a:	f000 f8cf 	bl	8002f2c <__malloc_unlock>
 8002d8e:	f026 0607 	bic.w	r6, r6, #7
 8002d92:	1d23      	adds	r3, r4, #4
 8002d94:	1af2      	subs	r2, r6, r3
 8002d96:	d0b6      	beq.n	8002d06 <_malloc_r+0x22>
 8002d98:	1b9b      	subs	r3, r3, r6
 8002d9a:	50a3      	str	r3, [r4, r2]
 8002d9c:	e7b3      	b.n	8002d06 <_malloc_r+0x22>
 8002d9e:	6862      	ldr	r2, [r4, #4]
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	bf0c      	ite	eq
 8002da4:	6032      	streq	r2, [r6, #0]
 8002da6:	605a      	strne	r2, [r3, #4]
 8002da8:	e7ec      	b.n	8002d84 <_malloc_r+0xa0>
 8002daa:	4623      	mov	r3, r4
 8002dac:	6864      	ldr	r4, [r4, #4]
 8002dae:	e7b2      	b.n	8002d16 <_malloc_r+0x32>
 8002db0:	4634      	mov	r4, r6
 8002db2:	6876      	ldr	r6, [r6, #4]
 8002db4:	e7b9      	b.n	8002d2a <_malloc_r+0x46>
 8002db6:	230c      	movs	r3, #12
 8002db8:	4638      	mov	r0, r7
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	f000 f8b6 	bl	8002f2c <__malloc_unlock>
 8002dc0:	e7a1      	b.n	8002d06 <_malloc_r+0x22>
 8002dc2:	6025      	str	r5, [r4, #0]
 8002dc4:	e7de      	b.n	8002d84 <_malloc_r+0xa0>
 8002dc6:	bf00      	nop
 8002dc8:	20002208 	.word	0x20002208

08002dcc <_sbrk_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	2300      	movs	r3, #0
 8002dd0:	4d05      	ldr	r5, [pc, #20]	; (8002de8 <_sbrk_r+0x1c>)
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	602b      	str	r3, [r5, #0]
 8002dd8:	f000 f8c0 	bl	8002f5c <_sbrk>
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d102      	bne.n	8002de6 <_sbrk_r+0x1a>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	b103      	cbz	r3, 8002de6 <_sbrk_r+0x1a>
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
 8002de8:	20002210 	.word	0x20002210

08002dec <__sread>:
 8002dec:	b510      	push	{r4, lr}
 8002dee:	460c      	mov	r4, r1
 8002df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df4:	f000 f8a0 	bl	8002f38 <_read_r>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	bfab      	itete	ge
 8002dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8002e00:	181b      	addge	r3, r3, r0
 8002e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e06:	bfac      	ite	ge
 8002e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e0a:	81a3      	strhlt	r3, [r4, #12]
 8002e0c:	bd10      	pop	{r4, pc}

08002e0e <__swrite>:
 8002e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e12:	461f      	mov	r7, r3
 8002e14:	898b      	ldrh	r3, [r1, #12]
 8002e16:	4605      	mov	r5, r0
 8002e18:	05db      	lsls	r3, r3, #23
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4616      	mov	r6, r2
 8002e1e:	d505      	bpl.n	8002e2c <__swrite+0x1e>
 8002e20:	2302      	movs	r3, #2
 8002e22:	2200      	movs	r2, #0
 8002e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e28:	f000 f868 	bl	8002efc <_lseek_r>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	4632      	mov	r2, r6
 8002e30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e34:	81a3      	strh	r3, [r4, #12]
 8002e36:	4628      	mov	r0, r5
 8002e38:	463b      	mov	r3, r7
 8002e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e42:	f000 b817 	b.w	8002e74 <_write_r>

08002e46 <__sseek>:
 8002e46:	b510      	push	{r4, lr}
 8002e48:	460c      	mov	r4, r1
 8002e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e4e:	f000 f855 	bl	8002efc <_lseek_r>
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	bf15      	itete	ne
 8002e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e62:	81a3      	strheq	r3, [r4, #12]
 8002e64:	bf18      	it	ne
 8002e66:	81a3      	strhne	r3, [r4, #12]
 8002e68:	bd10      	pop	{r4, pc}

08002e6a <__sclose>:
 8002e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e6e:	f000 b813 	b.w	8002e98 <_close_r>
	...

08002e74 <_write_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4d05      	ldr	r5, [pc, #20]	; (8002e94 <_write_r+0x20>)
 8002e80:	602a      	str	r2, [r5, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7fd fb4d 	bl	8000522 <_write>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d102      	bne.n	8002e92 <_write_r+0x1e>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	b103      	cbz	r3, 8002e92 <_write_r+0x1e>
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
 8002e94:	20002210 	.word	0x20002210

08002e98 <_close_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	4d05      	ldr	r5, [pc, #20]	; (8002eb4 <_close_r+0x1c>)
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	f7fd fb59 	bl	800055a <_close>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_close_r+0x1a>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_close_r+0x1a>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	20002210 	.word	0x20002210

08002eb8 <_fstat_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4d06      	ldr	r5, [pc, #24]	; (8002ed8 <_fstat_r+0x20>)
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	f7fd fb53 	bl	8000570 <_fstat>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d102      	bne.n	8002ed4 <_fstat_r+0x1c>
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	b103      	cbz	r3, 8002ed4 <_fstat_r+0x1c>
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	bd38      	pop	{r3, r4, r5, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20002210 	.word	0x20002210

08002edc <_isatty_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	2300      	movs	r3, #0
 8002ee0:	4d05      	ldr	r5, [pc, #20]	; (8002ef8 <_isatty_r+0x1c>)
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	f7fd fb51 	bl	800058e <_isatty>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d102      	bne.n	8002ef6 <_isatty_r+0x1a>
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	b103      	cbz	r3, 8002ef6 <_isatty_r+0x1a>
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	20002210 	.word	0x20002210

08002efc <_lseek_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4604      	mov	r4, r0
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	4d05      	ldr	r5, [pc, #20]	; (8002f1c <_lseek_r+0x20>)
 8002f08:	602a      	str	r2, [r5, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f7fd fb49 	bl	80005a2 <_lseek>
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	d102      	bne.n	8002f1a <_lseek_r+0x1e>
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	b103      	cbz	r3, 8002f1a <_lseek_r+0x1e>
 8002f18:	6023      	str	r3, [r4, #0]
 8002f1a:	bd38      	pop	{r3, r4, r5, pc}
 8002f1c:	20002210 	.word	0x20002210

08002f20 <__malloc_lock>:
 8002f20:	4801      	ldr	r0, [pc, #4]	; (8002f28 <__malloc_lock+0x8>)
 8002f22:	f7ff be0f 	b.w	8002b44 <__retarget_lock_acquire_recursive>
 8002f26:	bf00      	nop
 8002f28:	20002204 	.word	0x20002204

08002f2c <__malloc_unlock>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <__malloc_unlock+0x8>)
 8002f2e:	f7ff be0a 	b.w	8002b46 <__retarget_lock_release_recursive>
 8002f32:	bf00      	nop
 8002f34:	20002204 	.word	0x20002204

08002f38 <_read_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	2200      	movs	r2, #0
 8002f42:	4d05      	ldr	r5, [pc, #20]	; (8002f58 <_read_r+0x20>)
 8002f44:	602a      	str	r2, [r5, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7fd face 	bl	80004e8 <_read>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_read_r+0x1e>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_read_r+0x1e>
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	20002210 	.word	0x20002210

08002f5c <_sbrk>:
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <_sbrk+0x14>)
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6811      	ldr	r1, [r2, #0]
 8002f62:	b909      	cbnz	r1, 8002f68 <_sbrk+0xc>
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <_sbrk+0x18>)
 8002f66:	6011      	str	r1, [r2, #0]
 8002f68:	6810      	ldr	r0, [r2, #0]
 8002f6a:	4403      	add	r3, r0
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4770      	bx	lr
 8002f70:	20002214 	.word	0x20002214
 8002f74:	20002218 	.word	0x20002218

08002f78 <_init>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr

08002f84 <_fini>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr
