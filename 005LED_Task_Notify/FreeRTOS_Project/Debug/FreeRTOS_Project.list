
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dcc  08005dcc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005dcc  08005dcc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dcc  08005dcc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003420  2000001c  08005df0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000343c  08005df0  0002343c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010768  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a32  00000000  00000000  000307ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000331e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  000342b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001699a  00000000  00000000  00035218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011559  00000000  00000000  0004bbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cebe  00000000  00000000  0005d10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  000da01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c10 	.word	0x08005c10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08005c10 	.word	0x08005c10

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20001e68 	.word	0x20001e68

080001dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b088      	sub	sp, #32
 80001e0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001e2:	f000 fb6d 	bl	80008c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001e6:	f000 f89d 	bl	8000324 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	SEGGER_UART_init(230400);
 80001ea:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80001ee:	f003 fb1b 	bl	8003828 <SEGGER_UART_init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f2:	f000 f8dd 	bl	80003b0 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	SCB_DEMCR  |= (1<<24);
 80001f6:	4b3c      	ldr	r3, [pc, #240]	; (80002e8 <main+0x10c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a3b      	ldr	r2, [pc, #236]	; (80002e8 <main+0x10c>)
 80001fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000200:	6013      	str	r3, [r2, #0]
	DWT_CONTROL|= (1<<0);
 8000202:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <main+0x110>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a39      	ldr	r2, [pc, #228]	; (80002ec <main+0x110>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800020e:	f003 f937 	bl	8003480 <SEGGER_SYSVIEW_Conf>

	status = xTaskCreate(led_blue_handler, "LED_Blue_Handler", 200, NULL, 1, &task1_handle);
 8000212:	4b37      	ldr	r3, [pc, #220]	; (80002f0 <main+0x114>)
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2301      	movs	r3, #1
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2300      	movs	r3, #0
 800021c:	22c8      	movs	r2, #200	; 0xc8
 800021e:	4935      	ldr	r1, [pc, #212]	; (80002f4 <main+0x118>)
 8000220:	4835      	ldr	r0, [pc, #212]	; (80002f8 <main+0x11c>)
 8000222:	f001 fd08 	bl	8001c36 <xTaskCreate>
 8000226:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d00a      	beq.n	8000244 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800022e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000232:	f383 8811 	msr	BASEPRI, r3
 8000236:	f3bf 8f6f 	isb	sy
 800023a:	f3bf 8f4f 	dsb	sy
 800023e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000240:	bf00      	nop
 8000242:	e7fe      	b.n	8000242 <main+0x66>
	status = xTaskCreate(led_green_handler, "LED_Green_Handler", 200, NULL, 2, &task2_handle);
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <main+0x120>)
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	2302      	movs	r3, #2
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2300      	movs	r3, #0
 800024e:	22c8      	movs	r2, #200	; 0xc8
 8000250:	492b      	ldr	r1, [pc, #172]	; (8000300 <main+0x124>)
 8000252:	482c      	ldr	r0, [pc, #176]	; (8000304 <main+0x128>)
 8000254:	f001 fcef 	bl	8001c36 <xTaskCreate>
 8000258:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d00a      	beq.n	8000276 <main+0x9a>
        __asm volatile
 8000260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000264:	f383 8811 	msr	BASEPRI, r3
 8000268:	f3bf 8f6f 	isb	sy
 800026c:	f3bf 8f4f 	dsb	sy
 8000270:	60fb      	str	r3, [r7, #12]
    }
 8000272:	bf00      	nop
 8000274:	e7fe      	b.n	8000274 <main+0x98>
	status = xTaskCreate(led_red_handler, "LED_Red_Handler", 200, NULL, 3, &task3_handle);
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <main+0x12c>)
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2303      	movs	r3, #3
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2300      	movs	r3, #0
 8000280:	22c8      	movs	r2, #200	; 0xc8
 8000282:	4922      	ldr	r1, [pc, #136]	; (800030c <main+0x130>)
 8000284:	4822      	ldr	r0, [pc, #136]	; (8000310 <main+0x134>)
 8000286:	f001 fcd6 	bl	8001c36 <xTaskCreate>
 800028a:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d00a      	beq.n	80002a8 <main+0xcc>
        __asm volatile
 8000292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000296:	f383 8811 	msr	BASEPRI, r3
 800029a:	f3bf 8f6f 	isb	sy
 800029e:	f3bf 8f4f 	dsb	sy
 80002a2:	60bb      	str	r3, [r7, #8]
    }
 80002a4:	bf00      	nop
 80002a6:	e7fe      	b.n	80002a6 <main+0xca>
	status = xTaskCreate(button_handler, "button_Handler", 200, NULL, 4, &task4_handle);
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <main+0x138>)
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	2304      	movs	r3, #4
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2300      	movs	r3, #0
 80002b2:	22c8      	movs	r2, #200	; 0xc8
 80002b4:	4918      	ldr	r1, [pc, #96]	; (8000318 <main+0x13c>)
 80002b6:	4819      	ldr	r0, [pc, #100]	; (800031c <main+0x140>)
 80002b8:	f001 fcbd 	bl	8001c36 <xTaskCreate>
 80002bc:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d00a      	beq.n	80002da <main+0xfe>
        __asm volatile
 80002c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002c8:	f383 8811 	msr	BASEPRI, r3
 80002cc:	f3bf 8f6f 	isb	sy
 80002d0:	f3bf 8f4f 	dsb	sy
 80002d4:	607b      	str	r3, [r7, #4]
    }
 80002d6:	bf00      	nop
 80002d8:	e7fe      	b.n	80002d8 <main+0xfc>
	nexttask=task1_handle;
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <main+0x114>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a10      	ldr	r2, [pc, #64]	; (8000320 <main+0x144>)
 80002e0:	6013      	str	r3, [r2, #0]
	vTaskStartScheduler();
 80002e2:	f001 ff8b 	bl	80021fc <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80002e6:	e7fe      	b.n	80002e6 <main+0x10a>
 80002e8:	e000edfc 	.word	0xe000edfc
 80002ec:	e0001000 	.word	0xe0001000
 80002f0:	2000003c 	.word	0x2000003c
 80002f4:	08005c28 	.word	0x08005c28
 80002f8:	0800050d 	.word	0x0800050d
 80002fc:	20000040 	.word	0x20000040
 8000300:	08005c3c 	.word	0x08005c3c
 8000304:	08000581 	.word	0x08000581
 8000308:	20000044 	.word	0x20000044
 800030c:	08005c50 	.word	0x08005c50
 8000310:	080005f5 	.word	0x080005f5
 8000314:	20000048 	.word	0x20000048
 8000318:	08005c60 	.word	0x08005c60
 800031c:	08000475 	.word	0x08000475
 8000320:	20000038 	.word	0x20000038

08000324 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b090      	sub	sp, #64	; 0x40
 8000328:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f005 fc64 	bl	8005c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000346:	2301      	movs	r3, #1
 8000348:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	2301      	movs	r3, #1
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	2302      	movs	r3, #2
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000360:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000362:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 0318 	add.w	r3, r7, #24
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fd85 	bl	8000e7c <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000378:	f000 f983 	bl	8000682 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	230f      	movs	r3, #15
 800037e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000380:	2302      	movs	r3, #2
 8000382:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2102      	movs	r1, #2
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fff2 	bl	8001380 <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80003a2:	f000 f96e 	bl	8000682 <Error_Handler>
	}
}
 80003a6:	bf00      	nop
 80003a8:	3740      	adds	r7, #64	; 0x40
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <MX_GPIO_Init+0xbc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a28      	ldr	r2, [pc, #160]	; (800046c <MX_GPIO_Init+0xbc>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <MX_GPIO_Init+0xbc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0320 	and.w	r3, r3, #32
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b23      	ldr	r3, [pc, #140]	; (800046c <MX_GPIO_Init+0xbc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a22      	ldr	r2, [pc, #136]	; (800046c <MX_GPIO_Init+0xbc>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <MX_GPIO_Init+0xbc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	21e0      	movs	r1, #224	; 0xe0
 80003f8:	481d      	ldr	r0, [pc, #116]	; (8000470 <MX_GPIO_Init+0xc0>)
 80003fa:	f000 fd0e 	bl	8000e1a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003fe:	2304      	movs	r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000402:	2302      	movs	r3, #2
 8000404:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000406:	2303      	movs	r3, #3
 8000408:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	4619      	mov	r1, r3
 8000410:	4817      	ldr	r0, [pc, #92]	; (8000470 <MX_GPIO_Init+0xc0>)
 8000412:	f000 fb67 	bl	8000ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000416:	2308      	movs	r3, #8
 8000418:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	4811      	ldr	r0, [pc, #68]	; (8000470 <MX_GPIO_Init+0xc0>)
 800042a:	f000 fb5b 	bl	8000ae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800042e:	23e0      	movs	r3, #224	; 0xe0
 8000430:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000436:	2302      	movs	r3, #2
 8000438:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	4619      	mov	r1, r3
 8000444:	480a      	ldr	r0, [pc, #40]	; (8000470 <MX_GPIO_Init+0xc0>)
 8000446:	f000 fb4d 	bl	8000ae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000454:	2302      	movs	r3, #2
 8000456:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4619      	mov	r1, r3
 800045e:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_GPIO_Init+0xc0>)
 8000460:	f000 fb40 	bl	8000ae4 <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800

08000474 <button_handler>:

/* USER CODE BEGIN 4 */
static void button_handler(void * parameters){
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af02      	add	r7, sp, #8
 800047a:	6078      	str	r0, [r7, #4]
	uint8_t cur_state=0;
 800047c:	2300      	movs	r3, #0
 800047e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_state=0;
 8000480:	2300      	movs	r3, #0
 8000482:	73fb      	strb	r3, [r7, #15]
	while(1){
		cur_state=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000488:	481a      	ldr	r0, [pc, #104]	; (80004f4 <button_handler+0x80>)
 800048a:	f000 fcaf 	bl	8000dec <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	73bb      	strb	r3, [r7, #14]
		if(cur_state){
 8000492:	7bbb      	ldrb	r3, [r7, #14]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d026      	beq.n	80004e6 <button_handler+0x72>
			if(!prev_state){
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d123      	bne.n	80004e6 <button_handler+0x72>
				if(nexttask!=NULL){
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <button_handler+0x84>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d009      	beq.n	80004ba <button_handler+0x46>
					xTaskNotify(nexttask,0,eNoAction);
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <button_handler+0x84>)
 80004a8:	6818      	ldr	r0, [r3, #0]
 80004aa:	2300      	movs	r3, #0
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2300      	movs	r3, #0
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	f002 fa1c 	bl	80028f0 <xTaskGenericNotify>
 80004b8:	e015      	b.n	80004e6 <button_handler+0x72>
				}
				else{
					vTaskResume(task1_handle);
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <button_handler+0x88>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fe32 	bl	8002128 <vTaskResume>
					vTaskResume(task2_handle);
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <button_handler+0x8c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fe2d 	bl	8002128 <vTaskResume>
					vTaskResume(task3_handle);
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <button_handler+0x90>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fe28 	bl	8002128 <vTaskResume>
					nexttask=task1_handle;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <button_handler+0x88>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <button_handler+0x84>)
 80004de:	6013      	str	r3, [r2, #0]
					SEGGER_SYSVIEW_PrintfTarget("resume all");
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <button_handler+0x94>)
 80004e2:	f005 faad 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>

				}
			}
		}
		prev_state=cur_state;
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80004ea:	200a      	movs	r0, #10
 80004ec:	f001 fd06 	bl	8001efc <vTaskDelay>
		cur_state=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80004f0:	e7c8      	b.n	8000484 <button_handler+0x10>
 80004f2:	bf00      	nop
 80004f4:	40010800 	.word	0x40010800
 80004f8:	20000038 	.word	0x20000038
 80004fc:	2000003c 	.word	0x2000003c
 8000500:	20000040 	.word	0x20000040
 8000504:	20000044 	.word	0x20000044
 8000508:	08005c70 	.word	0x08005c70

0800050c <led_blue_handler>:
	}
}
static void led_blue_handler(void * parameters){
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
 8000512:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("blue");
 8000514:	4814      	ldr	r0, [pc, #80]	; (8000568 <led_blue_handler+0x5c>)
 8000516:	f005 fa93 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800051a:	2120      	movs	r1, #32
 800051c:	4813      	ldr	r0, [pc, #76]	; (800056c <led_blue_handler+0x60>)
 800051e:	f000 fc94 	bl	8000e4a <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2300      	movs	r3, #0
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f002 f956 	bl	80027e0 <xTaskGenericNotifyWait>
 8000534:	60f8      	str	r0, [r7, #12]
		if(status== pdTRUE){
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d1eb      	bne.n	8000514 <led_blue_handler+0x8>
			SEGGER_SYSVIEW_PrintfTarget("delete blue");
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <led_blue_handler+0x64>)
 800053e:	f005 fa7f 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2120      	movs	r1, #32
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <led_blue_handler+0x60>)
 8000548:	f000 fc67 	bl	8000e1a <HAL_GPIO_WritePin>
			vTaskSuspendAll();
 800054c:	f001 feb2 	bl	80022b4 <vTaskSuspendAll>
			nexttask=task2_handle;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <led_blue_handler+0x68>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <led_blue_handler+0x6c>)
 8000556:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000558:	f001 feba 	bl	80022d0 <xTaskResumeAll>
			vTaskSuspend(task1_handle);
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <led_blue_handler+0x70>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fd03 	bl	8001f6c <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("blue");
 8000566:	e7d5      	b.n	8000514 <led_blue_handler+0x8>
 8000568:	08005c7c 	.word	0x08005c7c
 800056c:	40010800 	.word	0x40010800
 8000570:	08005c84 	.word	0x08005c84
 8000574:	20000040 	.word	0x20000040
 8000578:	20000038 	.word	0x20000038
 800057c:	2000003c 	.word	0x2000003c

08000580 <led_green_handler>:
		}
	}
}
static void led_green_handler(void * parameters){
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("green");
 8000588:	4814      	ldr	r0, [pc, #80]	; (80005dc <led_green_handler+0x5c>)
 800058a:	f005 fa59 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <led_green_handler+0x60>)
 8000592:	f000 fc5a 	bl	8000e4a <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000596:	f44f 7348 	mov.w	r3, #800	; 0x320
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f002 f91c 	bl	80027e0 <xTaskGenericNotifyWait>
 80005a8:	60f8      	str	r0, [r7, #12]
		if(status== pdTRUE){
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d1eb      	bne.n	8000588 <led_green_handler+0x8>
			SEGGER_SYSVIEW_PrintfTarget("delete green");
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <led_green_handler+0x64>)
 80005b2:	f005 fa45 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <led_green_handler+0x60>)
 80005bc:	f000 fc2d 	bl	8000e1a <HAL_GPIO_WritePin>
			vTaskSuspendAll();
 80005c0:	f001 fe78 	bl	80022b4 <vTaskSuspendAll>
			nexttask=task3_handle;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <led_green_handler+0x68>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <led_green_handler+0x6c>)
 80005ca:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80005cc:	f001 fe80 	bl	80022d0 <xTaskResumeAll>
			vTaskSuspend(task2_handle);
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <led_green_handler+0x70>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fcc9 	bl	8001f6c <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("green");
 80005da:	e7d5      	b.n	8000588 <led_green_handler+0x8>
 80005dc:	08005c90 	.word	0x08005c90
 80005e0:	40010800 	.word	0x40010800
 80005e4:	08005c98 	.word	0x08005c98
 80005e8:	20000044 	.word	0x20000044
 80005ec:	20000038 	.word	0x20000038
 80005f0:	20000040 	.word	0x20000040

080005f4 <led_red_handler>:
		}
	}
}
static void led_red_handler(void * parameters){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("red");
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <led_red_handler+0x5c>)
 80005fe:	f005 fa1f 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <led_red_handler+0x60>)
 8000606:	f000 fc20 	bl	8000e4a <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 800060a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f002 f8e2 	bl	80027e0 <xTaskGenericNotifyWait>
 800061c:	60f8      	str	r0, [r7, #12]
		if(status== pdTRUE){
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d1eb      	bne.n	80005fc <led_red_handler+0x8>
			SEGGER_SYSVIEW_PrintfTarget("delete red");
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <led_red_handler+0x64>)
 8000626:	f005 fa0b 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <led_red_handler+0x60>)
 8000630:	f000 fbf3 	bl	8000e1a <HAL_GPIO_WritePin>
			vTaskSuspendAll();
 8000634:	f001 fe3e 	bl	80022b4 <vTaskSuspendAll>
			nexttask=NULL;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <led_red_handler+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 800063e:	f001 fe47 	bl	80022d0 <xTaskResumeAll>
			vTaskSuspend(task3_handle);
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <led_red_handler+0x6c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fc90 	bl	8001f6c <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("red");
 800064c:	e7d6      	b.n	80005fc <led_red_handler+0x8>
 800064e:	bf00      	nop
 8000650:	08005ca8 	.word	0x08005ca8
 8000654:	40010800 	.word	0x40010800
 8000658:	08005cac 	.word	0x08005cac
 800065c:	20000038 	.word	0x20000038
 8000660:	20000044 	.word	0x20000044

08000664 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000674:	d101      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000676:	f000 f939 	bl	80008ec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000686:	b672      	cpsid	i
}
 8000688:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800068a:	e7fe      	b.n	800068a <Error_Handler+0x8>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x44>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_MspInit+0x44>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_MspInit+0x44>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x44>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x44>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80006c2:	f002 fb75 	bl	8002db0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <HAL_InitTick+0xe8>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a33      	ldr	r2, [pc, #204]	; (80007bc <HAL_InitTick+0xe8>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <HAL_InitTick+0xe8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000702:	f107 0210 	add.w	r2, r7, #16
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ff9d 	bl	800164c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800071c:	f000 ff82 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8000720:	6378      	str	r0, [r7, #52]	; 0x34
 8000722:	e004      	b.n	800072e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000724:	f000 ff7e 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8000728:	4603      	mov	r3, r0
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800072e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000730:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <HAL_InitTick+0xec>)
 8000732:	fba2 2303 	umull	r2, r3, r2, r3
 8000736:	0c9b      	lsrs	r3, r3, #18
 8000738:	3b01      	subs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <HAL_InitTick+0xf0>)
 800073e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000742:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <HAL_InitTick+0xf0>)
 8000746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800074a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800074c:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <HAL_InitTick+0xf0>)
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <HAL_InitTick+0xf0>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <HAL_InitTick+0xf0>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <HAL_InitTick+0xf0>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000764:	4817      	ldr	r0, [pc, #92]	; (80007c4 <HAL_InitTick+0xf0>)
 8000766:	f000 ffbf 	bl	80016e8 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000774:	2b00      	cmp	r3, #0
 8000776:	d11b      	bne.n	80007b0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <HAL_InitTick+0xf0>)
 800077a:	f000 ffe9 	bl	8001750 <HAL_TIM_Base_Start_IT>
 800077e:	4603      	mov	r3, r0
 8000780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000788:	2b00      	cmp	r3, #0
 800078a:	d111      	bne.n	80007b0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800078c:	201c      	movs	r0, #28
 800078e:	f000 f99a 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d808      	bhi.n	80007aa <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	201c      	movs	r0, #28
 800079e:	f000 f976 	bl	8000a8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <HAL_InitTick+0xf4>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	e002      	b.n	80007b0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3738      	adds	r7, #56	; 0x38
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	431bde83 	.word	0x431bde83
 80007c4:	2000004c 	.word	0x2000004c
 80007c8:	20000004 	.word	0x20000004

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
	...

080007f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <TIM2_IRQHandler+0x10>)
 80007fe:	f000 ffca 	bl	8001796 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000004c 	.word	0x2000004c

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <SystemInit+0x5c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <SystemInit+0x5c>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <SystemInit+0x5c>)
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	4911      	ldr	r1, [pc, #68]	; (8000868 <SystemInit+0x5c>)
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <SystemInit+0x60>)
 8000824:	4013      	ands	r3, r2
 8000826:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <SystemInit+0x5c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <SystemInit+0x5c>)
 800082e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000836:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <SystemInit+0x5c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SystemInit+0x5c>)
 800083e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000842:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <SystemInit+0x5c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <SystemInit+0x5c>)
 800084a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800084e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SystemInit+0x5c>)
 8000852:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000856:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SystemInit+0x64>)
 800085a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000
 800086c:	f8ff0000 	.word	0xf8ff0000
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000874:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000876:	e003      	b.n	8000880 <LoopCopyDataInit>

08000878 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800087a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800087c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800087e:	3104      	adds	r1, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000884:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000886:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000888:	d3f6      	bcc.n	8000878 <CopyDataInit>
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800088c:	e002      	b.n	8000894 <LoopFillZerobss>

0800088e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000890:	f842 3b04 	str.w	r3, [r2], #4

08000894 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000896:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000898:	d3f9      	bcc.n	800088e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800089a:	f7ff ffb7 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089e:	f005 f96d 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a2:	f7ff fc9b 	bl	80001dc <main>
  bx lr
 80008a6:	4770      	bx	lr
  ldr r3, =_sidata
 80008a8:	08005dd4 	.word	0x08005dd4
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008b0:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80008b4:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80008b8:	2000343c 	.word	0x2000343c

080008bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC1_2_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_Init+0x28>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x28>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f8d1 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	200f      	movs	r0, #15
 80008d8:	f7ff fefc 	bl	80006d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff fed6 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000008 	.word	0x20000008
 800090c:	2000008c 	.word	0x2000008c

08000910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	2000008c 	.word	0x2000008c

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4906      	ldr	r1, [pc, #24]	; (80009bc <__NVIC_EnableIRQ+0x34>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff4f 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff64 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ffb2 	bl	8000a14 <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff81 	bl	80009c0 <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff57 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e169      	b.n	8000dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af8:	2201      	movs	r2, #1
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8158 	bne.w	8000dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a9a      	ldr	r2, [pc, #616]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d05e      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b20:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d875      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b26:	4a98      	ldr	r2, [pc, #608]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d058      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b2c:	4a96      	ldr	r2, [pc, #600]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d86f      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b32:	4a96      	ldr	r2, [pc, #600]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d052      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b38:	4a94      	ldr	r2, [pc, #592]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d869      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04c      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b44:	4a92      	ldr	r2, [pc, #584]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d863      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d046      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b50:	4a90      	ldr	r2, [pc, #576]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d85d      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d82a      	bhi.n	8000bb0 <HAL_GPIO_Init+0xcc>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d859      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <HAL_GPIO_Init+0x80>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000bdf 	.word	0x08000bdf
 8000b68:	08000bb9 	.word	0x08000bb9
 8000b6c:	08000bcb 	.word	0x08000bcb
 8000b70:	08000c0d 	.word	0x08000c0d
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000c13 	.word	0x08000c13
 8000b7c:	08000c13 	.word	0x08000c13
 8000b80:	08000c13 	.word	0x08000c13
 8000b84:	08000c13 	.word	0x08000c13
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000c13 	.word	0x08000c13
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c13 	.word	0x08000c13
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000c13 	.word	0x08000c13
 8000ba0:	08000c13 	.word	0x08000c13
 8000ba4:	08000c13 	.word	0x08000c13
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	4a79      	ldr	r2, [pc, #484]	; (8000d98 <HAL_GPIO_Init+0x2b4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb6:	e02c      	b.n	8000c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e029      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e024      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	3308      	adds	r3, #8
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e01f      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	330c      	adds	r3, #12
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e01a      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be6:	2304      	movs	r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e013      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	611a      	str	r2, [r3, #16]
          break;
 8000bfe:	e009      	b.n	8000c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	615a      	str	r2, [r3, #20]
          break;
 8000c0a:	e003      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          break;
 8000c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	d801      	bhi.n	8000c1e <HAL_GPIO_Init+0x13a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e001      	b.n	8000c22 <HAL_GPIO_Init+0x13e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	d802      	bhi.n	8000c30 <HAL_GPIO_Init+0x14c>
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x152>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3b08      	subs	r3, #8
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	6a39      	ldr	r1, [r7, #32]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c7c:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_GPIO_Init+0x2c0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d013      	beq.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a3f      	ldr	r2, [pc, #252]	; (8000da8 <HAL_GPIO_Init+0x2c4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d00d      	beq.n	8000ccc <HAL_GPIO_Init+0x1e8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3d      	ldr	r2, [pc, #244]	; (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d101      	bne.n	8000cc4 <HAL_GPIO_Init+0x1e0>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce2:	492f      	ldr	r1, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	492c      	ldr	r1, [pc, #176]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4928      	ldr	r1, [pc, #160]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4922      	ldr	r1, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	491e      	ldr	r1, [pc, #120]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	4918      	ldr	r1, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	608b      	str	r3, [r1, #8]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4914      	ldr	r1, [pc, #80]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d021      	beq.n	8000db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	490e      	ldr	r1, [pc, #56]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60cb      	str	r3, [r1, #12]
 8000d80:	e021      	b.n	8000dc6 <HAL_GPIO_Init+0x2e2>
 8000d82:	bf00      	nop
 8000d84:	10320000 	.word	0x10320000
 8000d88:	10310000 	.word	0x10310000
 8000d8c:	10220000 	.word	0x10220000
 8000d90:	10210000 	.word	0x10210000
 8000d94:	10120000 	.word	0x10120000
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	3301      	adds	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f47f ae8e 	bne.w	8000af8 <HAL_GPIO_Init+0x14>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	372c      	adds	r7, #44	; 0x2c
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e001      	b.n	8000e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2a:	787b      	ldrb	r3, [r7, #1]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e30:	887a      	ldrh	r2, [r7, #2]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e36:	e003      	b.n	8000e40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	041a      	lsls	r2, r3, #16
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	611a      	str	r2, [r3, #16]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
	...

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e272      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8087 	beq.w	8000faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e9c:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d00c      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea8:	4b8f      	ldr	r3, [pc, #572]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d112      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
 8000eb4:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec0:	d10b      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec2:	4b89      	ldr	r3, [pc, #548]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d06c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d168      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e24c      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x76>
 8000ee4:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a7f      	ldr	r2, [pc, #508]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e02e      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000efa:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7a      	ldr	r2, [pc, #488]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a77      	ldr	r2, [pc, #476]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e01d      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0xbc>
 8000f1e:	4b72      	ldr	r3, [pc, #456]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a71      	ldr	r2, [pc, #452]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a6e      	ldr	r2, [pc, #440]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e00b      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f38:	4b6b      	ldr	r3, [pc, #428]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a6a      	ldr	r2, [pc, #424]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fcda 	bl	8000910 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fcd6 	bl	8000910 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e200      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <HAL_RCC_OscConfig+0xe4>
 8000f7e:	e014      	b.n	8000faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fcc6 	bl	8000910 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fcc2 	bl	8000910 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1ec      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x10c>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d063      	beq.n	800107e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00b      	beq.n	8000fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d11c      	bne.n	8001008 <HAL_RCC_OscConfig+0x18c>
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d116      	bne.n	8001008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x176>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d001      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e1c0      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4939      	ldr	r1, [pc, #228]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	e03a      	b.n	800107e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d020      	beq.n	8001052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_RCC_OscConfig+0x270>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fc7b 	bl	8000910 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fc77 	bl	8000910 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1a1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4927      	ldr	r1, [pc, #156]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
 8001050:	e015      	b.n	800107e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_RCC_OscConfig+0x270>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fc5a 	bl	8000910 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fc56 	bl	8000910 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e180      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d03a      	beq.n	8001100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d019      	beq.n	80010c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_RCC_OscConfig+0x274>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fc3a 	bl	8000910 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fc36 	bl	8000910 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e160      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 faf4 	bl	80016ac <RCC_Delay>
 80010c4:	e01c      	b.n	8001100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_RCC_OscConfig+0x274>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fc20 	bl	8000910 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d2:	e00f      	b.n	80010f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d4:	f7ff fc1c 	bl	8000910 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d908      	bls.n	80010f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e146      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	42420000 	.word	0x42420000
 80010f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f4:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e9      	bne.n	80010d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a6 	beq.w	800125a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001112:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10d      	bne.n	800113a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a87      	ldr	r2, [pc, #540]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d118      	bne.n	8001178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7e      	ldr	r2, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001152:	f7ff fbdd 	bl	8000910 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115a:	f7ff fbd9 	bl	8000910 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b64      	cmp	r3, #100	; 0x64
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e103      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x312>
 8001180:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6213      	str	r3, [r2, #32]
 800118c:	e02d      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x334>
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a69      	ldr	r2, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a66      	ldr	r2, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	e01c      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x356>
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	e00b      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	4b58      	ldr	r3, [pc, #352]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a57      	ldr	r2, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d015      	beq.n	800121e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb8d 	bl	8000910 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb89 	bl	8000910 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0b1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ee      	beq.n	80011fa <HAL_RCC_OscConfig+0x37e>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb77 	bl	8000910 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb73 	bl	8000910 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e09b      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ee      	bne.n	8001226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8087 	beq.w	8001372 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b08      	cmp	r3, #8
 800126e:	d061      	beq.n	8001334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d146      	bne.n	8001306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fb47 	bl	8000910 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fb43 	bl	8000910 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e06d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d108      	bne.n	80012c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	4921      	ldr	r1, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a19      	ldr	r1, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	430b      	orrs	r3, r1
 80012d2:	491b      	ldr	r1, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fb17 	bl	8000910 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fb13 	bl	8000910 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x46a>
 8001304:	e035      	b.n	8001372 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fb00 	bl	8000910 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fafc 	bl	8000910 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e026      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x498>
 8001332:	e01e      	b.n	8001372 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e019      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x500>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d0      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d910      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4965      	ldr	r1, [pc, #404]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b8      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	494d      	ldr	r1, [pc, #308]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d040      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d115      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e073      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06b      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fa4e 	bl	8000910 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff fa4a 	bl	8000910 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e053      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d210      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e032      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f821 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1cc>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_ClockConfig+0x1d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f8d0 	bl	80006d4 <HAL_InitTick>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000
 8001544:	40021000 	.word	0x40021000
 8001548:	08005d8c 	.word	0x08005d8c
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b490      	push	{r4, r7}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_RCC_GetSysClockFreq+0xac>)
 800155c:	1d3c      	adds	r4, r7, #4
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001564:	f240 2301 	movw	r3, #513	; 0x201
 8001568:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x40>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x46>
 8001592:	e02b      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001596:	623b      	str	r3, [r7, #32]
      break;
 8001598:	e02b      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3328      	adds	r3, #40	; 0x28
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	0c5b      	lsrs	r3, r3, #17
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	3328      	adds	r3, #40	; 0x28
 80015c2:	443b      	add	r3, r7
 80015c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ce:	fb03 f202 	mul.w	r2, r3, r2
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	e004      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	623b      	str	r3, [r7, #32]
      break;
 80015ea:	e002      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ee:	623b      	str	r3, [r7, #32]
      break;
 80015f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc90      	pop	{r4, r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	08005cb8 	.word	0x08005cb8
 8001604:	40021000 	.word	0x40021000
 8001608:	007a1200 	.word	0x007a1200
 800160c:	003d0900 	.word	0x003d0900

08001610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_RCC_GetHCLKFreq+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001628:	f7ff fff2 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4903      	ldr	r1, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	08005d9c 	.word	0x08005d9c

0800164c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	220f      	movs	r2, #15
 800165a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0207 	and.w	r2, r3, #7
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40022000 	.word	0x40022000

080016ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <RCC_Delay+0x34>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <RCC_Delay+0x38>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0a5b      	lsrs	r3, r3, #9
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c8:	bf00      	nop
  }
  while (Delay --);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	60fa      	str	r2, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <RCC_Delay+0x1c>
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000000 	.word	0x20000000
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e01d      	b.n	8001736 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f815 	bl	800173e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3304      	adds	r3, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f000 f962 	bl	80019f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b06      	cmp	r3, #6
 8001778:	d007      	beq.n	800178a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d122      	bne.n	80017f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d11b      	bne.n	80017f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f06f 0202 	mvn.w	r2, #2
 80017c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8ed 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80017de:	e005      	b.n	80017ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f8e0 	bl	80019a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8ef 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d122      	bne.n	8001846 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d11b      	bne.n	8001846 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f06f 0204 	mvn.w	r2, #4
 8001816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f8c3 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8001832:	e005      	b.n	8001840 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f8b6 	bl	80019a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f8c5 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b08      	cmp	r3, #8
 8001852:	d122      	bne.n	800189a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11b      	bne.n	800189a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f06f 0208 	mvn.w	r2, #8
 800186a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f899 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8001886:	e005      	b.n	8001894 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f88c 	bl	80019a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f89b 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d122      	bne.n	80018ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d11b      	bne.n	80018ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f06f 0210 	mvn.w	r2, #16
 80018be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2208      	movs	r2, #8
 80018c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f86f 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80018da:	e005      	b.n	80018e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f862 	bl	80019a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f871 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10e      	bne.n	800191a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0201 	mvn.w	r2, #1
 8001912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7fe fea5 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d10e      	bne.n	8001946 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	2b80      	cmp	r3, #128	; 0x80
 8001934:	d107      	bne.n	8001946 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800193e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8c0 	bl	8001ac6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001950:	2b40      	cmp	r3, #64	; 0x40
 8001952:	d10e      	bne.n	8001972 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d107      	bne.n	8001972 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800196a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f835 	bl	80019dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b20      	cmp	r3, #32
 800197e:	d10e      	bne.n	800199e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b20      	cmp	r3, #32
 800198c:	d107      	bne.n	800199e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f06f 0220 	mvn.w	r2, #32
 8001996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f88b 	bl	8001ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
	...

080019f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <TIM_Base_SetConfig+0xb8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00b      	beq.n	8001a20 <TIM_Base_SetConfig+0x30>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0e:	d007      	beq.n	8001a20 <TIM_Base_SetConfig+0x30>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a26      	ldr	r2, [pc, #152]	; (8001aac <TIM_Base_SetConfig+0xbc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d003      	beq.n	8001a20 <TIM_Base_SetConfig+0x30>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <TIM_Base_SetConfig+0xc0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d108      	bne.n	8001a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <TIM_Base_SetConfig+0xb8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00b      	beq.n	8001a52 <TIM_Base_SetConfig+0x62>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d007      	beq.n	8001a52 <TIM_Base_SetConfig+0x62>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <TIM_Base_SetConfig+0xbc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d003      	beq.n	8001a52 <TIM_Base_SetConfig+0x62>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <TIM_Base_SetConfig+0xc0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d108      	bne.n	8001a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <TIM_Base_SetConfig+0xb8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d103      	bne.n	8001a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	615a      	str	r2, [r3, #20]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0208 	add.w	r2, r3, #8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f103 0208 	add.w	r2, r3, #8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f103 0208 	add.w	r2, r3, #8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d103      	bne.n	8001b94 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e00c      	b.n	8001bae <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3308      	adds	r3, #8
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e002      	b.n	8001ba2 <vListInsert+0x2e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d2f6      	bcs.n	8001b9c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6892      	ldr	r2, [r2, #8]
 8001bfa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6852      	ldr	r2, [r2, #4]
 8001c04:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d103      	bne.n	8001c18 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b08c      	sub	sp, #48	; 0x30
 8001c3a:	af04      	add	r7, sp, #16
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fa0e 	bl	800306c <pvPortMalloc>
 8001c50:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00e      	beq.n	8001c76 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c58:	2060      	movs	r0, #96	; 0x60
 8001c5a:	f001 fa07 	bl	800306c <pvPortMalloc>
 8001c5e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6c:	e005      	b.n	8001c7a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f001 fadc 	bl	800322c <vPortFree>
 8001c74:	e001      	b.n	8001c7a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	2300      	movs	r3, #0
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f80e 	bl	8001cb8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001c9c:	69f8      	ldr	r0, [r7, #28]
 8001c9e:	f000 f8a1 	bl	8001de4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	e002      	b.n	8001cae <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001cae:	69bb      	ldr	r3, [r7, #24]
    }
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	21a5      	movs	r1, #165	; 0xa5
 8001cd2:	f003 ff95 	bl	8005c00 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f023 0307 	bic.w	r3, r3, #7
 8001cee:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	617b      	str	r3, [r7, #20]
    }
 8001d0c:	bf00      	nop
 8001d0e:	e7fe      	b.n	8001d0e <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01f      	beq.n	8001d56 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e012      	b.n	8001d42 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4413      	add	r3, r2
 8001d22:	7819      	ldrb	r1, [r3, #0]
 8001d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	3334      	adds	r3, #52	; 0x34
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	2b13      	cmp	r3, #19
 8001d46:	d9e9      	bls.n	8001d1c <prvInitialiseNewTask+0x64>
 8001d48:	e000      	b.n	8001d4c <prvInitialiseNewTask+0x94>
            {
                break;
 8001d4a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001d54:	e003      	b.n	8001d5e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d901      	bls.n	8001d68 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d64:	2304      	movs	r3, #4
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d72:	651a      	str	r2, [r3, #80]	; 0x50
            pxNewTCB->uxMutexesHeld = 0;
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	2200      	movs	r2, #0
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fec9 	bl	8001b16 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	3318      	adds	r3, #24
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fec4 	bl	8001b16 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d92:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	f1c3 0205 	rsb	r2, r3, #5
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	3358      	adds	r3, #88	; 0x58
 8001da8:	2204      	movs	r2, #4
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 ff27 	bl	8005c00 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	335c      	adds	r3, #92	; 0x5c
 8001db6:	2201      	movs	r2, #1
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 ff20 	bl	8005c00 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	69b8      	ldr	r0, [r7, #24]
 8001dc6:	f000 fefd 	bl	8002bc4 <pxPortInitialiseStack>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001dec:	f001 f836 	bl	8002e5c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001df0:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <prvAddNewTaskToReadyList+0xfc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <prvAddNewTaskToReadyList+0xfc>)
 8001df8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <prvAddNewTaskToReadyList+0x100>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e02:	4a38      	ldr	r2, [pc, #224]	; (8001ee4 <prvAddNewTaskToReadyList+0x100>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <prvAddNewTaskToReadyList+0xfc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d110      	bne.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e10:	f000 fc4e 	bl	80026b0 <prvInitialiseTaskLists>
 8001e14:	e00d      	b.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <prvAddNewTaskToReadyList+0x104>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <prvAddNewTaskToReadyList+0x100>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d802      	bhi.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001e2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <prvAddNewTaskToReadyList+0x100>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <prvAddNewTaskToReadyList+0x108>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <prvAddNewTaskToReadyList+0x108>)
 8001e3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <prvAddNewTaskToReadyList+0x108>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	649a      	str	r2, [r3, #72]	; 0x48
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <prvAddNewTaskToReadyList+0x94>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fbe5 	bl	800561c <SEGGER_SYSVIEW_OnTaskCreate>
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	461d      	mov	r5, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461c      	mov	r4, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	1ae3      	subs	r3, r4, r3
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	462b      	mov	r3, r5
 8001e74:	f001 fba6 	bl	80035c4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fc52 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	2201      	movs	r2, #1
 8001e86:	409a      	lsls	r2, r3
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <prvAddNewTaskToReadyList+0x10c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <prvAddNewTaskToReadyList+0x10c>)
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <prvAddNewTaskToReadyList+0x110>)
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f7ff fe40 	bl	8001b2e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001eae:	f001 f805 	bl	8002ebc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <prvAddNewTaskToReadyList+0x104>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00e      	beq.n	8001ed8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <prvAddNewTaskToReadyList+0x100>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <prvAddNewTaskToReadyList+0x114>)
 8001eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee0:	20000168 	.word	0x20000168
 8001ee4:	20000090 	.word	0x20000090
 8001ee8:	20000174 	.word	0x20000174
 8001eec:	20000184 	.word	0x20000184
 8001ef0:	20000170 	.word	0x20000170
 8001ef4:	20000094 	.word	0x20000094
 8001ef8:	e000ed04 	.word	0xe000ed04

08001efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01b      	beq.n	8001f46 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <vTaskDelay+0x68>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <vTaskDelay+0x30>
        __asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	60bb      	str	r3, [r7, #8]
    }
 8001f28:	bf00      	nop
 8001f2a:	e7fe      	b.n	8001f2a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001f2c:	f000 f9c2 	bl	80022b4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	2023      	movs	r0, #35	; 0x23
 8001f34:	f002 feea 	bl	8004d0c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f38:	2100      	movs	r1, #0
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fdca 	bl	8002ad4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f40:	f000 f9c6 	bl	80022d0 <xTaskResumeAll>
 8001f44:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <vTaskDelay+0x6c>)
 8001f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000190 	.word	0x20000190
 8001f68:	e000ed04 	.word	0xe000ed04

08001f6c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001f74:	f000 ff72 	bl	8002e5c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <vTaskSuspend+0x18>
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <vTaskSuspend+0x13c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e000      	b.n	8001f86 <vTaskSuspend+0x1a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fc6c 	bl	8005868 <SEGGER_SYSVIEW_ShrinkId>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4619      	mov	r1, r3
 8001f94:	2029      	movs	r0, #41	; 0x29
 8001f96:	f002 feb9 	bl	8004d0c <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe20 	bl	8001be4 <uxListRemove>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fae:	493f      	ldr	r1, [pc, #252]	; (80020ac <vTaskSuspend+0x140>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <vTaskSuspend+0x6a>
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <vTaskSuspend+0x144>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	4a37      	ldr	r2, [pc, #220]	; (80020b0 <vTaskSuspend+0x144>)
 8001fd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	3318      	adds	r3, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fdfe 	bl	8001be4 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	211b      	movs	r1, #27
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fbdb 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	482e      	ldr	r0, [pc, #184]	; (80020b4 <vTaskSuspend+0x148>)
 8001ffa:	f7ff fd98 	bl	8001b2e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e010      	b.n	8002026 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	4413      	add	r3, r2
 800200a:	335c      	adds	r3, #92	; 0x5c
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	335c      	adds	r3, #92	; 0x5c
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	ddeb      	ble.n	8002004 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800202c:	f000 ff46 	bl	8002ebc <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <vTaskSuspend+0x14c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002038:	f000 ff10 	bl	8002e5c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800203c:	f000 fbb6 	bl	80027ac <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002040:	f000 ff3c 	bl	8002ebc <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <vTaskSuspend+0x13c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d127      	bne.n	800209e <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <vTaskSuspend+0x14c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d017      	beq.n	8002086 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <vTaskSuspend+0x150>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <vTaskSuspend+0x108>
        __asm volatile
 800205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002062:	f383 8811 	msr	BASEPRI, r3
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	60fb      	str	r3, [r7, #12]
    }
 8002070:	bf00      	nop
 8002072:	e7fe      	b.n	8002072 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <vTaskSuspend+0x154>)
 8002076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	f3bf 8f4f 	dsb	sy
 8002080:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002084:	e00b      	b.n	800209e <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <vTaskSuspend+0x148>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <vTaskSuspend+0x158>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d103      	bne.n	800209a <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <vTaskSuspend+0x13c>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    }
 8002098:	e001      	b.n	800209e <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 800209a:	f000 fa87 	bl	80025ac <vTaskSwitchContext>
    }
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000090 	.word	0x20000090
 80020ac:	20000094 	.word	0x20000094
 80020b0:	20000170 	.word	0x20000170
 80020b4:	20000154 	.word	0x20000154
 80020b8:	20000174 	.word	0x20000174
 80020bc:	20000190 	.word	0x20000190
 80020c0:	e000ed04 	.word	0xe000ed04
 80020c4:	20000168 	.word	0x20000168

080020c8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	60fb      	str	r3, [r7, #12]
    }
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	4a09      	ldr	r2, [pc, #36]	; (8002120 <prvTaskIsTaskSuspended+0x58>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10a      	bne.n	8002114 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <prvTaskIsTaskSuspended+0x5c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d005      	beq.n	8002114 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8002110:	2301      	movs	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002114:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002116:	4618      	mov	r0, r3
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000154 	.word	0x20000154
 8002124:	20000128 	.word	0x20000128

08002128 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <vTaskResume+0x28>
        __asm volatile
 800213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	60bb      	str	r3, [r7, #8]
    }
 800214c:	bf00      	nop
 800214e:	e7fe      	b.n	800214e <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <vTaskResume+0xc4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	429a      	cmp	r2, r3
 8002158:	d044      	beq.n	80021e4 <vTaskResume+0xbc>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d041      	beq.n	80021e4 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 8002160:	f000 fe7c 	bl	8002e5c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff ffaf 	bl	80020c8 <prvTaskIsTaskSuspended>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d037      	beq.n	80021e0 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fb78 	bl	8005868 <SEGGER_SYSVIEW_ShrinkId>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	202a      	movs	r0, #42	; 0x2a
 800217e:	f002 fdc5 	bl	8004d0c <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3304      	adds	r3, #4
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fd2c 	bl	8001be4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fac8 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2201      	movs	r2, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <vTaskResume+0xc8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <vTaskResume+0xc8>)
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <vTaskResume+0xcc>)
 80021b4:	441a      	add	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3304      	adds	r3, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7ff fcb6 	bl	8001b2e <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <vTaskResume+0xc4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d307      	bcc.n	80021e0 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <vTaskResume+0xd0>)
 80021d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80021e0:	f000 fe6c 	bl	8002ebc <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000090 	.word	0x20000090
 80021f0:	20000170 	.word	0x20000170
 80021f4:	20000094 	.word	0x20000094
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <vTaskStartScheduler+0x98>)
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2300      	movs	r3, #0
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	2282      	movs	r2, #130	; 0x82
 800220e:	4922      	ldr	r1, [pc, #136]	; (8002298 <vTaskStartScheduler+0x9c>)
 8002210:	4822      	ldr	r0, [pc, #136]	; (800229c <vTaskStartScheduler+0xa0>)
 8002212:	f7ff fd10 	bl	8001c36 <xTaskCreate>
 8002216:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d124      	bne.n	8002268 <vTaskStartScheduler+0x6c>
        __asm volatile
 800221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	60bb      	str	r3, [r7, #8]
    }
 8002230:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <vTaskStartScheduler+0xa4>)
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <vTaskStartScheduler+0xa8>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <vTaskStartScheduler+0xac>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <vTaskStartScheduler+0xb0>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <vTaskStartScheduler+0x98>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d102      	bne.n	8002258 <vTaskStartScheduler+0x5c>
 8002252:	f003 f9c7 	bl	80055e4 <SEGGER_SYSVIEW_OnIdle>
 8002256:	e004      	b.n	8002262 <vTaskStartScheduler+0x66>
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <vTaskStartScheduler+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fa1f 	bl	80056a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002262:	f000 fd33 	bl	8002ccc <xPortStartScheduler>
 8002266:	e00e      	b.n	8002286 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d10a      	bne.n	8002286 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	607b      	str	r3, [r7, #4]
    }
 8002282:	bf00      	nop
 8002284:	e7fe      	b.n	8002284 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <vTaskStartScheduler+0xb4>)
 8002288:	681b      	ldr	r3, [r3, #0]
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000018c 	.word	0x2000018c
 8002298:	08005cc8 	.word	0x08005cc8
 800229c:	08002681 	.word	0x08002681
 80022a0:	20000188 	.word	0x20000188
 80022a4:	20000174 	.word	0x20000174
 80022a8:	2000016c 	.word	0x2000016c
 80022ac:	20000090 	.word	0x20000090
 80022b0:	2000000c 	.word	0x2000000c

080022b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <vTaskSuspendAll+0x18>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a03      	ldr	r2, [pc, #12]	; (80022cc <vTaskSuspendAll+0x18>)
 80022c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000190 	.word	0x20000190

080022d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <xTaskResumeAll+0x11c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <xTaskResumeAll+0x2c>
        __asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	603b      	str	r3, [r7, #0]
    }
 80022f8:	bf00      	nop
 80022fa:	e7fe      	b.n	80022fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80022fc:	f000 fdae 	bl	8002e5c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <xTaskResumeAll+0x11c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3b01      	subs	r3, #1
 8002306:	4a39      	ldr	r2, [pc, #228]	; (80023ec <xTaskResumeAll+0x11c>)
 8002308:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <xTaskResumeAll+0x11c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d165      	bne.n	80023de <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <xTaskResumeAll+0x120>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d061      	beq.n	80023de <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800231a:	e032      	b.n	8002382 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <xTaskResumeAll+0x124>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3318      	adds	r3, #24
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fc5b 	bl	8001be4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3304      	adds	r3, #4
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc56 	bl	8001be4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4618      	mov	r0, r3
 800233c:	f003 f9f2 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <xTaskResumeAll+0x128>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <xTaskResumeAll+0x128>)
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4a27      	ldr	r2, [pc, #156]	; (80023fc <xTaskResumeAll+0x12c>)
 8002360:	441a      	add	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3304      	adds	r3, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fbe0 	bl	8001b2e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <xTaskResumeAll+0x130>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	429a      	cmp	r2, r3
 800237a:	d302      	bcc.n	8002382 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <xTaskResumeAll+0x134>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <xTaskResumeAll+0x124>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1c8      	bne.n	800231c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002390:	f000 fa0c 	bl	80027ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <xTaskResumeAll+0x138>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80023a0:	f000 f848 	bl	8002434 <xTaskIncrementTick>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <xTaskResumeAll+0x134>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f1      	bne.n	80023a0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <xTaskResumeAll+0x138>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <xTaskResumeAll+0x134>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <xTaskResumeAll+0x13c>)
 80023d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80023de:	f000 fd6d 	bl	8002ebc <vPortExitCritical>

    return xAlreadyYielded;
 80023e2:	68bb      	ldr	r3, [r7, #8]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000190 	.word	0x20000190
 80023f0:	20000168 	.word	0x20000168
 80023f4:	20000128 	.word	0x20000128
 80023f8:	20000170 	.word	0x20000170
 80023fc:	20000094 	.word	0x20000094
 8002400:	20000090 	.word	0x20000090
 8002404:	2000017c 	.word	0x2000017c
 8002408:	20000178 	.word	0x20000178
 800240c:	e000ed04 	.word	0xe000ed04

08002410 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002416:	f000 fdeb 	bl	8002ff0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <xTaskGetTickCountFromISR+0x20>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002424:	683b      	ldr	r3, [r7, #0]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000016c 	.word	0x2000016c

08002434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <xTaskIncrementTick+0x14c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 8092 	bne.w	800256c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002448:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <xTaskIncrementTick+0x150>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <xTaskIncrementTick+0x150>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d120      	bne.n	800249e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800245c:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <xTaskIncrementTick+0x154>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <xTaskIncrementTick+0x48>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	603b      	str	r3, [r7, #0]
    }
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xTaskIncrementTick+0x46>
 800247c:	4b42      	ldr	r3, [pc, #264]	; (8002588 <xTaskIncrementTick+0x154>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b42      	ldr	r3, [pc, #264]	; (800258c <xTaskIncrementTick+0x158>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a40      	ldr	r2, [pc, #256]	; (8002588 <xTaskIncrementTick+0x154>)
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4a40      	ldr	r2, [pc, #256]	; (800258c <xTaskIncrementTick+0x158>)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <xTaskIncrementTick+0x15c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a3e      	ldr	r2, [pc, #248]	; (8002590 <xTaskIncrementTick+0x15c>)
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	f000 f987 	bl	80027ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <xTaskIncrementTick+0x160>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d34c      	bcc.n	8002542 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <xTaskIncrementTick+0x154>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <xTaskIncrementTick+0x160>)
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	601a      	str	r2, [r3, #0]
                    break;
 80024ba:	e042      	b.n	8002542 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024bc:	4b32      	ldr	r3, [pc, #200]	; (8002588 <xTaskIncrementTick+0x154>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d203      	bcs.n	80024dc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80024d4:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <xTaskIncrementTick+0x160>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80024da:	e032      	b.n	8002542 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3304      	adds	r3, #4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fb7f 	bl	8001be4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3318      	adds	r3, #24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fb76 	bl	8001be4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 f912 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <xTaskIncrementTick+0x164>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4313      	orrs	r3, r2
 800250e:	4a22      	ldr	r2, [pc, #136]	; (8002598 <xTaskIncrementTick+0x164>)
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <xTaskIncrementTick+0x168>)
 8002520:	441a      	add	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3304      	adds	r3, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7ff fb00 	bl	8001b2e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <xTaskIncrementTick+0x16c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d3b5      	bcc.n	80024a8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002540:	e7b2      	b.n	80024a8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <xTaskIncrementTick+0x16c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	4914      	ldr	r1, [pc, #80]	; (800259c <xTaskIncrementTick+0x168>)
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d901      	bls.n	800255e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <xTaskIncrementTick+0x170>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e004      	b.n	8002576 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <xTaskIncrementTick+0x174>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <xTaskIncrementTick+0x174>)
 8002574:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002576:	697b      	ldr	r3, [r7, #20]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000190 	.word	0x20000190
 8002584:	2000016c 	.word	0x2000016c
 8002588:	20000120 	.word	0x20000120
 800258c:	20000124 	.word	0x20000124
 8002590:	20000180 	.word	0x20000180
 8002594:	20000188 	.word	0x20000188
 8002598:	20000170 	.word	0x20000170
 800259c:	20000094 	.word	0x20000094
 80025a0:	20000090 	.word	0x20000090
 80025a4:	2000017c 	.word	0x2000017c
 80025a8:	20000178 	.word	0x20000178

080025ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <vTaskSwitchContext+0xbc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <vTaskSwitchContext+0xc0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80025c0:	e04d      	b.n	800265e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <vTaskSwitchContext+0xc0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <vTaskSwitchContext+0xc4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f1c3 031f 	rsb	r3, r3, #31
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	4925      	ldr	r1, [pc, #148]	; (8002674 <vTaskSwitchContext+0xc8>)
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <vTaskSwitchContext+0x5c>
        __asm volatile
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	607b      	str	r3, [r7, #4]
    }
 8002604:	bf00      	nop
 8002606:	e7fe      	b.n	8002606 <vTaskSwitchContext+0x5a>
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <vTaskSwitchContext+0xc8>)
 8002614:	4413      	add	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3308      	adds	r3, #8
 800262a:	429a      	cmp	r2, r3
 800262c:	d104      	bne.n	8002638 <vTaskSwitchContext+0x8c>
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <vTaskSwitchContext+0xcc>)
 8002640:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <vTaskSwitchContext+0xcc>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <vTaskSwitchContext+0xd0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d102      	bne.n	8002654 <vTaskSwitchContext+0xa8>
 800264e:	f002 ffc9 	bl	80055e4 <SEGGER_SYSVIEW_OnIdle>
}
 8002652:	e004      	b.n	800265e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <vTaskSwitchContext+0xcc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f003 f821 	bl	80056a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000190 	.word	0x20000190
 800266c:	2000017c 	.word	0x2000017c
 8002670:	20000170 	.word	0x20000170
 8002674:	20000094 	.word	0x20000094
 8002678:	20000090 	.word	0x20000090
 800267c:	2000018c 	.word	0x2000018c

08002680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002688:	f000 f852 	bl	8002730 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <prvIdleTask+0x28>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d9f9      	bls.n	8002688 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <prvIdleTask+0x2c>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026a4:	e7f0      	b.n	8002688 <prvIdleTask+0x8>
 80026a6:	bf00      	nop
 80026a8:	20000094 	.word	0x20000094
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	e00c      	b.n	80026d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <prvInitialiseTaskLists+0x60>)
 80026c8:	4413      	add	r3, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fa04 	bl	8001ad8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3301      	adds	r3, #1
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d9ef      	bls.n	80026bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <prvInitialiseTaskLists+0x64>)
 80026de:	f7ff f9fb 	bl	8001ad8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80026e2:	480d      	ldr	r0, [pc, #52]	; (8002718 <prvInitialiseTaskLists+0x68>)
 80026e4:	f7ff f9f8 	bl	8001ad8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <prvInitialiseTaskLists+0x6c>)
 80026ea:	f7ff f9f5 	bl	8001ad8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80026ee:	480c      	ldr	r0, [pc, #48]	; (8002720 <prvInitialiseTaskLists+0x70>)
 80026f0:	f7ff f9f2 	bl	8001ad8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <prvInitialiseTaskLists+0x74>)
 80026f6:	f7ff f9ef 	bl	8001ad8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <prvInitialiseTaskLists+0x78>)
 80026fc:	4a05      	ldr	r2, [pc, #20]	; (8002714 <prvInitialiseTaskLists+0x64>)
 80026fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <prvInitialiseTaskLists+0x7c>)
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <prvInitialiseTaskLists+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000094 	.word	0x20000094
 8002714:	200000f8 	.word	0x200000f8
 8002718:	2000010c 	.word	0x2000010c
 800271c:	20000128 	.word	0x20000128
 8002720:	2000013c 	.word	0x2000013c
 8002724:	20000154 	.word	0x20000154
 8002728:	20000120 	.word	0x20000120
 800272c:	20000124 	.word	0x20000124

08002730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002736:	e019      	b.n	800276c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002738:	f000 fb90 	bl	8002e5c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <prvCheckTasksWaitingTermination+0x50>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fa4b 	bl	8001be4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <prvCheckTasksWaitingTermination+0x54>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <prvCheckTasksWaitingTermination+0x54>)
 8002756:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <prvCheckTasksWaitingTermination+0x58>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3b01      	subs	r3, #1
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <prvCheckTasksWaitingTermination+0x58>)
 8002760:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002762:	f000 fbab 	bl	8002ebc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f810 	bl	800278c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <prvCheckTasksWaitingTermination+0x58>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e1      	bne.n	8002738 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000013c 	.word	0x2000013c
 8002784:	20000168 	.word	0x20000168
 8002788:	20000150 	.word	0x20000150

0800278c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fd47 	bl	800322c <vPortFree>
                vPortFree( pxTCB );
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fd44 	bl	800322c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <prvResetNextTaskUnblockTime+0x2c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <prvResetNextTaskUnblockTime+0x30>)
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80027c2:	e005      	b.n	80027d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <prvResetNextTaskUnblockTime+0x2c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <prvResetNextTaskUnblockTime+0x30>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	20000120 	.word	0x20000120
 80027dc:	20000188 	.word	0x20000188

080027e0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	613b      	str	r3, [r7, #16]
    }
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800280a:	f000 fb27 	bl	8002e5c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d022      	beq.n	8002866 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	3216      	adds	r2, #22
 8002828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	43d2      	mvns	r2, r2
 8002830:	4011      	ands	r1, r2
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	3216      	adds	r2, #22
 8002836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	335c      	adds	r3, #92	; 0x5c
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800284e:	2101      	movs	r1, #1
 8002850:	6a38      	ldr	r0, [r7, #32]
 8002852:	f000 f93f 	bl	8002ad4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <xTaskGenericNotifyWait+0x10c>)
 8002858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002866:	f000 fb29 	bl	8002ebc <vPortExitCritical>

        taskENTER_CRITICAL();
 800286a:	f000 faf7 	bl	8002e5c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	2040      	movs	r0, #64	; 0x40
 800287c:	f002 fadc 	bl	8004e38 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	3216      	adds	r2, #22
 800288e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d002      	beq.n	80028ae <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e00e      	b.n	80028cc <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	3216      	adds	r2, #22
 80028b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	43d2      	mvns	r2, r2
 80028be:	4011      	ands	r1, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	3216      	adds	r2, #22
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <xTaskGenericNotifyWait+0x108>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80028da:	f000 faef 	bl	8002ebc <vPortExitCritical>

        return xReturn;
 80028de:	697b      	ldr	r3, [r7, #20]
    }
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000090 	.word	0x20000090
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <xTaskGenericNotify+0x2e>
        __asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	623b      	str	r3, [r7, #32]
    }
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xTaskGenericNotify+0x4a>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	61fb      	str	r3, [r7, #28]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800293e:	f000 fa8d 	bl	8002e5c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	3216      	adds	r2, #22
 800294e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4413      	add	r3, r2
 800295c:	335c      	adds	r3, #92	; 0x5c
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4413      	add	r3, r2
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d83b      	bhi.n	80029ee <xTaskGenericNotify+0xfe>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <xTaskGenericNotify+0x8c>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	08002a0d 	.word	0x08002a0d
 8002980:	08002991 	.word	0x08002991
 8002984:	080029ad 	.word	0x080029ad
 8002988:	080029c5 	.word	0x080029c5
 800298c:	080029d3 	.word	0x080029d3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	3216      	adds	r2, #22
 8002996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	ea42 0103 	orr.w	r1, r2, r3
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	3216      	adds	r2, #22
 80029a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80029aa:	e032      	b.n	8002a12 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	3216      	adds	r2, #22
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	3216      	adds	r2, #22
 80029be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80029c2:	e026      	b.n	8002a12 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	3216      	adds	r2, #22
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80029d0:	e01f      	b.n	8002a12 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80029d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d006      	beq.n	80029e8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	3216      	adds	r2, #22
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80029e6:	e014      	b.n	8002a12 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80029ec:	e011      	b.n	8002a12 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <xTaskGenericNotify+0x1d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <xTaskGenericNotify+0x120>
        __asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61bb      	str	r3, [r7, #24]
    }
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xTaskGenericNotify+0x11a>
                    break;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <xTaskGenericNotify+0x122>

                    break;
 8002a10:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 ff27 	bl	8005868 <SEGGER_SYSVIEW_ShrinkId>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	203e      	movs	r0, #62	; 0x3e
 8002a28:	f002 fa06 	bl	8004e38 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d13d      	bne.n	8002ab0 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	3304      	adds	r3, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8d3 	bl	8001be4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fe6f 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <xTaskGenericNotify+0x1d4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <xTaskGenericNotify+0x1d4>)
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <xTaskGenericNotify+0x1d8>)
 8002a66:	441a      	add	r2, r3
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f7ff f85d 	bl	8001b2e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	617b      	str	r3, [r7, #20]
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <xTaskGenericNotify+0x1dc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d907      	bls.n	8002ab0 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <xTaskGenericNotify+0x1e0>)
 8002aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002ab0:	f000 fa04 	bl	8002ebc <vPortExitCritical>

        return xReturn;
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3730      	adds	r7, #48	; 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	2000016c 	.word	0x2000016c
 8002ac4:	20000170 	.word	0x20000170
 8002ac8:	20000094 	.word	0x20000094
 8002acc:	20000090 	.word	0x20000090
 8002ad0:	e000ed04 	.word	0xe000ed04

08002ad4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f87a 	bl	8001be4 <uxListRemove>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	2201      	movs	r2, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002b0c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d110      	bne.n	8002b38 <prvAddCurrentTaskToDelayedList+0x64>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	211b      	movs	r1, #27
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 fe40 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4820      	ldr	r0, [pc, #128]	; (8002bb4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002b32:	f7fe fffc 	bl	8001b2e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002b36:	e032      	b.n	8002b9e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d20f      	bcs.n	8002b70 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2104      	movs	r1, #4
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fe26 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7ff f803 	bl	8001b74 <vListInsert>
}
 8002b6e:	e016      	b.n	8002b9e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2104      	movs	r1, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fe16 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3304      	adds	r3, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f7fe fff3 	bl	8001b74 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d202      	bcs.n	8002b9e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6013      	str	r3, [r2, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000016c 	.word	0x2000016c
 8002bac:	20000090 	.word	0x20000090
 8002bb0:	20000170 	.word	0x20000170
 8002bb4:	20000154 	.word	0x20000154
 8002bb8:	20000124 	.word	0x20000124
 8002bbc:	20000120 	.word	0x20000120
 8002bc0:	20000188 	.word	0x20000188

08002bc4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3b04      	subs	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f023 0201 	bic.w	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b04      	subs	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bf4:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <pxPortInitialiseStack+0x54>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3b14      	subs	r3, #20
 8002bfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b20      	subs	r3, #32
 8002c0a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	08002c1d 	.word	0x08002c1d

08002c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <prvTaskExitError+0x54>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d00a      	beq.n	8002c46 <prvTaskExitError+0x2a>
        __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	60fb      	str	r3, [r7, #12]
    }
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <prvTaskExitError+0x28>
        __asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	60bb      	str	r3, [r7, #8]
    }
 8002c58:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c5a:	bf00      	nop
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0fc      	beq.n	8002c5c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000010 	.word	0x20000010
	...

08002c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <pxCurrentTCBConst2>)
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	6808      	ldr	r0, [r1, #0]
 8002c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c8a:	f380 8809 	msr	PSP, r0
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f380 8811 	msr	BASEPRI, r0
 8002c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002c9e:	4770      	bx	lr

08002ca0 <pxCurrentTCBConst2>:
 8002ca0:	20000090 	.word	0x20000090
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop

08002ca8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002ca8:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <prvPortStartFirstTask+0x1c>)
 8002caa:	6800      	ldr	r0, [r0, #0]
 8002cac:	6800      	ldr	r0, [r0, #0]
 8002cae:	f380 8808 	msr	MSP, r0
 8002cb2:	b662      	cpsie	i
 8002cb4:	b661      	cpsie	f
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	df00      	svc	0
 8002cc0:	bf00      	nop
 8002cc2:	0000      	.short	0x0000
 8002cc4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop

08002ccc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cd2:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <xPortStartScheduler+0xd0>)
 8002cd4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <xPortStartScheduler+0xd4>)
 8002cf8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cfa:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d00:	e009      	b.n	8002d16 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d0a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d0ef      	beq.n	8002d02 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00a      	beq.n	8002d44 <xPortStartScheduler+0x78>
        __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	60bb      	str	r3, [r7, #8]
    }
 8002d40:	bf00      	nop
 8002d42:	e7fe      	b.n	8002d42 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d4c:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <xPortStartScheduler+0xd8>)
 8002d58:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <xPortStartScheduler+0xdc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <xPortStartScheduler+0xdc>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d6c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <xPortStartScheduler+0xdc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <xPortStartScheduler+0xdc>)
 8002d74:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d78:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d7a:	f000 f917 	bl	8002fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <xPortStartScheduler+0xe0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d84:	f7ff ff90 	bl	8002ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d88:	f7ff fc10 	bl	80025ac <vTaskSwitchContext>
    prvTaskExitError();
 8002d8c:	f7ff ff46 	bl	8002c1c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e400 	.word	0xe000e400
 8002da0:	20000194 	.word	0x20000194
 8002da4:	20000198 	.word	0x20000198
 8002da8:	e000ed20 	.word	0xe000ed20
 8002dac:	20000010 	.word	0x20000010

08002db0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
    //configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <vInitPrioGroupValue+0xa0>)
 8002db8:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <vInitPrioGroupValue+0xa4>)
 8002ddc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de4:	e009      	b.n	8002dfa <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002dee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d0ef      	beq.n	8002de6 <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00a      	beq.n	8002e28 <vInitPrioGroupValue+0x78>
        __asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60bb      	str	r3, [r7, #8]
    }
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <vInitPrioGroupValue+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002e30:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <vInitPrioGroupValue+0xa8>)
 8002e3c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	e000e400 	.word	0xe000e400
 8002e54:	20000194 	.word	0x20000194
 8002e58:	20000198 	.word	0x20000198

08002e5c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
        __asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	607b      	str	r3, [r7, #4]
    }
 8002e74:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <vPortEnterCritical+0x58>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	; (8002eb4 <vPortEnterCritical+0x58>)
 8002e7e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <vPortEnterCritical+0x58>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10f      	bne.n	8002ea8 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <vPortEnterCritical+0x5c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <vPortEnterCritical+0x4c>
        __asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	603b      	str	r3, [r7, #0]
    }
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <vPortEnterCritical+0x4a>
    }
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000010 	.word	0x20000010
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <vPortExitCritical+0x4c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <vPortExitCritical+0x24>
        __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	607b      	str	r3, [r7, #4]
    }
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <vPortExitCritical+0x4c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <vPortExitCritical+0x4c>)
 8002ee8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <vPortExitCritical+0x4c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <vPortExitCritical+0x42>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002efc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	20000010 	.word	0x20000010
 8002f0c:	00000000 	.word	0x00000000

08002f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f10:	f3ef 8009 	mrs	r0, PSP
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <pxCurrentTCBConst>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f20:	6010      	str	r0, [r2, #0]
 8002f22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002f26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f2a:	f380 8811 	msr	BASEPRI, r0
 8002f2e:	f7ff fb3d 	bl	80025ac <vTaskSwitchContext>
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	6808      	ldr	r0, [r1, #0]
 8002f42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f46:	f380 8809 	msr	PSP, r0
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	4770      	bx	lr

08002f50 <pxCurrentTCBConst>:
 8002f50:	20000090 	.word	0x20000090
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop

08002f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	607b      	str	r3, [r7, #4]
    }
 8002f70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f72:	f002 fabd 	bl	80054f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f76:	f7ff fa5d 	bl	8002434 <xTaskIncrementTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f80:	f002 fb14 	bl	80055ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <SysTick_Handler+0x50>)
 8002f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e001      	b.n	8002f92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f8e:	f002 faf1 	bl	8005574 <SEGGER_SYSVIEW_RecordExitISR>
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f383 8811 	msr	BASEPRI, r3
    }
 8002f9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <vPortSetupTimerInterrupt+0x30>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <vPortSetupTimerInterrupt+0x34>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <vPortSetupTimerInterrupt+0x38>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <vPortSetupTimerInterrupt+0x3c>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <vPortSetupTimerInterrupt+0x40>)
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fce:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <vPortSetupTimerInterrupt+0x30>)
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	e000e010 	.word	0xe000e010
 8002fe0:	e000e018 	.word	0xe000e018
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	10624dd3 	.word	0x10624dd3
 8002fec:	e000e014 	.word	0xe000e014

08002ff0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002ff6:	f3ef 8305 	mrs	r3, IPSR
 8002ffa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	d914      	bls.n	800302c <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <vPortValidateInterruptPriority+0x6c>)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <vPortValidateInterruptPriority+0x70>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	7afa      	ldrb	r2, [r7, #11]
 8003012:	429a      	cmp	r2, r3
 8003014:	d20a      	bcs.n	800302c <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	607b      	str	r3, [r7, #4]
    }
 8003028:	bf00      	nop
 800302a:	e7fe      	b.n	800302a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <vPortValidateInterruptPriority+0x74>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <vPortValidateInterruptPriority+0x78>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d90a      	bls.n	8003052 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	603b      	str	r3, [r7, #0]
    }
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <vPortValidateInterruptPriority+0x60>
    }
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	e000e3f0 	.word	0xe000e3f0
 8003060:	20000194 	.word	0x20000194
 8003064:	e000ed0c 	.word	0xe000ed0c
 8003068:	20000198 	.word	0x20000198

0800306c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003078:	f7ff f91c 	bl	80022b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800307c:	4b65      	ldr	r3, [pc, #404]	; (8003214 <pvPortMalloc+0x1a8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003084:	f000 f934 	bl	80032f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003088:	4b63      	ldr	r3, [pc, #396]	; (8003218 <pvPortMalloc+0x1ac>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 80a7 	bne.w	80031e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d02d      	beq.n	80030f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800309c:	2208      	movs	r2, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d227      	bcs.n	80030f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80030a8:	2208      	movs	r2, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d021      	beq.n	80030fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f023 0307 	bic.w	r3, r3, #7
 80030c0:	3308      	adds	r3, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d214      	bcs.n	80030f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	3308      	adds	r3, #8
 80030d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <pvPortMalloc+0x92>
        __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	617b      	str	r3, [r7, #20]
    }
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030f6:	e002      	b.n	80030fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	e000      	b.n	8003100 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d06e      	beq.n	80031e4 <pvPortMalloc+0x178>
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <pvPortMalloc+0x1b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d869      	bhi.n	80031e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <pvPortMalloc+0x1b4>)
 8003112:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003114:	4b42      	ldr	r3, [pc, #264]	; (8003220 <pvPortMalloc+0x1b4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800311a:	e004      	b.n	8003126 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d903      	bls.n	8003138 <pvPortMalloc+0xcc>
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f1      	bne.n	800311c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <pvPortMalloc+0x1a8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	429a      	cmp	r2, r3
 8003140:	d050      	beq.n	80031e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2208      	movs	r2, #8
 8003148:	4413      	add	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	1ad2      	subs	r2, r2, r3
 800315c:	2308      	movs	r3, #8
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	429a      	cmp	r2, r3
 8003162:	d91f      	bls.n	80031a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <pvPortMalloc+0x120>
        __asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	613b      	str	r3, [r7, #16]
    }
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800319e:	69b8      	ldr	r0, [r7, #24]
 80031a0:	f000 f908 	bl	80033b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <pvPortMalloc+0x1b0>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	4a1b      	ldr	r2, [pc, #108]	; (800321c <pvPortMalloc+0x1b0>)
 80031b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <pvPortMalloc+0x1b0>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <pvPortMalloc+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d203      	bcs.n	80031c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <pvPortMalloc+0x1b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a18      	ldr	r2, [pc, #96]	; (8003224 <pvPortMalloc+0x1b8>)
 80031c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <pvPortMalloc+0x1ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <pvPortMalloc+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <pvPortMalloc+0x1bc>)
 80031e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031e4:	f7ff f874 	bl	80022d0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <pvPortMalloc+0x19c>
        __asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60fb      	str	r3, [r7, #12]
    }
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <pvPortMalloc+0x19a>
    return pvReturn;
 8003208:	69fb      	ldr	r3, [r7, #28]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20001da4 	.word	0x20001da4
 8003218:	20001db8 	.word	0x20001db8
 800321c:	20001da8 	.word	0x20001da8
 8003220:	20001d9c 	.word	0x20001d9c
 8003224:	20001dac 	.word	0x20001dac
 8003228:	20001db0 	.word	0x20001db0

0800322c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d04d      	beq.n	80032da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800323e:	2308      	movs	r3, #8
 8003240:	425b      	negs	r3, r3
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4413      	add	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <vPortFree+0xb8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <vPortFree+0x44>
        __asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	60fb      	str	r3, [r7, #12]
    }
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <vPortFree+0x62>
        __asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	60bb      	str	r3, [r7, #8]
    }
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <vPortFree+0xb8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01e      	beq.n	80032da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11a      	bne.n	80032da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <vPortFree+0xb8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	401a      	ands	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80032b4:	f7fe fffe 	bl	80022b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <vPortFree+0xbc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <vPortFree+0xbc>)
 80032c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032c6:	6938      	ldr	r0, [r7, #16]
 80032c8:	f000 f874 	bl	80033b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <vPortFree+0xc0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	4a06      	ldr	r2, [pc, #24]	; (80032ec <vPortFree+0xc0>)
 80032d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80032d6:	f7fe fffb 	bl	80022d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20001db8 	.word	0x20001db8
 80032e8:	20001da8 	.word	0x20001da8
 80032ec:	20001db4 	.word	0x20001db4

080032f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <prvHeapInit+0xac>)
 80032fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3307      	adds	r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	4a1f      	ldr	r2, [pc, #124]	; (800339c <prvHeapInit+0xac>)
 8003320:	4413      	add	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003328:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <prvHeapInit+0xb0>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800332e:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <prvHeapInit+0xb0>)
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4413      	add	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800333c:	2208      	movs	r2, #8
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0307 	bic.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <prvHeapInit+0xb4>)
 8003350:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <prvHeapInit+0xb4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <prvHeapInit+0xb4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	1ad2      	subs	r2, r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <prvHeapInit+0xb4>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <prvHeapInit+0xb8>)
 800337e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <prvHeapInit+0xbc>)
 8003386:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <prvHeapInit+0xc0>)
 800338a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800338e:	601a      	str	r2, [r3, #0]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	2000019c 	.word	0x2000019c
 80033a0:	20001d9c 	.word	0x20001d9c
 80033a4:	20001da4 	.word	0x20001da4
 80033a8:	20001dac 	.word	0x20001dac
 80033ac:	20001da8 	.word	0x20001da8
 80033b0:	20001db8 	.word	0x20001db8

080033b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <prvInsertBlockIntoFreeList+0xa8>)
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e002      	b.n	80033c8 <prvInsertBlockIntoFreeList+0x14>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d8f7      	bhi.n	80033c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4413      	add	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d108      	bne.n	80033f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	441a      	add	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	441a      	add	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d118      	bne.n	800343c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <prvInsertBlockIntoFreeList+0xac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d00d      	beq.n	8003432 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	441a      	add	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e008      	b.n	8003444 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <prvInsertBlockIntoFreeList+0xac>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e003      	b.n	8003444 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d002      	beq.n	8003452 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	20001d9c 	.word	0x20001d9c
 8003460:	20001da4 	.word	0x20001da4

08003464 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003468:	4803      	ldr	r0, [pc, #12]	; (8003478 <_cbSendSystemDesc+0x14>)
 800346a:	f001 ffeb 	bl	8005444 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <_cbSendSystemDesc+0x18>)
 8003470:	f001 ffe8 	bl	8005444 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}
 8003478:	08005cd0 	.word	0x08005cd0
 800347c:	08005d04 	.word	0x08005d04

08003480 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <SEGGER_SYSVIEW_Conf+0x20>)
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <SEGGER_SYSVIEW_Conf+0x24>)
 800348e:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <SEGGER_SYSVIEW_Conf+0x28>)
 8003490:	f001 fbcc 	bl	8004c2c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003494:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003498:	f001 fc0c 	bl	8004cb4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000000 	.word	0x20000000
 80034a4:	08003465 	.word	0x08003465
 80034a8:	08005da4 	.word	0x08005da4

080034ac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	e033      	b.n	8003520 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80034b8:	491e      	ldr	r1, [pc, #120]	; (8003534 <_cbSendTaskList+0x88>)
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	491a      	ldr	r1, [pc, #104]	; (8003534 <_cbSendTaskList+0x88>)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3304      	adds	r3, #4
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	4c16      	ldr	r4, [pc, #88]	; (8003534 <_cbSendTaskList+0x88>)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4423      	add	r3, r4
 80034e8:	3308      	adds	r3, #8
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	4d11      	ldr	r5, [pc, #68]	; (8003534 <_cbSendTaskList+0x88>)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	442b      	add	r3, r5
 80034fa:	330c      	adds	r3, #12
 80034fc:	681d      	ldr	r5, [r3, #0]
 80034fe:	4e0d      	ldr	r6, [pc, #52]	; (8003534 <_cbSendTaskList+0x88>)
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4433      	add	r3, r6
 800350c:	3310      	adds	r3, #16
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	462b      	mov	r3, r5
 8003514:	4622      	mov	r2, r4
 8003516:	f000 f8bd 	bl	8003694 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3301      	adds	r3, #1
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <_cbSendTaskList+0x8c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d3c6      	bcc.n	80034b8 <_cbSendTaskList+0xc>
  }
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003534:	20001dbc 	.word	0x20001dbc
 8003538:	20001e5c 	.word	0x20001e5c

0800353c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003544:	f7fe ff64 	bl	8002410 <xTaskGetTickCountFromISR>
 8003548:	4603      	mov	r3, r0
 800354a:	2200      	movs	r2, #0
 800354c:	469a      	mov	sl, r3
 800354e:	4693      	mov	fp, r2
 8003550:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	f04f 0a00 	mov.w	sl, #0
 8003560:	f04f 0b00 	mov.w	fp, #0
 8003564:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003568:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800356c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003570:	4652      	mov	r2, sl
 8003572:	465b      	mov	r3, fp
 8003574:	1a14      	subs	r4, r2, r0
 8003576:	eb63 0501 	sbc.w	r5, r3, r1
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	00ab      	lsls	r3, r5, #2
 8003584:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003588:	00a2      	lsls	r2, r4, #2
 800358a:	4614      	mov	r4, r2
 800358c:	461d      	mov	r5, r3
 800358e:	eb14 0800 	adds.w	r8, r4, r0
 8003592:	eb45 0901 	adc.w	r9, r5, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80035b2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080035c4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80035d2:	2205      	movs	r2, #5
 80035d4:	492b      	ldr	r1, [pc, #172]	; (8003684 <SYSVIEW_AddTask+0xc0>)
 80035d6:	68b8      	ldr	r0, [r7, #8]
 80035d8:	f002 faf4 	bl	8005bc4 <memcmp>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d04b      	beq.n	800367a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d903      	bls.n	80035f2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80035ea:	4828      	ldr	r0, [pc, #160]	; (800368c <SYSVIEW_AddTask+0xc8>)
 80035ec:	f002 fa3c 	bl	8005a68 <SEGGER_SYSVIEW_Warn>
    return;
 80035f0:	e044      	b.n	800367c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4926      	ldr	r1, [pc, #152]	; (8003690 <SYSVIEW_AddTask+0xcc>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4921      	ldr	r1, [pc, #132]	; (8003690 <SYSVIEW_AddTask+0xcc>)
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3304      	adds	r3, #4
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	491b      	ldr	r1, [pc, #108]	; (8003690 <SYSVIEW_AddTask+0xcc>)
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3308      	adds	r3, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4916      	ldr	r1, [pc, #88]	; (8003690 <SYSVIEW_AddTask+0xcc>)
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	330c      	adds	r3, #12
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4910      	ldr	r1, [pc, #64]	; (8003690 <SYSVIEW_AddTask+0xcc>)
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3310      	adds	r3, #16
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	4a08      	ldr	r2, [pc, #32]	; (8003688 <SYSVIEW_AddTask+0xc4>)
 8003666:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f80e 	bl	8003694 <SYSVIEW_SendTaskInfo>
 8003678:	e000      	b.n	800367c <SYSVIEW_AddTask+0xb8>
    return;
 800367a:	bf00      	nop

}
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08005d14 	.word	0x08005d14
 8003688:	20001e5c 	.word	0x20001e5c
 800368c:	08005d1c 	.word	0x08005d1c
 8003690:	20001dbc 	.word	0x20001dbc

08003694 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	2214      	movs	r2, #20
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 faa8 	bl	8005c00 <memset>
  TaskInfo.TaskID     = TaskID;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fdc3 	bl	8005254 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	; 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <__NVIC_EnableIRQ>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4906      	ldr	r1, [pc, #24]	; (800370c <__NVIC_EnableIRQ+0x34>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100

08003710 <__NVIC_SetPriority>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800376a:	f002 f9d9 	bl	8005b20 <SEGGER_SYSVIEW_IsStarted>
 800376e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003776:	f001 fbf1 	bl	8004f5c <SEGGER_SYSVIEW_Start>
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <_cbOnUARTRx+0x3c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d806      	bhi.n	80037a4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <_cbOnUARTRx+0x3c>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <_cbOnUARTRx+0x3c>)
 80037a0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80037a2:	e009      	b.n	80037b8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80037a4:	f7ff ffde 	bl	8003764 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <_cbOnUARTRx+0x3c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	2201      	movs	r2, #1
 80037b2:	4619      	mov	r1, r3
 80037b4:	f000 fb64 	bl	8003e80 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80037b8:	bf00      	nop
}
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000014 	.word	0x20000014

080037c4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <_cbOnUARTTx+0x5c>)
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d80f      	bhi.n	80037f4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <_cbOnUARTTx+0x5c>)
 80037d6:	785b      	ldrb	r3, [r3, #1]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <_cbOnUARTTx+0x60>)
 80037dc:	5c9a      	ldrb	r2, [r3, r2]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <_cbOnUARTTx+0x5c>)
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	3301      	adds	r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <_cbOnUARTTx+0x5c>)
 80037ec:	705a      	strb	r2, [r3, #1]
    r = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80037f2:	e00f      	b.n	8003814 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <_cbOnUARTTx+0x5c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f9e3 	bl	8003bc8 <SEGGER_RTT_ReadUpBufferNoLock>
 8003802:	4603      	mov	r3, r0
 8003804:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da02      	bge.n	8003812 <_cbOnUARTTx+0x4e>
    r = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e000      	b.n	8003814 <_cbOnUARTTx+0x50>
  }
Done:
 8003812:	bf00      	nop
  return r;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000014 	.word	0x20000014
 8003824:	08005dac 	.word	0x08005dac

08003828 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <SEGGER_UART_init+0x1c>)
 8003832:	4905      	ldr	r1, [pc, #20]	; (8003848 <SEGGER_UART_init+0x20>)
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f861 	bl	80038fc <HIF_UART_Init>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	08003785 	.word	0x08003785
 8003848:	080037c5 	.word	0x080037c5

0800384c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <USART2_IRQHandler+0x80>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d011      	beq.n	8003886 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <USART2_IRQHandler+0x84>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 030b 	and.w	r3, r3, #11
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003874:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <USART2_IRQHandler+0x88>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800387c:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <USART2_IRQHandler+0x88>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	79fa      	ldrb	r2, [r7, #7]
 8003882:	4610      	mov	r0, r2
 8003884:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01a      	beq.n	80038c6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <USART2_IRQHandler+0x8c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <USART2_IRQHandler+0x8c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	1dfa      	adds	r2, r7, #7
 800389e:	4610      	mov	r0, r2
 80038a0:	4798      	blx	r3
 80038a2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <USART2_IRQHandler+0x90>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <USART2_IRQHandler+0x90>)
 80038b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e006      	b.n	80038c6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <USART2_IRQHandler+0x80>)
 80038ba:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80038bc:	79fa      	ldrb	r2, [r7, #7]
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <USART2_IRQHandler+0x84>)
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e000      	b.n	80038c6 <USART2_IRQHandler+0x7a>
      return;
 80038c4:	bf00      	nop
    }
  }
}
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40004400 	.word	0x40004400
 80038d0:	40004404 	.word	0x40004404
 80038d4:	20001e60 	.word	0x20001e60
 80038d8:	20001e64 	.word	0x20001e64
 80038dc:	4000440c 	.word	0x4000440c

080038e0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HIF_UART_EnableTXEInterrupt+0x18>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <HIF_UART_EnableTXEInterrupt+0x18>)
 80038ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	4000440c 	.word	0x4000440c

080038fc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]

  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HIF_UART_Init+0x84>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HIF_UART_Init+0x84>)
 800390e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003912:	6013      	str	r3, [r2, #0]
 // RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock

  // Initialize USART
  //
  USART_CR1 = 0
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HIF_UART_Init+0x88>)
 8003916:	f242 022c 	movw	r2, #8236	; 0x202c
 800391a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HIF_UART_Init+0x8c>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003922:	4b1a      	ldr	r3, [pc, #104]	; (800398c <HIF_UART_Init+0x90>)
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 16;                       // We use 8x oversampling.
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HIF_UART_Init+0x94>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	3301      	adds	r3, #1
 8003938:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d302      	bcc.n	800394e <HIF_UART_Init+0x52>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003948:	f640 73ff 	movw	r3, #4095	; 0xfff
 800394c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HIF_UART_Init+0x62>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HIF_UART_Init+0x98>)
 800395a:	b29b      	uxth	r3, r3
 800395c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800395e:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <HIF_UART_Init+0x9c>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HIF_UART_Init+0xa0>)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800396a:	2106      	movs	r1, #6
 800396c:	2026      	movs	r0, #38	; 0x26
 800396e:	f7ff fecf 	bl	8003710 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003972:	2026      	movs	r0, #38	; 0x26
 8003974:	f7ff feb0 	bl	80036d8 <__NVIC_EnableIRQ>
}
 8003978:	bf00      	nop
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	4002101c 	.word	0x4002101c
 8003984:	4000440c 	.word	0x4000440c
 8003988:	40004410 	.word	0x40004410
 800398c:	40004414 	.word	0x40004414
 8003990:	044aa200 	.word	0x044aa200
 8003994:	40004408 	.word	0x40004408
 8003998:	20001e60 	.word	0x20001e60
 800399c:	20001e64 	.word	0x20001e64

080039a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <_DoInit+0x8c>)
 80039a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2203      	movs	r2, #3
 80039ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2203      	movs	r2, #3
 80039b4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <_DoInit+0x90>)
 80039ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <_DoInit+0x94>)
 80039c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <_DoInit+0x90>)
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <_DoInit+0x98>)
 80039e6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2210      	movs	r2, #16
 80039ec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3307      	adds	r3, #7
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <_DoInit+0x9c>)
 8003a06:	6810      	ldr	r0, [r2, #0]
 8003a08:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <_DoInit+0xa0>)
 8003a0e:	6810      	ldr	r0, [r2, #0]
 8003a10:	6018      	str	r0, [r3, #0]
 8003a12:	8891      	ldrh	r1, [r2, #4]
 8003a14:	7992      	ldrb	r2, [r2, #6]
 8003a16:	8099      	strh	r1, [r3, #4]
 8003a18:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20001e68 	.word	0x20001e68
 8003a30:	08005d6c 	.word	0x08005d6c
 8003a34:	20001f10 	.word	0x20001f10
 8003a38:	20002310 	.word	0x20002310
 8003a3c:	08005d78 	.word	0x08005d78
 8003a40:	08005d7c 	.word	0x08005d7c

08003a44 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003a50:	2300      	movs	r3, #0
 8003a52:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d905      	bls.n	8003a74 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e007      	b.n	8003a84 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	1acb      	subs	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b01      	subs	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bf28      	it	cs
 8003a92:	4613      	movcs	r3, r2
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	bf28      	it	cs
 8003a9e:	4613      	movcs	r3, r2
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f002 f897 	bl	8005be4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003ab6:	6a3a      	ldr	r2, [r7, #32]
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	4413      	add	r3, r2
 8003abc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	4413      	add	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	4413      	add	r3, r2
 8003ad4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d101      	bne.n	8003ae4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1b4      	bne.n	8003a5a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b088      	sub	sp, #32
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d90f      	bls.n	8003b3e <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6938      	ldr	r0, [r7, #16]
 8003b2e:	f002 f859 	bl	8005be4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003b3c:	e01d      	b.n	8003b7a <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	6938      	ldr	r0, [r7, #16]
 8003b52:	f002 f847 	bl	8005be4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4413      	add	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6938      	ldr	r0, [r7, #16]
 8003b70:	f002 f838 	bl	8005be4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	60da      	str	r2, [r3, #12]
}
 8003b7a:	bf00      	nop
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d808      	bhi.n	8003bb0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad2      	subs	r2, r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3b01      	subs	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e004      	b.n	8003bba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003bba:	697b      	ldr	r3, [r7, #20]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
	...

08003bc8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003bd4:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003be2:	f7ff fedd 	bl	80039a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d92b      	bls.n	8003c6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4293      	cmp	r3, r2
 8003c24:	bf28      	it	cs
 8003c26:	4613      	movcs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	4413      	add	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	6939      	ldr	r1, [r7, #16]
 8003c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c3a:	f001 ffd3 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d101      	bne.n	8003c6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf28      	it	cs
 8003c7c:	4613      	movcs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d019      	beq.n	8003cba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	4413      	add	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c96:	f001 ffa5 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20001e68 	.word	0x20001e68

08003cd4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	; 0x30
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <SEGGER_RTT_ReadNoLock+0x108>)
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <SEGGER_RTT_ReadNoLock+0x1e>
 8003cee:	f7ff fe57 	bl	80039a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	3360      	adds	r3, #96	; 0x60
 8003cfe:	4a37      	ldr	r2, [pc, #220]	; (8003ddc <SEGGER_RTT_ReadNoLock+0x108>)
 8003d00:	4413      	add	r3, r2
 8003d02:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d92b      	bls.n	8003d78 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bf28      	it	cs
 8003d32:	4613      	movcs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	4413      	add	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	6939      	ldr	r1, [r7, #16]
 8003d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d46:	f001 ff4d 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4413      	add	r3, r2
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4413      	add	r3, r2
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d101      	bne.n	8003d78 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bf28      	it	cs
 8003d88:	4613      	movcs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d019      	beq.n	8003dc6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	4413      	add	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	6939      	ldr	r1, [r7, #16]
 8003da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da2:	f001 ff1f 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3730      	adds	r7, #48	; 0x30
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20001e68 	.word	0x20001e68

08003de0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	3360      	adds	r3, #96	; 0x60
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003dfe:	4413      	add	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d029      	beq.n	8003e5e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d82e      	bhi.n	8003e6c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d013      	beq.n	8003e3e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003e16:	e029      	b.n	8003e6c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7ff feb2 	bl	8003b82 <_GetAvailWriteSpace>
 8003e1e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d202      	bcs.n	8003e2e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003e2c:	e021      	b.n	8003e72 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff fe5f 	bl	8003afa <_WriteNoCheck>
    break;
 8003e3c:	e019      	b.n	8003e72 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7ff fe9f 	bl	8003b82 <_GetAvailWriteSpace>
 8003e44:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	bf28      	it	cs
 8003e4e:	4613      	movcs	r3, r2
 8003e50:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff fe4f 	bl	8003afa <_WriteNoCheck>
    break;
 8003e5c:	e009      	b.n	8003e72 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff fdee 	bl	8003a44 <_WriteBlocking>
 8003e68:	61f8      	str	r0, [r7, #28]
    break;
 8003e6a:	e002      	b.n	8003e72 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
    break;
 8003e70:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003e72:	69fb      	ldr	r3, [r7, #28]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20001e68 	.word	0x20001e68

08003e80 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003e9a:	f7ff fd81 	bl	80039a0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea2:	f04f 0120 	mov.w	r1, #32
 8003ea6:	f381 8811 	msr	BASEPRI, r1
 8003eaa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff ff95 	bl	8003de0 <SEGGER_RTT_WriteDownBufferNoLock>
 8003eb6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003ebe:	697b      	ldr	r3, [r7, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20001e68 	.word	0x20001e68

08003ecc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003eda:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ee8:	f7ff fd5a 	bl	80039a0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003eec:	f3ef 8311 	mrs	r3, BASEPRI
 8003ef0:	f04f 0120 	mov.w	r1, #32
 8003ef4:	f381 8811 	msr	BASEPRI, r1
 8003ef8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003efa:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003efc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	3304      	adds	r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	dbeb      	blt.n	8003f02 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003f2a:	e000      	b.n	8003f2e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003f2c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	da3d      	bge.n	8003fb4 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003f38:	6939      	ldr	r1, [r7, #16]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f62:	6939      	ldr	r1, [r7, #16]
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	3320      	adds	r3, #32
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f76:	6939      	ldr	r1, [r7, #16]
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	440b      	add	r3, r1
 8003f84:	3328      	adds	r3, #40	; 0x28
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	3324      	adds	r3, #36	; 0x24
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f9e:	6939      	ldr	r1, [r7, #16]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	332c      	adds	r3, #44	; 0x2c
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e002      	b.n	8003fba <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20001e68 	.word	0x20001e68

08003fd0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fde:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003fec:	f7ff fcd8 	bl	80039a0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ff0:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 8003ff2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d24b      	bcs.n	8004098 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 8004000:	f3ef 8311 	mrs	r3, BASEPRI
 8004004:	f04f 0120 	mov.w	r1, #32
 8004008:	f381 8811 	msr	BASEPRI, r1
 800400c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d031      	beq.n	8004078 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004014:	6979      	ldr	r1, [r7, #20]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	3360      	adds	r3, #96	; 0x60
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004028:	6979      	ldr	r1, [r7, #20]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	440b      	add	r3, r1
 8004036:	3364      	adds	r3, #100	; 0x64
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4613      	mov	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	440b      	add	r3, r1
 800404a:	3368      	adds	r3, #104	; 0x68
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004050:	6979      	ldr	r1, [r7, #20]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	3370      	adds	r3, #112	; 0x70
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	440b      	add	r3, r1
 8004072:	336c      	adds	r3, #108	; 0x6c
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4613      	mov	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	440b      	add	r3, r1
 8004086:	3374      	adds	r3, #116	; 0x74
 8004088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e002      	b.n	800409e <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800409e:	69fb      	ldr	r3, [r7, #28]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20001e68 	.word	0x20001e68

080040ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80040bc:	e002      	b.n	80040c4 <_EncodeStr+0x18>
    Len++;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3301      	adds	r3, #1
 80040c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f6      	bne.n	80040be <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d901      	bls.n	80040dc <_EncodeStr+0x30>
    Len = Limit;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2bfe      	cmp	r3, #254	; 0xfe
 80040e0:	d806      	bhi.n	80040f0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e011      	b.n	8004114 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	60fa      	str	r2, [r7, #12]
 80040f6:	22ff      	movs	r2, #255	; 0xff
 80040f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	60fa      	str	r2, [r7, #12]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	0a19      	lsrs	r1, r3, #8
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	60fa      	str	r2, [r7, #12]
 8004110:	b2ca      	uxtb	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004118:	e00a      	b.n	8004130 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	1c53      	adds	r3, r2, #1
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1c59      	adds	r1, r3, #1
 8004124:	60f9      	str	r1, [r7, #12]
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	701a      	strb	r2, [r3, #0]
    n++;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3301      	adds	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d3f0      	bcc.n	800411a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004138:	68fb      	ldr	r3, [r7, #12]
}
 800413a:	4618      	mov	r0, r3
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
	...

0800415c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <_HandleIncomingPacket+0xe0>)
 8004164:	7e1b      	ldrb	r3, [r3, #24]
 8004166:	4618      	mov	r0, r3
 8004168:	1cfb      	adds	r3, r7, #3
 800416a:	2201      	movs	r2, #1
 800416c:	4619      	mov	r1, r3
 800416e:	f7ff fdb1 	bl	8003cd4 <SEGGER_RTT_ReadNoLock>
 8004172:	4603      	mov	r3, r0
 8004174:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	dd54      	ble.n	8004226 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d032      	beq.n	80041e8 <_HandleIncomingPacket+0x8c>
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	dc42      	bgt.n	800420c <_HandleIncomingPacket+0xb0>
 8004186:	2b07      	cmp	r3, #7
 8004188:	dc16      	bgt.n	80041b8 <_HandleIncomingPacket+0x5c>
 800418a:	2b00      	cmp	r3, #0
 800418c:	dd3e      	ble.n	800420c <_HandleIncomingPacket+0xb0>
 800418e:	3b01      	subs	r3, #1
 8004190:	2b06      	cmp	r3, #6
 8004192:	d83b      	bhi.n	800420c <_HandleIncomingPacket+0xb0>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <_HandleIncomingPacket+0x40>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041bf 	.word	0x080041bf
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cb 	.word	0x080041cb
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d7 	.word	0x080041d7
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080041e3 	.word	0x080041e3
 80041b8:	2b7f      	cmp	r3, #127	; 0x7f
 80041ba:	d036      	beq.n	800422a <_HandleIncomingPacket+0xce>
 80041bc:	e026      	b.n	800420c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80041be:	f000 fecd 	bl	8004f5c <SEGGER_SYSVIEW_Start>
      break;
 80041c2:	e037      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80041c4:	f000 ff86 	bl	80050d4 <SEGGER_SYSVIEW_Stop>
      break;
 80041c8:	e034      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80041ca:	f001 f95f 	bl	800548c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80041ce:	e031      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80041d0:	f001 f924 	bl	800541c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80041d4:	e02e      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80041d6:	f000 ffa3 	bl	8005120 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80041da:	e02b      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80041dc:	f001 fbf2 	bl	80059c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80041e0:	e028      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80041e2:	f001 fbd1 	bl	8005988 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80041e6:	e025      	b.n	8004234 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <_HandleIncomingPacket+0xe0>)
 80041ea:	7e1b      	ldrb	r3, [r3, #24]
 80041ec:	4618      	mov	r0, r3
 80041ee:	1cfb      	adds	r3, r7, #3
 80041f0:	2201      	movs	r2, #1
 80041f2:	4619      	mov	r1, r3
 80041f4:	f7ff fd6e 	bl	8003cd4 <SEGGER_RTT_ReadNoLock>
 80041f8:	4603      	mov	r3, r0
 80041fa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	dd15      	ble.n	800422e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fb3f 	bl	8005888 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800420a:	e010      	b.n	800422e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	b25b      	sxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	da0e      	bge.n	8004232 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <_HandleIncomingPacket+0xe0>)
 8004216:	7e1b      	ldrb	r3, [r3, #24]
 8004218:	4618      	mov	r0, r3
 800421a:	1cfb      	adds	r3, r7, #3
 800421c:	2201      	movs	r2, #1
 800421e:	4619      	mov	r1, r3
 8004220:	f7ff fd58 	bl	8003cd4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004224:	e005      	b.n	8004232 <_HandleIncomingPacket+0xd6>
    }
  }
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <_HandleIncomingPacket+0xd8>
      break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <_HandleIncomingPacket+0xd8>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <_HandleIncomingPacket+0xd8>
      break;
 8004232:	bf00      	nop
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20003328 	.word	0x20003328

08004240 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004246:	2301      	movs	r3, #1
 8004248:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	3301      	adds	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
 800425a:	e00b      	b.n	8004274 <_TrySendOverflowPacket+0x34>
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	b2da      	uxtb	r2, r3
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	09db      	lsrs	r3, r3, #7
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	2b7f      	cmp	r3, #127	; 0x7f
 8004278:	d8f0      	bhi.n	800425c <_TrySendOverflowPacket+0x1c>
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <_TrySendOverflowPacket+0xe4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	e00b      	b.n	80042bc <_TrySendOverflowPacket+0x7c>
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1c59      	adds	r1, r3, #1
 80042ac:	6279      	str	r1, [r7, #36]	; 0x24
 80042ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	09db      	lsrs	r3, r3, #7
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b7f      	cmp	r3, #127	; 0x7f
 80042c0:	d8f0      	bhi.n	80042a4 <_TrySendOverflowPacket+0x64>
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	627a      	str	r2, [r7, #36]	; 0x24
 80042c8:	6a3a      	ldr	r2, [r7, #32]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	4618      	mov	r0, r3
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	f7fb ff34 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042e8:	4603      	mov	r3, r0
 80042ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80042ec:	f7ff faf8 	bl	80038e0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e004      	b.n	8004314 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	3301      	adds	r3, #1
 8004310:	4a03      	ldr	r2, [pc, #12]	; (8004320 <_TrySendOverflowPacket+0xe0>)
 8004312:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004314:	693b      	ldr	r3, [r7, #16]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3730      	adds	r7, #48	; 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20003328 	.word	0x20003328
 8004324:	e0001004 	.word	0xe0001004

08004328 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004334:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <_SendPacket+0x1c4>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d010      	beq.n	800435e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800433c:	4b6b      	ldr	r3, [pc, #428]	; (80044ec <_SendPacket+0x1c4>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a5 	beq.w	8004490 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004346:	4b69      	ldr	r3, [pc, #420]	; (80044ec <_SendPacket+0x1c4>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d109      	bne.n	8004362 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800434e:	f7ff ff77 	bl	8004240 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004352:	4b66      	ldr	r3, [pc, #408]	; (80044ec <_SendPacket+0x1c4>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b01      	cmp	r3, #1
 8004358:	f040 809c 	bne.w	8004494 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800435c:	e001      	b.n	8004362 <_SendPacket+0x3a>
    goto Send;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <_SendPacket+0x3c>
Send:
 8004362:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b1f      	cmp	r3, #31
 8004368:	d809      	bhi.n	800437e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800436a:	4b60      	ldr	r3, [pc, #384]	; (80044ec <_SendPacket+0x1c4>)
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 808d 	bne.w	8004498 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b17      	cmp	r3, #23
 8004382:	d807      	bhi.n	8004394 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b01      	subs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e03d      	b.n	8004410 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b7f      	cmp	r3, #127	; 0x7f
 80043a0:	d912      	bls.n	80043c8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	09da      	lsrs	r2, r3, #7
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	3a01      	subs	r2, #1
 80043ba:	60fa      	str	r2, [r7, #12]
 80043bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e006      	b.n	80043d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b7f      	cmp	r3, #127	; 0x7f
 80043da:	d912      	bls.n	8004402 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	09da      	lsrs	r2, r3, #7
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	3a01      	subs	r2, #1
 80043f4:	60fa      	str	r2, [r7, #12]
 80043f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e006      	b.n	8004410 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b01      	subs	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004410:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <_SendPacket+0x1c8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004416:	4b35      	ldr	r3, [pc, #212]	; (80044ec <_SendPacket+0x1c4>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	623b      	str	r3, [r7, #32]
 8004428:	e00b      	b.n	8004442 <_SendPacket+0x11a>
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	1c59      	adds	r1, r3, #1
 8004432:	6279      	str	r1, [r7, #36]	; 0x24
 8004434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	09db      	lsrs	r3, r3, #7
 8004440:	623b      	str	r3, [r7, #32]
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2b7f      	cmp	r3, #127	; 0x7f
 8004446:	d8f0      	bhi.n	800442a <_SendPacket+0x102>
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	627a      	str	r2, [r7, #36]	; 0x24
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <_SendPacket+0x1c4>)
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	4618      	mov	r0, r3
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	461a      	mov	r2, r3
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	f7fb fe72 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800446c:	4603      	mov	r3, r0
 800446e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004470:	f7ff fa36 	bl	80038e0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <_SendPacket+0x1c4>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e00b      	b.n	800449a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004482:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <_SendPacket+0x1c4>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b18      	ldr	r3, [pc, #96]	; (80044ec <_SendPacket+0x1c4>)
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e004      	b.n	800449a <_SendPacket+0x172>
    goto SendDone;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <_SendPacket+0x172>
      goto SendDone;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <_SendPacket+0x172>
      goto SendDone;
 8004498:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <_SendPacket+0x1c4>)
 800449c:	7e1b      	ldrb	r3, [r3, #24]
 800449e:	4619      	mov	r1, r3
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <_SendPacket+0x1cc>)
 80044a2:	460b      	mov	r3, r1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	440b      	add	r3, r1
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4413      	add	r3, r2
 80044ac:	336c      	adds	r3, #108	; 0x6c
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <_SendPacket+0x1c4>)
 80044b2:	7e1b      	ldrb	r3, [r3, #24]
 80044b4:	4618      	mov	r0, r3
 80044b6:	490f      	ldr	r1, [pc, #60]	; (80044f4 <_SendPacket+0x1cc>)
 80044b8:	4603      	mov	r3, r0
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4403      	add	r3, r0
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	3370      	adds	r3, #112	; 0x70
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d00b      	beq.n	80044e2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <_SendPacket+0x1c4>)
 80044cc:	789b      	ldrb	r3, [r3, #2]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <_SendPacket+0x1c4>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044d8:	f7ff fe40 	bl	800415c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <_SendPacket+0x1c4>)
 80044de:	2200      	movs	r2, #0
 80044e0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044e2:	bf00      	nop
 80044e4:	3728      	adds	r7, #40	; 0x28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20003328 	.word	0x20003328
 80044f0:	e0001004 	.word	0xe0001004
 80044f4:	20001e68 	.word	0x20001e68

080044f8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3301      	adds	r3, #1
 800450e:	2b80      	cmp	r3, #128	; 0x80
 8004510:	d80a      	bhi.n	8004528 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	1c59      	adds	r1, r3, #1
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6051      	str	r1, [r2, #4]
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d15a      	bne.n	80045e6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	e00b      	b.n	800456a <_StoreChar+0x72>
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	6279      	str	r1, [r7, #36]	; 0x24
 800455c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	09db      	lsrs	r3, r3, #7
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2b7f      	cmp	r3, #127	; 0x7f
 800456e:	d8f0      	bhi.n	8004552 <_StoreChar+0x5a>
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	627a      	str	r2, [r7, #36]	; 0x24
 8004576:	6a3a      	ldr	r2, [r7, #32]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e00b      	b.n	80045a2 <_StoreChar+0xaa>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	61f9      	str	r1, [r7, #28]
 8004594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b7f      	cmp	r3, #127	; 0x7f
 80045a6:	d8f0      	bhi.n	800458a <_StoreChar+0x92>
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	61fa      	str	r2, [r7, #28]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	221a      	movs	r2, #26
 80045be:	6939      	ldr	r1, [r7, #16]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff feb1 	bl	8004328 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fdba 	bl	8004144 <_PreparePacket>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
  }
}
 80045e6:	bf00      	nop
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004602:	2301      	movs	r3, #1
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004606:	2301      	movs	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800460a:	e007      	b.n	800461c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	623b      	str	r3, [r7, #32]
    Width++;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d2f3      	bcs.n	800460c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	429a      	cmp	r2, r3
 800462a:	d901      	bls.n	8004630 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11f      	bne.n	800467a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01c      	beq.n	800467a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <_PrintUnsigned+0x66>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <_PrintUnsigned+0x66>
        c = '0';
 8004650:	2330      	movs	r3, #48	; 0x30
 8004652:	76fb      	strb	r3, [r7, #27]
 8004654:	e001      	b.n	800465a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004656:	2320      	movs	r3, #32
 8004658:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800465a:	e007      	b.n	800466c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	3b01      	subs	r3, #1
 8004660:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004662:	7efb      	ldrb	r3, [r7, #27]
 8004664:	4619      	mov	r1, r3
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff ff46 	bl	80044f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <_PrintUnsigned+0x8a>
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	429a      	cmp	r2, r3
 8004678:	d3f0      	bcc.n	800465c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d903      	bls.n	8004688 <_PrintUnsigned+0x98>
      NumDigits--;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	3b01      	subs	r3, #1
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	e009      	b.n	800469c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d200      	bcs.n	800469c <_PrintUnsigned+0xac>
        break;
 800469a:	e005      	b.n	80046a8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80046a6:	e7e8      	b.n	800467a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80046c0:	4a15      	ldr	r2, [pc, #84]	; (8004718 <_PrintUnsigned+0x128>)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	4619      	mov	r1, r3
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff ff14 	bl	80044f8 <_StoreChar>
    Digit /= Base;
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e3      	bne.n	80046a8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046f0:	e006      	b.n	8004700 <_PrintUnsigned+0x110>
        FieldWidth--;
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	3b01      	subs	r3, #1
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80046f8:	2120      	movs	r1, #32
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fefc 	bl	80044f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <_PrintUnsigned+0x11e>
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	429a      	cmp	r2, r3
 800470c:	d3f1      	bcc.n	80046f2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800470e:	bf00      	nop
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	08005dbc 	.word	0x08005dbc

0800471c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	bfb8      	it	lt
 8004730:	425b      	neglt	r3, r3
 8004732:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004734:	2301      	movs	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004738:	e007      	b.n	800474a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004742:	613b      	str	r3, [r7, #16]
    Width++;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	3301      	adds	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	daf3      	bge.n	800473a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d901      	bls.n	800475e <_PrintInt+0x42>
    Width = NumDigits;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <_PrintInt+0x5e>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	db04      	blt.n	8004774 <_PrintInt+0x58>
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <_PrintInt+0x5e>
    FieldWidth--;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	3b01      	subs	r3, #1
 8004778:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <_PrintInt+0x6e>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <_PrintInt+0x9c>
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d111      	bne.n	80047b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800479a:	e006      	b.n	80047aa <_PrintInt+0x8e>
        FieldWidth--;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	3b01      	subs	r3, #1
 80047a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80047a2:	2120      	movs	r1, #32
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff fea7 	bl	80044f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <_PrintInt+0x9c>
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d3f1      	bcc.n	800479c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da07      	bge.n	80047ce <_PrintInt+0xb2>
    v = -v;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	425b      	negs	r3, r3
 80047c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80047c4:	212d      	movs	r1, #45	; 0x2d
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fe96 	bl	80044f8 <_StoreChar>
 80047cc:	e008      	b.n	80047e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80047d8:	212b      	movs	r1, #43	; 0x2b
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff fe8c 	bl	80044f8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <_PrintInt+0x102>
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d114      	bne.n	800481e <_PrintInt+0x102>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d111      	bne.n	800481e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004800:	e006      	b.n	8004810 <_PrintInt+0xf4>
        FieldWidth--;
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	3b01      	subs	r3, #1
 8004806:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004808:	2130      	movs	r1, #48	; 0x30
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fe74 	bl	80044f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <_PrintInt+0x102>
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3f1      	bcc.n	8004802 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fedf 	bl	80045f0 <_PrintUnsigned>
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b098      	sub	sp, #96	; 0x60
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004848:	f3ef 8311 	mrs	r3, BASEPRI
 800484c:	f04f 0120 	mov.w	r1, #32
 8004850:	f381 8811 	msr	BASEPRI, r1
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
 8004856:	48b7      	ldr	r0, [pc, #732]	; (8004b34 <_VPrintTarget+0x2f8>)
 8004858:	f7ff fc74 	bl	8004144 <_PreparePacket>
 800485c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800485e:	4bb5      	ldr	r3, [pc, #724]	; (8004b34 <_VPrintTarget+0x2f8>)
 8004860:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3301      	adds	r3, #1
 800486e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8183 	beq.w	8004b92 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800488c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004890:	2b25      	cmp	r3, #37	; 0x25
 8004892:	f040 8170 	bne.w	8004b76 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004896:	2300      	movs	r3, #0
 8004898:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80048a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048aa:	3b23      	subs	r3, #35	; 0x23
 80048ac:	2b0d      	cmp	r3, #13
 80048ae:	d83f      	bhi.n	8004930 <_VPrintTarget+0xf4>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <_VPrintTarget+0x7c>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	08004921 	.word	0x08004921
 80048bc:	08004931 	.word	0x08004931
 80048c0:	08004931 	.word	0x08004931
 80048c4:	08004931 	.word	0x08004931
 80048c8:	08004931 	.word	0x08004931
 80048cc:	08004931 	.word	0x08004931
 80048d0:	08004931 	.word	0x08004931
 80048d4:	08004931 	.word	0x08004931
 80048d8:	08004911 	.word	0x08004911
 80048dc:	08004931 	.word	0x08004931
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004931 	.word	0x08004931
 80048e8:	08004931 	.word	0x08004931
 80048ec:	08004901 	.word	0x08004901
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80048f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e01a      	b.n	8004936 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	f043 0302 	orr.w	r3, r3, #2
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e012      	b.n	8004936 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004912:	f043 0304 	orr.w	r3, r3, #4
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e00a      	b.n	8004936 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004922:	f043 0308 	orr.w	r3, r3, #8
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e002      	b.n	8004936 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004930:	2300      	movs	r3, #0
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
 8004934:	bf00      	nop
        }
      } while (v);
 8004936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1b0      	bne.n	800489e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800493c:	2300      	movs	r3, #0
 800493e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800494c:	2b2f      	cmp	r3, #47	; 0x2f
 800494e:	d912      	bls.n	8004976 <_VPrintTarget+0x13a>
 8004950:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004954:	2b39      	cmp	r3, #57	; 0x39
 8004956:	d80e      	bhi.n	8004976 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3301      	adds	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800495e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	461a      	mov	r2, r3
 800496a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800496e:	4413      	add	r3, r2
 8004970:	3b30      	subs	r3, #48	; 0x30
 8004972:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004974:	e7e4      	b.n	8004940 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004976:	2300      	movs	r3, #0
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004982:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004986:	2b2e      	cmp	r3, #46	; 0x2e
 8004988:	d11d      	bne.n	80049c6 <_VPrintTarget+0x18a>
        sFormat++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800499c:	2b2f      	cmp	r3, #47	; 0x2f
 800499e:	d912      	bls.n	80049c6 <_VPrintTarget+0x18a>
 80049a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049a4:	2b39      	cmp	r3, #57	; 0x39
 80049a6:	d80e      	bhi.n	80049c6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80049ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	461a      	mov	r2, r3
 80049ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049be:	4413      	add	r3, r2
 80049c0:	3b30      	subs	r3, #48	; 0x30
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80049c4:	e7e4      	b.n	8004990 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80049ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049d2:	2b6c      	cmp	r3, #108	; 0x6c
 80049d4:	d003      	beq.n	80049de <_VPrintTarget+0x1a2>
 80049d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049da:	2b68      	cmp	r3, #104	; 0x68
 80049dc:	d107      	bne.n	80049ee <_VPrintTarget+0x1b2>
          c = *sFormat;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80049ec:	e7ef      	b.n	80049ce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80049ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f2:	2b25      	cmp	r3, #37	; 0x25
 80049f4:	f000 80b3 	beq.w	8004b5e <_VPrintTarget+0x322>
 80049f8:	2b25      	cmp	r3, #37	; 0x25
 80049fa:	f2c0 80b7 	blt.w	8004b6c <_VPrintTarget+0x330>
 80049fe:	2b78      	cmp	r3, #120	; 0x78
 8004a00:	f300 80b4 	bgt.w	8004b6c <_VPrintTarget+0x330>
 8004a04:	2b58      	cmp	r3, #88	; 0x58
 8004a06:	f2c0 80b1 	blt.w	8004b6c <_VPrintTarget+0x330>
 8004a0a:	3b58      	subs	r3, #88	; 0x58
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	f200 80ad 	bhi.w	8004b6c <_VPrintTarget+0x330>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <_VPrintTarget+0x1dc>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004b0f 	.word	0x08004b0f
 8004a1c:	08004b6d 	.word	0x08004b6d
 8004a20:	08004b6d 	.word	0x08004b6d
 8004a24:	08004b6d 	.word	0x08004b6d
 8004a28:	08004b6d 	.word	0x08004b6d
 8004a2c:	08004b6d 	.word	0x08004b6d
 8004a30:	08004b6d 	.word	0x08004b6d
 8004a34:	08004b6d 	.word	0x08004b6d
 8004a38:	08004b6d 	.word	0x08004b6d
 8004a3c:	08004b6d 	.word	0x08004b6d
 8004a40:	08004b6d 	.word	0x08004b6d
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004ac3 	.word	0x08004ac3
 8004a4c:	08004b6d 	.word	0x08004b6d
 8004a50:	08004b6d 	.word	0x08004b6d
 8004a54:	08004b6d 	.word	0x08004b6d
 8004a58:	08004b6d 	.word	0x08004b6d
 8004a5c:	08004b6d 	.word	0x08004b6d
 8004a60:	08004b6d 	.word	0x08004b6d
 8004a64:	08004b6d 	.word	0x08004b6d
 8004a68:	08004b6d 	.word	0x08004b6d
 8004a6c:	08004b6d 	.word	0x08004b6d
 8004a70:	08004b6d 	.word	0x08004b6d
 8004a74:	08004b6d 	.word	0x08004b6d
 8004a78:	08004b39 	.word	0x08004b39
 8004a7c:	08004b6d 	.word	0x08004b6d
 8004a80:	08004b6d 	.word	0x08004b6d
 8004a84:	08004b6d 	.word	0x08004b6d
 8004a88:	08004b6d 	.word	0x08004b6d
 8004a8c:	08004ae9 	.word	0x08004ae9
 8004a90:	08004b6d 	.word	0x08004b6d
 8004a94:	08004b6d 	.word	0x08004b6d
 8004a98:	08004b0f 	.word	0x08004b0f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	1d19      	adds	r1, r3, #4
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6011      	str	r1, [r2, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004ab0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fd1c 	bl	80044f8 <_StoreChar>
        break;
 8004ac0:	e055      	b.n	8004b6e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1d19      	adds	r1, r3, #4
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6011      	str	r1, [r2, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004ad0:	f107 0014 	add.w	r0, r7, #20
 8004ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ade:	220a      	movs	r2, #10
 8004ae0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ae2:	f7ff fe1b 	bl	800471c <_PrintInt>
        break;
 8004ae6:	e042      	b.n	8004b6e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	1d19      	adds	r1, r3, #4
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004af6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004af8:	f107 0014 	add.w	r0, r7, #20
 8004afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b06:	220a      	movs	r2, #10
 8004b08:	f7ff fd72 	bl	80045f0 <_PrintUnsigned>
        break;
 8004b0c:	e02f      	b.n	8004b6e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1d19      	adds	r1, r3, #4
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6011      	str	r1, [r2, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004b1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b1e:	f107 0014 	add.w	r0, r7, #20
 8004b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	f7ff fd5f 	bl	80045f0 <_PrintUnsigned>
        break;
 8004b32:	e01c      	b.n	8004b6e <_VPrintTarget+0x332>
 8004b34:	20003358 	.word	0x20003358
      case 'p':
        v = va_arg(*pParamList, int);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b48:	f107 0014 	add.w	r0, r7, #20
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	2308      	movs	r3, #8
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2308      	movs	r3, #8
 8004b56:	2210      	movs	r2, #16
 8004b58:	f7ff fd4a 	bl	80045f0 <_PrintUnsigned>
        break;
 8004b5c:	e007      	b.n	8004b6e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	2125      	movs	r1, #37	; 0x25
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fcc7 	bl	80044f8 <_StoreChar>
        break;
 8004b6a:	e000      	b.n	8004b6e <_VPrintTarget+0x332>
      default:
        break;
 8004b6c:	bf00      	nop
      }
      sFormat++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e007      	b.n	8004b86 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b76:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fcb9 	bl	80044f8 <_StoreChar>
    }
  } while (*sFormat);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f47f ae72 	bne.w	8004874 <_VPrintTarget+0x38>
 8004b90:	e000      	b.n	8004b94 <_VPrintTarget+0x358>
      break;
 8004b92:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d041      	beq.n	8004c1e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004baa:	e00b      	b.n	8004bc4 <_VPrintTarget+0x388>
 8004bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	6439      	str	r1, [r7, #64]	; 0x40
 8004bb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc8:	d8f0      	bhi.n	8004bac <_VPrintTarget+0x370>
 8004bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	643a      	str	r2, [r7, #64]	; 0x40
 8004bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bde:	2300      	movs	r3, #0
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
 8004be2:	e00b      	b.n	8004bfc <_VPrintTarget+0x3c0>
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004c00:	d8f0      	bhi.n	8004be4 <_VPrintTarget+0x3a8>
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	221a      	movs	r2, #26
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fb85 	bl	8004328 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004c24:	bf00      	nop
 8004c26:	3758      	adds	r7, #88	; 0x58
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c40:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <SEGGER_SYSVIEW_Init+0x74>)
 8004c42:	4818      	ldr	r0, [pc, #96]	; (8004ca4 <SEGGER_SYSVIEW_Init+0x78>)
 8004c44:	f7ff f942 	bl	8003ecc <SEGGER_RTT_AllocUpBuffer>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c4e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c52:	785a      	ldrb	r2, [r3, #1]
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c56:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c58:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c5a:	7e1b      	ldrb	r3, [r3, #24]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2308      	movs	r3, #8
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <SEGGER_SYSVIEW_Init+0x80>)
 8004c66:	490f      	ldr	r1, [pc, #60]	; (8004ca4 <SEGGER_SYSVIEW_Init+0x78>)
 8004c68:	f7ff f9b2 	bl	8003fd0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <SEGGER_SYSVIEW_Init+0x84>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c78:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20002320 	.word	0x20002320
 8004ca4:	08005d84 	.word	0x08005d84
 8004ca8:	20003328 	.word	0x20003328
 8004cac:	20003320 	.word	0x20003320
 8004cb0:	e0001004 	.word	0xe0001004

08004cb4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004cbc:	4a03      	ldr	r2, [pc, #12]	; (8004ccc <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6113      	str	r3, [r2, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	20003328 	.word	0x20003328

08004cd0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cdc:	f04f 0120 	mov.w	r1, #32
 8004ce0:	f381 8811 	msr	BASEPRI, r1
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	4808      	ldr	r0, [pc, #32]	; (8004d08 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ce8:	f7ff fa2c 	bl	8004144 <_PreparePacket>
 8004cec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68b8      	ldr	r0, [r7, #8]
 8004cf4:	f7ff fb18 	bl	8004328 <_SendPacket>
  RECORD_END();
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20003358 	.word	0x20003358

08004d0c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d16:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1a:	f04f 0120 	mov.w	r1, #32
 8004d1e:	f381 8811 	msr	BASEPRI, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	4816      	ldr	r0, [pc, #88]	; (8004d80 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d26:	f7ff fa0d 	bl	8004144 <_PreparePacket>
 8004d2a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	e00b      	b.n	8004d52 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	1c59      	adds	r1, r3, #1
 8004d42:	61f9      	str	r1, [r7, #28]
 8004d44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b7f      	cmp	r3, #127	; 0x7f
 8004d56:	d8f0      	bhi.n	8004d3a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	61fa      	str	r2, [r7, #28]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6938      	ldr	r0, [r7, #16]
 8004d6e:	f7ff fadb 	bl	8004328 <_SendPacket>
  RECORD_END();
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f383 8811 	msr	BASEPRI, r3
}
 8004d78:	bf00      	nop
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20003358 	.word	0x20003358

08004d84 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08c      	sub	sp, #48	; 0x30
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	4825      	ldr	r0, [pc, #148]	; (8004e34 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004da0:	f7ff f9d0 	bl	8004144 <_PreparePacket>
 8004da4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db2:	e00b      	b.n	8004dcc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	09db      	lsrs	r3, r3, #7
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd0:	d8f0      	bhi.n	8004db4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	e00b      	b.n	8004e04 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	6279      	str	r1, [r7, #36]	; 0x24
 8004df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	09db      	lsrs	r3, r3, #7
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	2b7f      	cmp	r3, #127	; 0x7f
 8004e08:	d8f0      	bhi.n	8004dec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	69b8      	ldr	r0, [r7, #24]
 8004e20:	f7ff fa82 	bl	8004328 <_SendPacket>
  RECORD_END();
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f383 8811 	msr	BASEPRI, r3
}
 8004e2a:	bf00      	nop
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20003358 	.word	0x20003358

08004e38 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b090      	sub	sp, #64	; 0x40
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e46:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4a:	f04f 0120 	mov.w	r1, #32
 8004e4e:	f381 8811 	msr	BASEPRI, r1
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	4840      	ldr	r0, [pc, #256]	; (8004f58 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004e56:	f7ff f975 	bl	8004144 <_PreparePacket>
 8004e5a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e68:	e00b      	b.n	8004e82 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e70:	1c59      	adds	r1, r3, #1
 8004e72:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	09db      	lsrs	r3, r3, #7
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b7f      	cmp	r3, #127	; 0x7f
 8004e86:	d8f0      	bhi.n	8004e6a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea0:	e00b      	b.n	8004eba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	6379      	str	r1, [r7, #52]	; 0x34
 8004eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	09db      	lsrs	r3, r3, #7
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebe:	d8f0      	bhi.n	8004ea2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed8:	e00b      	b.n	8004ef2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	1c59      	adds	r1, r3, #1
 8004ee2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	09db      	lsrs	r3, r3, #7
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef6:	d8f0      	bhi.n	8004eda <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0e:	623b      	str	r3, [r7, #32]
 8004f10:	e00b      	b.n	8004f2a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	1c59      	adds	r1, r3, #1
 8004f1a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	09db      	lsrs	r3, r3, #7
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2e:	d8f0      	bhi.n	8004f12 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	627a      	str	r2, [r7, #36]	; 0x24
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6979      	ldr	r1, [r7, #20]
 8004f44:	69b8      	ldr	r0, [r7, #24]
 8004f46:	f7ff f9ef 	bl	8004328 <_SendPacket>
  RECORD_END();
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f383 8811 	msr	BASEPRI, r3
}
 8004f50:	bf00      	nop
 8004f52:	3740      	adds	r7, #64	; 0x40
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20003358 	.word	0x20003358

08004f5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	; 0x30
 8004f60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f62:	4b59      	ldr	r3, [pc, #356]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f68:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6c:	f04f 0120 	mov.w	r1, #32
 8004f70:	f381 8811 	msr	BASEPRI, r1
 8004f74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f76:	4b54      	ldr	r3, [pc, #336]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	220a      	movs	r2, #10
 8004f7c:	4953      	ldr	r1, [pc, #332]	; (80050cc <SEGGER_SYSVIEW_Start+0x170>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb f8e6 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f8a:	f7fe fca9 	bl	80038e0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f8e:	200a      	movs	r0, #10
 8004f90:	f7ff fe9e 	bl	8004cd0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f94:	f3ef 8311 	mrs	r3, BASEPRI
 8004f98:	f04f 0120 	mov.w	r1, #32
 8004f9c:	f381 8811 	msr	BASEPRI, r1
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	484b      	ldr	r0, [pc, #300]	; (80050d0 <SEGGER_SYSVIEW_Start+0x174>)
 8004fa4:	f7ff f8ce 	bl	8004144 <_PreparePacket>
 8004fa8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb8:	e00b      	b.n	8004fd2 <SEGGER_SYSVIEW_Start+0x76>
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	1c59      	adds	r1, r3, #1
 8004fc2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd6:	d8f0      	bhi.n	8004fba <SEGGER_SYSVIEW_Start+0x5e>
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	e00b      	b.n	800500c <SEGGER_SYSVIEW_Start+0xb0>
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	6279      	str	r1, [r7, #36]	; 0x24
 8004ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b7f      	cmp	r3, #127	; 0x7f
 8005010:	d8f0      	bhi.n	8004ff4 <SEGGER_SYSVIEW_Start+0x98>
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	627a      	str	r2, [r7, #36]	; 0x24
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	4b28      	ldr	r3, [pc, #160]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e00b      	b.n	8005046 <SEGGER_SYSVIEW_Start+0xea>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	61f9      	str	r1, [r7, #28]
 8005038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	09db      	lsrs	r3, r3, #7
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b7f      	cmp	r3, #127	; 0x7f
 800504a:	d8f0      	bhi.n	800502e <SEGGER_SYSVIEW_Start+0xd2>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	61fa      	str	r2, [r7, #28]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e00b      	b.n	800507e <SEGGER_SYSVIEW_Start+0x122>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	1c59      	adds	r1, r3, #1
 800506e:	6179      	str	r1, [r7, #20]
 8005070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	09db      	lsrs	r3, r3, #7
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b7f      	cmp	r3, #127	; 0x7f
 8005082:	d8f0      	bhi.n	8005066 <SEGGER_SYSVIEW_Start+0x10a>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	617a      	str	r2, [r7, #20]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005094:	2218      	movs	r2, #24
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff f945 	bl	8004328 <_SendPacket>
      RECORD_END();
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050b2:	f000 f9eb 	bl	800548c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050b6:	f000 f9b1 	bl	800541c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050ba:	f000 fc83 	bl	80059c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050be:	bf00      	nop
 80050c0:	3730      	adds	r7, #48	; 0x30
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20003328 	.word	0x20003328
 80050cc:	08005db0 	.word	0x08005db0
 80050d0:	20003358 	.word	0x20003358

080050d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050da:	f3ef 8311 	mrs	r3, BASEPRI
 80050de:	f04f 0120 	mov.w	r1, #32
 80050e2:	f381 8811 	msr	BASEPRI, r1
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	480b      	ldr	r0, [pc, #44]	; (8005118 <SEGGER_SYSVIEW_Stop+0x44>)
 80050ea:	f7ff f82b 	bl	8004144 <_PreparePacket>
 80050ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <SEGGER_SYSVIEW_Stop+0x48>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80050f8:	220b      	movs	r2, #11
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f7ff f913 	bl	8004328 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <SEGGER_SYSVIEW_Stop+0x48>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f383 8811 	msr	BASEPRI, r3
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20003358 	.word	0x20003358
 800511c:	20003328 	.word	0x20003328

08005120 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08c      	sub	sp, #48	; 0x30
 8005124:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005126:	f3ef 8311 	mrs	r3, BASEPRI
 800512a:	f04f 0120 	mov.w	r1, #32
 800512e:	f381 8811 	msr	BASEPRI, r1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4845      	ldr	r0, [pc, #276]	; (800524c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005136:	f7ff f805 	bl	8004144 <_PreparePacket>
 800513a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
 800514a:	e00b      	b.n	8005164 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	b2da      	uxtb	r2, r3
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	09db      	lsrs	r3, r3, #7
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b7f      	cmp	r3, #127	; 0x7f
 8005168:	d8f0      	bhi.n	800514c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	4b34      	ldr	r3, [pc, #208]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	e00b      	b.n	800519e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1c59      	adds	r1, r3, #1
 800518e:	6279      	str	r1, [r7, #36]	; 0x24
 8005190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	09db      	lsrs	r3, r3, #7
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b7f      	cmp	r3, #127	; 0x7f
 80051a2:	d8f0      	bhi.n	8005186 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	627a      	str	r2, [r7, #36]	; 0x24
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e00b      	b.n	80051d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	61f9      	str	r1, [r7, #28]
 80051ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b7f      	cmp	r3, #127	; 0x7f
 80051dc:	d8f0      	bhi.n	80051c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	61fa      	str	r2, [r7, #28]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e00b      	b.n	8005210 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	6179      	str	r1, [r7, #20]
 8005202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b7f      	cmp	r3, #127	; 0x7f
 8005214:	d8f0      	bhi.n	80051f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	617a      	str	r2, [r7, #20]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005226:	2218      	movs	r2, #24
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	68b8      	ldr	r0, [r7, #8]
 800522c:	f7ff f87c 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	4798      	blx	r3
  }
}
 8005244:	bf00      	nop
 8005246:	3730      	adds	r7, #48	; 0x30
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20003358 	.word	0x20003358
 8005250:	20003328 	.word	0x20003328

08005254 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b092      	sub	sp, #72	; 0x48
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800525c:	f3ef 8311 	mrs	r3, BASEPRI
 8005260:	f04f 0120 	mov.w	r1, #32
 8005264:	f381 8811 	msr	BASEPRI, r1
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	486a      	ldr	r0, [pc, #424]	; (8005414 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800526c:	f7fe ff6a 	bl	8004144 <_PreparePacket>
 8005270:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	647b      	str	r3, [r7, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b66      	ldr	r3, [pc, #408]	; (8005418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	643b      	str	r3, [r7, #64]	; 0x40
 8005286:	e00b      	b.n	80052a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	6479      	str	r1, [r7, #68]	; 0x44
 8005292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529c:	09db      	lsrs	r3, r3, #7
 800529e:	643b      	str	r3, [r7, #64]	; 0x40
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	2b7f      	cmp	r3, #127	; 0x7f
 80052a4:	d8f0      	bhi.n	8005288 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	647a      	str	r2, [r7, #68]	; 0x44
 80052ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c0:	e00b      	b.n	80052da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	09db      	lsrs	r3, r3, #7
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b7f      	cmp	r3, #127	; 0x7f
 80052de:	d8f0      	bhi.n	80052c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	4619      	mov	r1, r3
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7fe fed7 	bl	80040ac <_EncodeStr>
 80052fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005300:	2209      	movs	r2, #9
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	6938      	ldr	r0, [r7, #16]
 8005306:	f7ff f80f 	bl	8004328 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b40      	ldr	r3, [pc, #256]	; (8005418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
 800531e:	e00b      	b.n	8005338 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	6379      	str	r1, [r7, #52]	; 0x34
 800532a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2b7f      	cmp	r3, #127	; 0x7f
 800533c:	d8f0      	bhi.n	8005320 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800533e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	637a      	str	r2, [r7, #52]	; 0x34
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
 8005358:	e00b      	b.n	8005372 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	2b7f      	cmp	r3, #127	; 0x7f
 8005376:	d8f0      	bhi.n	800535a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	e00b      	b.n	80053ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1c59      	adds	r1, r3, #1
 800539c:	6279      	str	r1, [r7, #36]	; 0x24
 800539e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	09db      	lsrs	r3, r3, #7
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b7f      	cmp	r3, #127	; 0x7f
 80053b0:	d8f0      	bhi.n	8005394 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	627a      	str	r2, [r7, #36]	; 0x24
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e00b      	b.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	61f9      	str	r1, [r7, #28]
 80053d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	61fa      	str	r2, [r7, #28]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80053fa:	2215      	movs	r2, #21
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	6938      	ldr	r0, [r7, #16]
 8005400:	f7fe ff92 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f383 8811 	msr	BASEPRI, r3
}
 800540a:	bf00      	nop
 800540c:	3748      	adds	r7, #72	; 0x48
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20003358 	.word	0x20003358
 8005418:	20003328 	.word	0x20003328

0800541c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005432:	4b03      	ldr	r3, [pc, #12]	; (8005440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4798      	blx	r3
  }
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20003328 	.word	0x20003328

08005444 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800544c:	f3ef 8311 	mrs	r3, BASEPRI
 8005450:	f04f 0120 	mov.w	r1, #32
 8005454:	f381 8811 	msr	BASEPRI, r1
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	480b      	ldr	r0, [pc, #44]	; (8005488 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800545c:	f7fe fe72 	bl	8004144 <_PreparePacket>
 8005460:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	6938      	ldr	r0, [r7, #16]
 8005468:	f7fe fe20 	bl	80040ac <_EncodeStr>
 800546c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800546e:	220e      	movs	r2, #14
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f7fe ff58 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20003358 	.word	0x20003358

0800548c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01a      	beq.n	80054d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d015      	beq.n	80054d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4798      	blx	r3
 80054ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	000a      	movs	r2, r1
 80054c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054c2:	4613      	mov	r3, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4621      	mov	r1, r4
 80054c8:	200d      	movs	r0, #13
 80054ca:	f7ff fc5b 	bl	8004d84 <SEGGER_SYSVIEW_RecordU32x2>
 80054ce:	e006      	b.n	80054de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	200c      	movs	r0, #12
 80054d8:	f7ff fc18 	bl	8004d0c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20003328 	.word	0x20003328
 80054ec:	e0001004 	.word	0xe0001004

080054f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054f6:	f3ef 8311 	mrs	r3, BASEPRI
 80054fa:	f04f 0120 	mov.w	r1, #32
 80054fe:	f381 8811 	msr	BASEPRI, r1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4819      	ldr	r0, [pc, #100]	; (800556c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005506:	f7fe fe1d 	bl	8004144 <_PreparePacket>
 800550a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e00b      	b.n	800553c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	6179      	str	r1, [r7, #20]
 800552e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	09db      	lsrs	r3, r3, #7
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b7f      	cmp	r3, #127	; 0x7f
 8005540:	d8f0      	bhi.n	8005524 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	617a      	str	r2, [r7, #20]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005552:	2202      	movs	r2, #2
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	68b8      	ldr	r0, [r7, #8]
 8005558:	f7fe fee6 	bl	8004328 <_SendPacket>
  RECORD_END();
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f383 8811 	msr	BASEPRI, r3
}
 8005562:	bf00      	nop
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20003358 	.word	0x20003358
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800557a:	f3ef 8311 	mrs	r3, BASEPRI
 800557e:	f04f 0120 	mov.w	r1, #32
 8005582:	f381 8811 	msr	BASEPRI, r1
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	4807      	ldr	r0, [pc, #28]	; (80055a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800558a:	f7fe fddb 	bl	8004144 <_PreparePacket>
 800558e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005590:	2203      	movs	r2, #3
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6838      	ldr	r0, [r7, #0]
 8005596:	f7fe fec7 	bl	8004328 <_SendPacket>
  RECORD_END();
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f383 8811 	msr	BASEPRI, r3
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20003358 	.word	0x20003358

080055ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055b2:	f3ef 8311 	mrs	r3, BASEPRI
 80055b6:	f04f 0120 	mov.w	r1, #32
 80055ba:	f381 8811 	msr	BASEPRI, r1
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	4807      	ldr	r0, [pc, #28]	; (80055e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055c2:	f7fe fdbf 	bl	8004144 <_PreparePacket>
 80055c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055c8:	2212      	movs	r2, #18
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	6838      	ldr	r0, [r7, #0]
 80055ce:	f7fe feab 	bl	8004328 <_SendPacket>
  RECORD_END();
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f383 8811 	msr	BASEPRI, r3
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20003358 	.word	0x20003358

080055e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055ea:	f3ef 8311 	mrs	r3, BASEPRI
 80055ee:	f04f 0120 	mov.w	r1, #32
 80055f2:	f381 8811 	msr	BASEPRI, r1
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	4807      	ldr	r0, [pc, #28]	; (8005618 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80055fa:	f7fe fda3 	bl	8004144 <_PreparePacket>
 80055fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005600:	2211      	movs	r2, #17
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6838      	ldr	r0, [r7, #0]
 8005606:	f7fe fe8f 	bl	8004328 <_SendPacket>
  RECORD_END();
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f383 8811 	msr	BASEPRI, r3
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20003358 	.word	0x20003358

0800561c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005624:	f3ef 8311 	mrs	r3, BASEPRI
 8005628:	f04f 0120 	mov.w	r1, #32
 800562c:	f381 8811 	msr	BASEPRI, r1
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	4819      	ldr	r0, [pc, #100]	; (8005698 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005634:	f7fe fd86 	bl	8004144 <_PreparePacket>
 8005638:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800563e:	4b17      	ldr	r3, [pc, #92]	; (800569c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e00b      	b.n	800566a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	1c59      	adds	r1, r3, #1
 800565a:	61f9      	str	r1, [r7, #28]
 800565c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	09db      	lsrs	r3, r3, #7
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b7f      	cmp	r3, #127	; 0x7f
 800566e:	d8f0      	bhi.n	8005652 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	61fa      	str	r2, [r7, #28]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005680:	2208      	movs	r2, #8
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	6938      	ldr	r0, [r7, #16]
 8005686:	f7fe fe4f 	bl	8004328 <_SendPacket>
  RECORD_END();
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f383 8811 	msr	BASEPRI, r3
}
 8005690:	bf00      	nop
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20003358 	.word	0x20003358
 800569c:	20003328 	.word	0x20003328

080056a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056a8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ac:	f04f 0120 	mov.w	r1, #32
 80056b0:	f381 8811 	msr	BASEPRI, r1
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	4819      	ldr	r0, [pc, #100]	; (800571c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056b8:	f7fe fd44 	bl	8004144 <_PreparePacket>
 80056bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e00b      	b.n	80056ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	61f9      	str	r1, [r7, #28]
 80056e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b7f      	cmp	r3, #127	; 0x7f
 80056f2:	d8f0      	bhi.n	80056d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	61fa      	str	r2, [r7, #28]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005704:	2204      	movs	r2, #4
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	6938      	ldr	r0, [r7, #16]
 800570a:	f7fe fe0d 	bl	8004328 <_SendPacket>
  RECORD_END();
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f383 8811 	msr	BASEPRI, r3
}
 8005714:	bf00      	nop
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20003358 	.word	0x20003358
 8005720:	20003328 	.word	0x20003328

08005724 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800572c:	f3ef 8311 	mrs	r3, BASEPRI
 8005730:	f04f 0120 	mov.w	r1, #32
 8005734:	f381 8811 	msr	BASEPRI, r1
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	4819      	ldr	r0, [pc, #100]	; (80057a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800573c:	f7fe fd02 	bl	8004144 <_PreparePacket>
 8005740:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e00b      	b.n	8005772 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	61f9      	str	r1, [r7, #28]
 8005764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	d8f0      	bhi.n	800575a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	61fa      	str	r2, [r7, #28]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005788:	2206      	movs	r2, #6
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	6938      	ldr	r0, [r7, #16]
 800578e:	f7fe fdcb 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f383 8811 	msr	BASEPRI, r3
}
 8005798:	bf00      	nop
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20003358 	.word	0x20003358
 80057a4:	20003328 	.word	0x20003328

080057a8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057b2:	f3ef 8311 	mrs	r3, BASEPRI
 80057b6:	f04f 0120 	mov.w	r1, #32
 80057ba:	f381 8811 	msr	BASEPRI, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	4827      	ldr	r0, [pc, #156]	; (8005860 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057c2:	f7fe fcbf 	bl	8004144 <_PreparePacket>
 80057c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	623b      	str	r3, [r7, #32]
 80057de:	e00b      	b.n	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	6279      	str	r1, [r7, #36]	; 0x24
 80057ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	09db      	lsrs	r3, r3, #7
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b7f      	cmp	r3, #127	; 0x7f
 80057fc:	d8f0      	bhi.n	80057e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	627a      	str	r2, [r7, #36]	; 0x24
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e00b      	b.n	8005830 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	61f9      	str	r1, [r7, #28]
 8005822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	09db      	lsrs	r3, r3, #7
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b7f      	cmp	r3, #127	; 0x7f
 8005834:	d8f0      	bhi.n	8005818 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	61fa      	str	r2, [r7, #28]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005846:	2207      	movs	r2, #7
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f7fe fd6c 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f383 8811 	msr	BASEPRI, r3
}
 8005856:	bf00      	nop
 8005858:	3728      	adds	r7, #40	; 0x28
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20003358 	.word	0x20003358
 8005864:	20003328 	.word	0x20003328

08005868 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005870:	4b04      	ldr	r3, [pc, #16]	; (8005884 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	1ad3      	subs	r3, r2, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20003328 	.word	0x20003328

08005888 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	; 0x30
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d06d      	beq.n	8005976 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058a0:	2300      	movs	r3, #0
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a4:	e008      	b.n	80058b8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	3301      	adds	r3, #1
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3f2      	bcc.n	80058a6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058c0:	e000      	b.n	80058c4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058c2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d055      	beq.n	8005976 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ca:	f3ef 8311 	mrs	r3, BASEPRI
 80058ce:	f04f 0120 	mov.w	r1, #32
 80058d2:	f381 8811 	msr	BASEPRI, r1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	482a      	ldr	r0, [pc, #168]	; (8005984 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058da:	f7fe fc33 	bl	8004144 <_PreparePacket>
 80058de:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	623b      	str	r3, [r7, #32]
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_SendModule+0x7e>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	6279      	str	r1, [r7, #36]	; 0x24
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	623b      	str	r3, [r7, #32]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_SendModule+0x66>
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	627a      	str	r2, [r7, #36]	; 0x24
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e00b      	b.n	8005940 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	1c59      	adds	r1, r3, #1
 8005930:	61f9      	str	r1, [r7, #28]
 8005932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	09db      	lsrs	r3, r3, #7
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b7f      	cmp	r3, #127	; 0x7f
 8005944:	d8f0      	bhi.n	8005928 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	61fa      	str	r2, [r7, #28]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fe fba4 	bl	80040ac <_EncodeStr>
 8005964:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005966:	2216      	movs	r2, #22
 8005968:	68f9      	ldr	r1, [r7, #12]
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f7fe fcdc 	bl	8004328 <_SendPacket>
      RECORD_END();
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005976:	bf00      	nop
 8005978:	3730      	adds	r7, #48	; 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20003350 	.word	0x20003350
 8005984:	20003358 	.word	0x20003358

08005988 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00f      	beq.n	80059b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f2      	bne.n	800599c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20003350 	.word	0x20003350

080059c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059ca:	f3ef 8311 	mrs	r3, BASEPRI
 80059ce:	f04f 0120 	mov.w	r1, #32
 80059d2:	f381 8811 	msr	BASEPRI, r1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	4817      	ldr	r0, [pc, #92]	; (8005a38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059da:	f7fe fbb3 	bl	8004144 <_PreparePacket>
 80059de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e00b      	b.n	8005a08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	6179      	str	r1, [r7, #20]
 80059fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	09db      	lsrs	r3, r3, #7
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0c:	d8f0      	bhi.n	80059f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	617a      	str	r2, [r7, #20]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a1e:	221b      	movs	r2, #27
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68b8      	ldr	r0, [r7, #8]
 8005a24:	f7fe fc80 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20003358 	.word	0x20003358
 8005a3c:	20003354 	.word	0x20003354

08005a40 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a40:	b40f      	push	{r0, r1, r2, r3}
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	461a      	mov	r2, r3
 8005a52:	2100      	movs	r1, #0
 8005a54:	6938      	ldr	r0, [r7, #16]
 8005a56:	f7fe fef1 	bl	800483c <_VPrintTarget>
  va_end(ParamList);
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr

08005a68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a70:	f3ef 8311 	mrs	r3, BASEPRI
 8005a74:	f04f 0120 	mov.w	r1, #32
 8005a78:	f381 8811 	msr	BASEPRI, r1
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	4827      	ldr	r0, [pc, #156]	; (8005b1c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a80:	f7fe fb60 	bl	8004144 <_PreparePacket>
 8005a84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	6938      	ldr	r0, [r7, #16]
 8005a8c:	f7fe fb0e 	bl	80040ac <_EncodeStr>
 8005a90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	2301      	movs	r3, #1
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	e00b      	b.n	8005ab4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	6279      	str	r1, [r7, #36]	; 0x24
 8005aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	09db      	lsrs	r3, r3, #7
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab8:	d8f0      	bhi.n	8005a9c <SEGGER_SYSVIEW_Warn+0x34>
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e00b      	b.n	8005aec <SEGGER_SYSVIEW_Warn+0x84>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	61f9      	str	r1, [r7, #28]
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	09db      	lsrs	r3, r3, #7
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b7f      	cmp	r3, #127	; 0x7f
 8005af0:	d8f0      	bhi.n	8005ad4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	61fa      	str	r2, [r7, #28]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b02:	221a      	movs	r2, #26
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f7fe fc0e 	bl	8004328 <_SendPacket>
  RECORD_END();
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f383 8811 	msr	BASEPRI, r3
}
 8005b12:	bf00      	nop
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20003358 	.word	0x20003358

08005b20 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b26:	7e1b      	ldrb	r3, [r3, #24]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	336c      	adds	r3, #108	; 0x6c
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b3c:	7e1b      	ldrb	r3, [r3, #24]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	490d      	ldr	r1, [pc, #52]	; (8005b78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b42:	4603      	mov	r3, r0
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4403      	add	r3, r0
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3370      	adds	r3, #112	; 0x70
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d00b      	beq.n	8005b6c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b56:	789b      	ldrb	r3, [r3, #2]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b62:	f7fe fafb 	bl	800415c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20003328 	.word	0x20003328
 8005b78:	20001e68 	.word	0x20001e68

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	2600      	movs	r6, #0
 8005b80:	4d0c      	ldr	r5, [pc, #48]	; (8005bb4 <__libc_init_array+0x38>)
 8005b82:	4c0d      	ldr	r4, [pc, #52]	; (8005bb8 <__libc_init_array+0x3c>)
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	f000 f840 	bl	8005c10 <_init>
 8005b90:	2600      	movs	r6, #0
 8005b92:	4d0a      	ldr	r5, [pc, #40]	; (8005bbc <__libc_init_array+0x40>)
 8005b94:	4c0a      	ldr	r4, [pc, #40]	; (8005bc0 <__libc_init_array+0x44>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	08005dcc 	.word	0x08005dcc
 8005bb8:	08005dcc 	.word	0x08005dcc
 8005bbc:	08005dcc 	.word	0x08005dcc
 8005bc0:	08005dd0 	.word	0x08005dd0

08005bc4 <memcmp>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	3901      	subs	r1, #1
 8005bc8:	4402      	add	r2, r0
 8005bca:	4290      	cmp	r0, r2
 8005bcc:	d101      	bne.n	8005bd2 <memcmp+0xe>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e005      	b.n	8005bde <memcmp+0x1a>
 8005bd2:	7803      	ldrb	r3, [r0, #0]
 8005bd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d001      	beq.n	8005be0 <memcmp+0x1c>
 8005bdc:	1b18      	subs	r0, r3, r4
 8005bde:	bd10      	pop	{r4, pc}
 8005be0:	3001      	adds	r0, #1
 8005be2:	e7f2      	b.n	8005bca <memcmp+0x6>

08005be4 <memcpy>:
 8005be4:	440a      	add	r2, r1
 8005be6:	4291      	cmp	r1, r2
 8005be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bec:	d100      	bne.n	8005bf0 <memcpy+0xc>
 8005bee:	4770      	bx	lr
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf6:	4291      	cmp	r1, r2
 8005bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfc:	d1f9      	bne.n	8005bf2 <memcpy+0xe>
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <memset>:
 8005c00:	4603      	mov	r3, r0
 8005c02:	4402      	add	r2, r0
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memset+0xa>
 8005c08:	4770      	bx	lr
 8005c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0e:	e7f9      	b.n	8005c04 <memset+0x4>

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
